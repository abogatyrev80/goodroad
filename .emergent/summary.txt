<analysis>
The AI engineer developed the Good Road mobile app from scratch, implementing core features like sensor data collection, background processing, auto-start, and configurable audio-visual warnings. Development was iterative, involving extensive debugging of white screen and  errors. Key features like speed, GPS accuracy, and sound alerts faced persistent bugs. Recent efforts focused on fixing sound alerts, implementing a smart warning system, and developing an administrative panel with map visualization. A major re-architecture for offline functionality using SQLite was initiated. The most recent issue involves an HTTP 500 error in the web-based admin panel, traced to SQLite module loading errors in the browser environment, leading to the creation of  to mitigate this. Navigation between screens also remains an intermittent problem, particularly in the web preview.
</analysis>

<product_requirements>
The Good Road application is a mobile tool enhancing driver safety by monitoring road quality. It operates in the background, collecting accelerometer and multi-system GPS data for server-side analysis to identify road hazards (potholes, bumps). Key features include real-time road quality display, audio-visual hazard warnings, automatic service start (car connection/motion), and UI showing speed, satellite count, and GPS accuracy. Users can configure warnings via settings, setting speed thresholds and hazard types, and customize audio warnings, including uploading their own sounds. An intelligent warning system classifies obstacles based on approach speed and driver action, escalating alerts. An administrative panel for visualizing sensor data on a map is required for analysis. Future requirements include offline data storage using SQLite, regional data download, local data accumulation when offline, and a direction indicator to hazards. The admin panel is to be a separate web application.
</product_requirements>

<key_technical_concepts>
-   **Frontend:** React Native, Expo, Expo Router, TypeScript.
-   **Device APIs:** , , , , , , .
-   **Backend:** Python (FastAPI).
-   **Database:** MongoDB.
-   **Storage:** .
-   **Tunneling:** ngrok.
</key_technical_concepts>

<code_architecture>
The application uses a full-stack architecture with an Expo/React Native frontend and a FastAPI/MongoDB backend.

**Directory Structure:**


-   ****
    -   **Importance:** This is the main screen and the core of the application, containing the UI for road quality, status displays, control buttons, and primary logic for sensors, permissions, tracking, and warnings.
    -   **Changes:** Extensively modified for sensor logic, auto-start, a complex warning system, and detailed status indicators. It was updated to integrate new sound settings, the smart warning system, offline system initialization, and a direction indicator UI.

-   ****
    -   **Importance:** Defines the settings screen, allowing users to configure warning behavior, including hazard types and speed thresholds.
    -   **Changes:** Extended to include custom audio selection and upload functionality using , along with several predefined sound options.

-   ****
    -   **Importance:** Serves as the administrative dashboard for visualizing sensor data, statistics, and integrating map data.
    -   **Changes:** Created to display road condition statistics and a placeholder map. It integrates backend administrative APIs but has faced persistent issues with network requests and SQLite imports in web environments. Modifications were made to handle  and  errors.

-   ****
    -   **Importance:** A simplified administrative panel designed to circumvent issues present in , specifically those related to SQLite module loading errors in the web environment.
    -   **Changes:** Newly created to provide basic administrative functionality and data display by avoiding problematic imports that caused crashes.

-   ****
    -   **Importance:** Manages region-based data downloads for offline use and other offline mode configurations.
    -   **Changes:** Newly created to handle offline capabilities, incorporating  with platform-specific loading checks to prevent web issues.

-   ****
    -   **Importance:** Provides an interface for local data storage and management using SQLite on the device.
    -   **Changes:** Newly created as a core component of the offline re-architecture.

-   ****
    -   **Importance:** Manages the synchronization of locally stored data with the backend server.
    -   **Changes:** Newly created to enable data exchange between the device and the server when connectivity is available.

-   ****
    -   **Importance:** The FastAPI backend application, defining API endpoints for receiving sensor data, analyzing road hazards, and providing hazard information.
    -   **Changes:** Extended to include new administrative endpoints (e.g., , ) to support the data visualization and management requirements of the admin panel.
</code_architecture>

<pending_tasks>
-   **Fix Navigation:** Address unstable  behavior for consistent screen transitions, especially in web preview.
-   **Frontend Tests:** Implement automated tests for critical frontend functionalities.
-   **Performance Optimization:** Optimize UI updates and overall frontend performance.
-   **Offline Mode:** Fully implement and test offline data caching, synchronization, and regional data downloads on mobile.
-   **Admin Panel Web Access:** Ensure the administrative panel functions correctly in a web browser, resolving all loading and display issues.
-   **Map Integration:** Integrate a functional, interactive map (Yandex/Google) into the admin panel for visual data analysis.
</pending_tasks>

<current_work>
Immediately prior to this summary, the AI engineer was addressing a critical HTTP 500 error in the administrative panel when accessed via the web browser. Diagnostics confirmed backend API endpoints () were operational, pointing the issue to the frontend. The root cause was identified as  or its related  module attempting to load in the web environment, causing a server error during bundling. The AI had previously fixed incorrect API URLs and  errors in . To resolve the persistent 500 error and make the admin panel accessible in the web preview, the AI is currently creating a new, simplified  file. This new file aims to provide basic administrative functionality by avoiding the problematic imports that lead to web-specific crashes. The work has progressed to the point of creating this file, with the next step being to integrate it.
</current_work>

<optional_next_step>
Finalize the implementation of  to resolve the HTTP 500 error and make the web admin panel accessible.
</optional_next_step>
