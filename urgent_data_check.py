#!/usr/bin/env python3
"""
URGENT DATA VERIFICATION - October 19, 2025
Specific tests requested in review_request
"""

import requests
import json
from datetime import datetime
import os

# Backend URL
BACKEND_URL = "https://smoothroad.preview.emergentagent.com/api"

def test_latest_5_records():
    """GET /api/admin/sensor-data?limit=5 - –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π"""
    print("üîç TEST 1: GET /api/admin/sensor-data?limit=5")
    print("=" * 60)
    
    try:
        response = requests.get(f"{BACKEND_URL}/admin/sensor-data?limit=5", timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ SUCCESS: Retrieved {len(data['data'])} records")
            print(f"üìä Total records in database: {data['total']}")
            
            # Analyze timestamps for October 19, 2025
            today = "2025-10-19"
            today_count = 0
            
            print(f"\nüìÖ –ê–ù–ê–õ–ò–ó TIMESTAMP - –ï–°–¢–¨ –õ–ò –ó–ê–ü–ò–°–ò –ó–ê –°–ï–ì–û–î–ù–Ø ({today}):")
            print("-" * 50)
            
            for i, record in enumerate(data['data'], 1):
                timestamp = record['timestamp']
                gps = f"({record['latitude']}, {record['longitude']})"
                
                # Check if record is from today
                is_today = today in timestamp
                if is_today:
                    today_count += 1
                    status = "üéâ –°–ï–ì–û–î–ù–Ø!"
                else:
                    status = "üìÖ –°—Ç–∞—Ä–∞—è"
                
                print(f"–ó–∞–ø–∏—Å—å {i}: {timestamp} | GPS: {gps} | {status}")
            
            print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –ê–ù–ê–õ–ò–ó–ê:")
            print(f"–ó–∞–ø–∏—Å–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è (19 –æ–∫—Ç—è–±—Ä—è 2025): {today_count}")
            print(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ: {data['total']}")
            
            if today_count > 0:
                print(f"üéâ –û–¢–õ–ò–ß–ù–û! –ù–∞–π–¥–µ–Ω–æ {today_count} –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è!")
            else:
                print(f"‚ö†Ô∏è  –ù–ï–¢ –ù–û–í–´–• –î–ê–ù–ù–´–• –∑–∞ —Å–µ–≥–æ–¥–Ω—è")
            
            return {
                'success': True,
                'total_records': data['total'],
                'today_records': today_count,
                'records': data['data']
            }
            
        else:
            print(f"‚ùå –û–®–ò–ë–ö–ê: HTTP {response.status_code}")
            return {'success': False, 'error': f"HTTP {response.status_code}"}
            
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {str(e)}")
        return {'success': False, 'error': str(e)}

def test_analytics_total_points():
    """GET /api/admin/analytics - –æ–±–Ω–æ–≤–∏–ª–∞—Å—å –ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ total_points?"""
    print("\nüîç TEST 2: GET /api/admin/analytics")
    print("=" * 60)
    
    try:
        response = requests.get(f"{BACKEND_URL}/admin/analytics", timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            
            current_total = data['total_points']
            previous_total = 20  # –ë—ã–ª–æ 20 –¥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            
            print(f"‚úÖ SUCCESS: Analytics retrieved")
            print(f"\nüìä –°–†–ê–í–ù–ï–ù–ò–ï –° –ü–†–ï–î–´–î–£–©–ò–ú –ê–ù–ê–õ–ò–ó–û–ú:")
            print(f"–ë—ã–ª–æ –¥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {previous_total} —Ç–æ—á–µ–∫")
            print(f"–°–µ–π—á–∞—Å –≤ –±–∞–∑–µ: {current_total} —Ç–æ—á–µ–∫")
            
            if current_total > previous_total:
                new_points = current_total - previous_total
                print(f"üéâ –ù–û–í–´–ï –î–ê–ù–ù–´–ï –û–ë–ù–ê–†–£–ñ–ï–ù–´: +{new_points} –Ω–æ–≤—ã—Ö —Ç–æ—á–µ–∫!")
                print(f"‚úÖ total_points –û–ë–ù–û–í–ò–õ–°–Ø —Å {previous_total} –¥–æ {current_total}")
            elif current_total == previous_total:
                print(f"‚ö†Ô∏è  –ù–ï–¢ –ò–ó–ú–ï–ù–ï–ù–ò–ô: total_points –æ—Å—Ç–∞–ª—Å—è {current_total}")
            else:
                print(f"üìâ –£–ú–ï–ù–¨–®–ï–ù–ò–ï: total_points —É–º–µ–Ω—å—à–∏–ª—Å—è –Ω–∞ {previous_total - current_total}")
            
            print(f"\nüìà –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            print(f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∏: {data['verified_points']}")
            print(f"–¢–æ—á–∫–∏ —Å –æ–ø–∞—Å–Ω–æ—Å—Ç—è–º–∏: {data['hazard_points']}")
            print(f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ 7 –¥–Ω–µ–π: {data['recent_points_7d']}")
            print(f"–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –¥–æ—Ä–æ–≥–∏: {data['avg_road_quality']}")
            
            return {
                'success': True,
                'current_total': current_total,
                'previous_total': previous_total,
                'new_points': max(0, current_total - previous_total),
                'recent_7d': data['recent_points_7d']
            }
            
        else:
            print(f"‚ùå –û–®–ò–ë–ö–ê: HTTP {response.status_code}")
            return {'success': False, 'error': f"HTTP {response.status_code}"}
            
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {str(e)}")
        return {'success': False, 'error': str(e)}

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("üö® –°–†–û–ß–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –î–ê–ù–ù–´–• - 19 –æ–∫—Ç—è–±—Ä—è 2025")
    print("–ü—Ä–æ–≤–µ—Ä—è–µ–º: –ø–æ—Å—Ç—É–ø–∞—é—Ç –ª–∏ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤")
    print("=" * 80)
    
    # –¢–µ—Å—Ç 1: –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π
    sensor_result = test_latest_5_records()
    
    # –¢–µ—Å—Ç 2: –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ total_points
    analytics_result = test_analytics_total_points()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
    print("\n" + "=" * 80)
    print("üéØ –ò–¢–û–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó –ü–†–û–í–ï–†–ö–ò")
    print("=" * 80)
    
    if sensor_result['success'] and analytics_result['success']:
        today_records = sensor_result['today_records']
        new_points = analytics_result['new_points']
        current_total = analytics_result['current_total']
        recent_7d = analytics_result['recent_7d']
        
        print(f"‚úÖ –û–±–∞ API —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        print(f"\nüìä –ö–õ–Æ–ß–ï–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print(f"üìà –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫: {current_total}")
        print(f"üÜï –ù–æ–≤—ã—Ö —Ç–æ—á–µ–∫ —Å –º–æ–º–µ–Ω—Ç–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {new_points}")
        print(f"üìÖ –ó–∞–ø–∏—Å–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è (19.10.2025): {today_records}")
        print(f"üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ 7 –¥–Ω–µ–π: {recent_7d}")
        
        print(f"\nüéØ –û–¢–í–ï–¢ –ù–ê –í–û–ü–†–û–°:")
        if today_records > 0:
            print(f"üéâ –î–ê! –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ü–û–°–¢–£–ü–ê–Æ–¢!")
            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {today_records} –∑–∞–ø–∏—Å–µ–π —Å timestamp 19 –æ–∫—Ç—è–±—Ä—è 2025")
            print(f"   ‚úÖ total_points —É–≤–µ–ª–∏—á–∏–ª—Å—è —Å 20 –¥–æ {current_total} (+{new_points})")
            print(f"   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –†–ê–ë–û–¢–ê–Æ–¢!")
        elif new_points > 0:
            print(f"üîÑ –ß–ê–°–¢–ò–ß–ù–û: –ï—Å—Ç—å –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –Ω–æ –Ω–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è")
            print(f"   ‚úÖ total_points —É–≤–µ–ª–∏—á–∏–ª—Å—è —Å 20 –¥–æ {current_total} (+{new_points})")
            print(f"   ‚ö†Ô∏è  –ù–æ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –∏–º–µ–Ω–Ω–æ –∑–∞ 19 –æ–∫—Ç—è–±—Ä—è 2025")
        else:
            print(f"‚ùå –ù–ï–¢: –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ù–ï –ø–æ—Å—Ç—É–ø–∞—é—Ç")
            print(f"   ‚ùå total_points –æ—Å—Ç–∞–ª—Å—è {current_total} (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)")
            print(f"   ‚ùå –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –∑–∞ 19 –æ–∫—Ç—è–±—Ä—è 2025")
            print(f"   üö® –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–≥—É—Ç –ù–ï —Ä–∞–±–æ—Ç–∞—Ç—å")
        
        print(f"\nüì± –ü–†–û–í–ï–†–ö–ê GPS –ò –ê–ö–°–ï–õ–ï–†–û–ú–ï–¢–†–ê:")
        if sensor_result['records']:
            for i, record in enumerate(sensor_result['records'][:3], 1):
                if "2025-10-19" in record['timestamp']:
                    gps = f"({record['latitude']}, {record['longitude']})"
                    accel = record['accelerometer']
                    print(f"   –ó–∞–ø–∏—Å—å {i}: GPS {gps}, –ê–∫—Å–µ–ª–µ—Ä–æ–º–µ—Ç—Ä (x:{accel['x']}, y:{accel['y']}, z:{accel['z']})")
        
    else:
        print(f"‚ùå –û–®–ò–ë–ö–ò API:")
        if not sensor_result['success']:
            print(f"   - Sensor data API: {sensor_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        if not analytics_result['success']:
            print(f"   - Analytics API: {analytics_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
    
    print("\n" + "=" * 80)

if __name__ == "__main__":
    main()