import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  ScrollView,
  Alert,
  ActivityIndicator,
  Switch,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { Ionicons } from '@expo/vector-icons';
import { router } from 'expo-router';
import { syncService } from '../services/SyncService';
import { SyncStatus } from '../services/LocalDatabase';

interface RegionData {
  code: string;
  name: string;
  country: string;
  bounds: {
    north: number;
    south: number;
    east: number;
    west: number;
  };
}

interface DownloadedRegion {
  code: string;
  name: string;
  lastSync: string;
  warningCount: number;
}

export default function OfflineSettings() {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
  const [syncStatus, setSyncStatus] = useState<SyncStatus | null>(null);
  const [availableRegions, setAvailableRegions] = useState<RegionData[]>([]);
  const [downloadedRegions, setDownloadedRegions] = useState<DownloadedRegion[]>([]);
  const [databaseStats, setDatabaseStats] = useState<any>(null);
  
  // UI —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  const [isLoading, setIsLoading] = useState(true);
  const [downloadingRegion, setDownloadingRegion] = useState<string | null>(null);
  const [syncing, setSyncing] = useState(false);
  const [autoSyncEnabled, setAutoSyncEnabled] = useState(true);

  useEffect(() => {
    initializeOfflineSettings();
  }, []);

  const initializeOfflineSettings = async () => {
    try {
      setIsLoading(true);
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º sync service –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
      await syncService.initialize();
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
      await loadCurrentStatus();
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã –µ—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç
      await loadAvailableRegions();
      
    } catch (error) {
      console.error('Offline settings initialization error:', error);
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å offline –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
    } finally {
      setIsLoading(false);
    }
  };

  const loadCurrentStatus = async () => {
    try {
      const status = await syncService.getSyncStatus();
      const downloaded = await syncService.getSyncStatus();
      const stats = await syncService.getDatabaseStats();
      
      setSyncStatus(status);
      setDatabaseStats(stats);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–∞—á–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–∞—Ö
      // Note: —ç—Ç–æ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ SyncService
      setDownloadedRegions([]);
      
    } catch (error) {
      console.error('Error loading current status:', error);
    }
  };

  const loadAvailableRegions = async () => {
    try {
      const regions = await syncService.getAvailableRegions();
      setAvailableRegions(regions);
    } catch (error) {
      console.error('Error loading available regions:', error);
    }
  };

  const handleDownloadRegion = async (region: RegionData) => {
    try {
      setDownloadingRegion(region.code);
      
      Alert.alert(
        '–°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω–∞',
        `–°–∫–∞—á–∞—Ç—å –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è ${region.name}?\n\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.`,
        [
          { text: '–û—Ç–º–µ–Ω–∞', style: 'cancel' },
          {
            text: '–°–∫–∞—á–∞—Ç—å',
            onPress: async () => {
              const success = await syncService.downloadRegionData(
                region.code,
                region.name,
                region.bounds
              );
              
              if (success) {
                Alert.alert('–£—Å–ø–µ—à–Ω–æ!', `–î–∞–Ω–Ω—ã–µ –¥–ª—è ${region.name} —Å–∫–∞—á–∞–Ω—ã`);
                await loadCurrentStatus();
              } else {
                Alert.alert('–û—à–∏–±–∫–∞', `–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è ${region.name}`);
              }
            }
          }
        ]
      );
      
    } catch (error) {
      console.error('Error downloading region:', error);
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω–∞');
    } finally {
      setDownloadingRegion(null);
    }
  };

  const handleForceSync = async () => {
    try {
      setSyncing(true);
      const success = await syncService.forceFullSync();
      
      if (success) {
        Alert.alert('–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞', '–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
        await loadCurrentStatus();
      } else {
        Alert.alert('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏', '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É');
      }
    } catch (error) {
      console.error('Force sync error:', error);
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é');
    } finally {
      setSyncing(false);
    }
  };

  const formatFileSize = (bytes: number): string => {
    if (bytes === 0) return '0 B';
    const k = 1024;
    const sizes = ['B', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];
  };

  const formatLastSync = (dateStr: string): string => {
    if (dateStr === 'Never') return '–ù–∏–∫–æ–≥–¥–∞';
    
    const date = new Date(dateStr);
    const now = new Date();
    const diffMs = now.getTime() - date.getTime();
    const diffMins = Math.floor(diffMs / 60000);
    const diffHours = Math.floor(diffMins / 60);
    const diffDays = Math.floor(diffHours / 24);
    
    if (diffMins < 1) return '–¢–æ–ª—å–∫–æ —á—Ç–æ';
    if (diffMins < 60) return `${diffMins} –º–∏–Ω –Ω–∞–∑–∞–¥`;
    if (diffHours < 24) return `${diffHours} —á –Ω–∞–∑–∞–¥`;
    return `${diffDays} –¥–Ω –Ω–∞–∑–∞–¥`;
  };

  if (isLoading) {
    return (
      <SafeAreaView style={styles.container}>
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="large" color="#4CAF50" />
          <Text style={styles.loadingText}>–ó–∞–≥—Ä—É–∑–∫–∞ offline –Ω–∞—Å—Ç—Ä–æ–µ–∫...</Text>
        </View>
      </SafeAreaView>
    );
  }

  return (
    <SafeAreaView style={styles.container}>
      {/* Header */}
      <View style={styles.header}>
        <TouchableOpacity onPress={() => router.back()}>
          <Ionicons name="arrow-back" size={24} color="#ffffff" />
        </TouchableOpacity>
        <Text style={styles.headerTitle}>Offline —Ä–µ–∂–∏–º</Text>
        <TouchableOpacity onPress={loadCurrentStatus}>
          <Ionicons name="refresh" size={24} color="#ffffff" />
        </TouchableOpacity>
      </View>

      <ScrollView style={styles.content}>
        {/* Connection Status */}
        <View style={styles.statusCard}>
          <View style={styles.statusRow}>
            <Ionicons 
              name={syncStatus?.isOnline ? "wifi" : "wifi-off"} 
              size={24} 
              color={syncStatus?.isOnline ? "#4CAF50" : "#F44336"} 
            />
            <View style={styles.statusInfo}>
              <Text style={styles.statusTitle}>
                {syncStatus?.isOnline ? '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É' : 'Offline —Ä–µ–∂–∏–º'}
              </Text>
              <Text style={styles.statusSubtitle}>
                –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: {formatLastSync(syncStatus?.lastSyncTime || 'Never')}
              </Text>
            </View>
            {syncing ? (
              <ActivityIndicator color="#4CAF50" />
            ) : (
              <TouchableOpacity onPress={handleForceSync} disabled={!syncStatus?.isOnline}>
                <Ionicons name="sync" size={24} color={syncStatus?.isOnline ? "#4CAF50" : "#666"} />
              </TouchableOpacity>
            )}
          </View>
        </View>

        {/* Database Statistics */}
        <View style={styles.sectionCard}>
          <Text style={styles.sectionTitle}>üìä –õ–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</Text>
          
          <View style={styles.statGrid}>
            <View style={styles.statItem}>
              <Text style={styles.statValue}>{databaseStats?.totalSensorData || 0}</Text>
              <Text style={styles.statLabel}>–ó–∞–ø–∏—Å–µ–π –¥–∞—Ç—á–∏–∫–æ–≤</Text>
            </View>
            <View style={styles.statItem}>
              <Text style={styles.statValue}>{databaseStats?.totalWarnings || 0}</Text>
              <Text style={styles.statLabel}>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π</Text>
            </View>
            <View style={styles.statItem}>
              <Text style={styles.statValue}>{syncStatus?.pendingSensorData || 0}</Text>
              <Text style={styles.statLabel}>–ù–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö</Text>
            </View>
            <View style={styles.statItem}>
              <Text style={styles.statValue}>{downloadedRegions.length}</Text>
              <Text style={styles.statLabel}>–°–∫–∞—á–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤</Text>
            </View>
          </View>
        </View>

        {/* Auto Sync Setting */}
        <View style={styles.sectionCard}>
          <View style={styles.settingRow}>
            <View style={styles.settingInfo}>
              <Text style={styles.settingTitle}>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è</Text>
              <Text style={styles.settingSubtitle}>
                –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
              </Text>
            </View>
            <Switch
              value={autoSyncEnabled}
              onValueChange={setAutoSyncEnabled}
              thumbColor={autoSyncEnabled ? '#4CAF50' : '#888'}
              trackColor={{ false: '#333', true: '#4CAF5050' }}
            />
          </View>
        </View>

        {/* Downloaded Regions */}
        <View style={styles.sectionCard}>
          <Text style={styles.sectionTitle}>üìç –°–∫–∞—á–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã</Text>
          
          {downloadedRegions.length === 0 ? (
            <Text style={styles.emptyText}>–ù–µ—Ç —Å–∫–∞—á–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤</Text>
          ) : (
            downloadedRegions.map((region) => (
              <View key={region.code} style={styles.regionItem}>
                <View style={styles.regionInfo}>
                  <Text style={styles.regionName}>{region.name}</Text>
                  <Text style={styles.regionStats}>
                    {region.warningCount} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π ‚Ä¢ {formatLastSync(region.lastSync)}
                  </Text>
                </View>
                <TouchableOpacity style={styles.regionAction}>
                  <Ionicons name="checkmark-circle" size={24} color="#4CAF50" />
                </TouchableOpacity>
              </View>
            ))
          )}
        </View>

        {/* Available Regions */}
        <View style={styles.sectionCard}>
          <Text style={styles.sectionTitle}>üåç –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã</Text>
          
          {!syncStatus?.isOnline && (
            <Text style={styles.offlineNote}>
              –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤
            </Text>
          )}
          
          {availableRegions.length === 0 && syncStatus?.isOnline ? (
            <Text style={styles.emptyText}>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤</Text>
          ) : (
            availableRegions
              .filter(region => !downloadedRegions.find(d => d.code === region.code))
              .map((region) => (
                <View key={region.code} style={styles.regionItem}>
                  <View style={styles.regionInfo}>
                    <Text style={styles.regionName}>{region.name}</Text>
                    <Text style={styles.regionStats}>{region.country}</Text>
                  </View>
                  <TouchableOpacity 
                    style={styles.downloadButton}
                    onPress={() => handleDownloadRegion(region)}
                    disabled={downloadingRegion === region.code || !syncStatus?.isOnline}
                  >
                    {downloadingRegion === region.code ? (
                      <ActivityIndicator size="small" color="#4CAF50" />
                    ) : (
                      <Ionicons 
                        name="cloud-download" 
                        size={24} 
                        color={syncStatus?.isOnline ? "#4CAF50" : "#666"} 
                      />
                    )}
                  </TouchableOpacity>
                </View>
              ))
          )}
        </View>

        {/* Storage Management */}
        <View style={styles.sectionCard}>
          <Text style={styles.sectionTitle}>üóÑÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º</Text>
          
          <TouchableOpacity 
            style={styles.actionButton}
            onPress={() => {
              Alert.alert(
                '–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
                '–£–¥–∞–ª–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π?',
                [
                  { text: '–û—Ç–º–µ–Ω–∞', style: 'cancel' },
                  { text: '–û—á–∏—Å—Ç–∏—Ç—å', style: 'destructive', onPress: () => {
                    // Implement cleanup
                    Alert.alert('–ó–∞–≤–µ—Ä—à–µ–Ω–æ', '–°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã');
                  }}
                ]
              );
            }}
          >
            <Ionicons name="trash-outline" size={20} color="#FF9800" />
            <Text style={styles.actionButtonText}>–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ</Text>
          </TouchableOpacity>
          
          <TouchableOpacity 
            style={[styles.actionButton, { borderColor: '#F44336' }]}
            onPress={() => {
              Alert.alert(
                '–°–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
                '–£–¥–∞–ª–∏—Ç—å –í–°–ï –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!',
                [
                  { text: '–û—Ç–º–µ–Ω–∞', style: 'cancel' },
                  { text: '–°–±—Ä–æ—Å–∏—Ç—å', style: 'destructive', onPress: () => {
                    // Implement full reset
                    Alert.alert('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–±—Ä–æ—à–µ–Ω–∞', '–í—Å–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã');
                  }}
                ]
              );
            }}
          >
            <Ionicons name="warning" size={20} color="#F44336" />
            <Text style={[styles.actionButtonText, { color: '#F44336' }]}>
              –°–±—Ä–æ—Å–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            </Text>
          </TouchableOpacity>
        </View>

        <View style={styles.bottomPadding} />
      </ScrollView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#1a1a1a',
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 16,
    paddingVertical: 12,
    backgroundColor: '#2a2a2a',
    borderBottomWidth: 1,
    borderBottomColor: '#333',
  },
  headerTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#ffffff',
  },
  content: {
    flex: 1,
    padding: 16,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  loadingText: {
    fontSize: 16,
    color: '#888',
    marginTop: 12,
  },
  statusCard: {
    backgroundColor: '#2a2a2a',
    borderRadius: 12,
    padding: 16,
    marginBottom: 16,
    borderWidth: 1,
    borderColor: '#333',
  },
  statusRow: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  statusInfo: {
    flex: 1,
    marginLeft: 12,
  },
  statusTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#ffffff',
  },
  statusSubtitle: {
    fontSize: 14,
    color: '#888',
    marginTop: 2,
  },
  sectionCard: {
    backgroundColor: '#2a2a2a',
    borderRadius: 12,
    padding: 16,
    marginBottom: 16,
  },
  sectionTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#ffffff',
    marginBottom: 12,
  },
  statGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'space-between',
  },
  statItem: {
    width: '48%',
    backgroundColor: '#333',
    borderRadius: 8,
    padding: 12,
    marginBottom: 8,
    alignItems: 'center',
  },
  statValue: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#4CAF50',
    marginBottom: 4,
  },
  statLabel: {
    fontSize: 12,
    color: '#888',
    textAlign: 'center',
  },
  settingRow: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
  },
  settingInfo: {
    flex: 1,
  },
  settingTitle: {
    fontSize: 16,
    fontWeight: '500',
    color: '#ffffff',
  },
  settingSubtitle: {
    fontSize: 14,
    color: '#888',
    marginTop: 2,
  },
  regionItem: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 12,
    borderBottomWidth: 1,
    borderBottomColor: '#333',
  },
  regionInfo: {
    flex: 1,
  },
  regionName: {
    fontSize: 16,
    fontWeight: '500',
    color: '#ffffff',
  },
  regionStats: {
    fontSize: 14,
    color: '#888',
    marginTop: 2,
  },
  regionAction: {
    padding: 8,
  },
  downloadButton: {
    padding: 8,
  },
  actionButton: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 12,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: '#FF9800',
    marginBottom: 8,
  },
  actionButtonText: {
    fontSize: 14,
    fontWeight: '500',
    color: '#FF9800',
    marginLeft: 8,
  },
  emptyText: {
    fontSize: 14,
    color: '#666',
    textAlign: 'center',
    padding: 20,
  },
  offlineNote: {
    fontSize: 14,
    color: '#FF9800',
    textAlign: 'center',
    padding: 16,
    backgroundColor: '#FF980020',
    borderRadius: 8,
    marginBottom: 12,
  },
  bottomPadding: {
    height: 20,
  },
});