__d(function(g,_r,i,a,m,_e,_d){"use strict";Object.defineProperty(_e,'__esModule',{value:!0}),Object.defineProperty(_e,"localDB",{enumerable:!0,get:function(){return r}});var n,e=(function(n){if(n&&n.__esModule)return n;var e={};return n&&Object.keys(n).forEach(function(t){var s=Object.getOwnPropertyDescriptor(n,t);Object.defineProperty(e,t,s.get?s:{enumerable:!0,get:function(){return n[t]}})}),e.default=n,e})(_r(_d[0])),t=_r(_d[1]),s=(n=t)&&n.__esModule?n:{default:n};_r(_d[2]);const r=new class{db=null;syncInProgress=!1;async initialize(){console.warn('\u26a0\ufe0f SQLite not available on this platform - database features disabled')}async createTables(){if(!this.db)throw new Error('Database not initialized');await this.db.execAsync("\n      CREATE TABLE IF NOT EXISTS sensor_data (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        server_id TEXT,\n        latitude REAL NOT NULL,\n        longitude REAL NOT NULL,\n        timestamp TEXT NOT NULL,\n        speed REAL DEFAULT 0,\n        accuracy REAL DEFAULT 0,\n        accelerometer_x REAL DEFAULT 0,\n        accelerometer_y REAL DEFAULT 0,\n        accelerometer_z REAL DEFAULT 0,\n        road_quality REAL DEFAULT 50,\n        is_synced INTEGER DEFAULT 0,\n        created_at TEXT NOT NULL\n      );\n    "),await this.db.execAsync("\n      CREATE TABLE IF NOT EXISTS warnings (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        server_id TEXT UNIQUE,\n        latitude REAL NOT NULL,\n        longitude REAL NOT NULL,\n        hazard_type TEXT NOT NULL,\n        severity TEXT NOT NULL,\n        description TEXT,\n        is_verified INTEGER DEFAULT 0,\n        region TEXT,\n        city TEXT,\n        country TEXT,\n        last_updated TEXT NOT NULL\n      );\n    "),await this.db.execAsync("\n      CREATE TABLE IF NOT EXISTS sync_regions (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        region_code TEXT UNIQUE,\n        region_name TEXT,\n        last_sync TEXT,\n        warning_count INTEGER DEFAULT 0\n      );\n    "),await this.db.execAsync("\n      CREATE INDEX IF NOT EXISTS idx_sensor_location \n      ON sensor_data(latitude, longitude);\n    "),await this.db.execAsync("\n      CREATE INDEX IF NOT EXISTS idx_warnings_location \n      ON warnings(latitude, longitude);\n    "),console.log('\u2705 Database tables created')}async saveSensorData(n){return this.db,console.warn('Database not available - sensor data not stored locally'),-1}async getUnsyncedSensorData(){return this.db,console.warn('Database not available - returning empty unsynced data'),[]}async markSensorDataSynced(n,e){return this.db,this.db,void console.warn('Database not available - sensor data sync status not updated')}async saveWarnings(n){return this.db,this.db,void console.warn('Database not available - warnings not saved locally')}async getNearbyWarnings(n,e,t=1){return this.db,console.warn('Database not available - returning empty warnings'),[]}async updateRegionSyncStatus(n,e,t){return this.db,void console.warn('Database not available - region sync status not updated')}async getDownloadedRegions(){return this.db,console.warn('Database not available - returning empty regions'),[]}async getSyncStatus(){const n=await s.default.getItem('last_sync_time')||'Never',t=await this.getDownloadedRegions(),r=await this.getUnsyncedSensorData(),o=await e.getNetworkStateAsync();return{lastSyncTime:n,pendingSensorData:r.length,downloadedRegions:t.map(n=>n.name),isOnline:o.isConnected||!1}}async cleanupOldData(n=30){if(!this.db)return;const e=new Date;e.setDate(e.getDate()-n);const t=e.toISOString(),s=await this.db.runAsync("\n      DELETE FROM sensor_data \n      WHERE is_synced = 1 AND created_at < ?\n    ",[t]),r=await this.db.runAsync("\n      DELETE FROM warnings \n      WHERE is_verified = 0 AND last_updated < ?\n    ",[t]);console.log(`\ud83e\uddf9 Cleanup: removed ${s.changes} old sensor records, ${r.changes} old warnings`)}async getDatabaseStats(){return this.db,console.warn('Database not available - returning null stats'),null}}},780,[781,749,128]);
__d(function(g,r,i,a,m,_e,d){"use strict";Object.defineProperty(_e,'__esModule',{value:!0}),Object.defineProperty(_e,"NetworkStateType",{enumerable:!0,get:function(){return u.NetworkStateType}}),_e.getNetworkStateAsync=l,_e.getIpAddressAsync=async function(){if(!s.default.getIpAddressAsync)throw new t.UnavailabilityError('expo-network','getIpAddressAsync');return await s.default.getIpAddressAsync()},_e.isAirplaneModeEnabledAsync=async function(){if(!s.default.isAirplaneModeEnabledAsync)throw new t.UnavailabilityError('expo-network','isAirplaneModeEnabledAsync');return await s.default.isAirplaneModeEnabledAsync()},_e.addNetworkStateListener=f,_e.useNetworkState=function(){const[e,t]=(0,n.useState)({});return(0,n.useEffect)(()=>{l().then(t);const e=f(e=>t(e));return()=>e.remove()},[]),e};var e,t=r(d[0]),n=r(d[1]),o=r(d[2]),s=(e=o)&&e.__esModule?e:{default:e},u=r(d[3]);const c='onNetworkStateChanged';async function l(){if(!s.default.getNetworkStateAsync)throw new t.UnavailabilityError('expo-network','getNetworkStateAsync');return await s.default.getNetworkStateAsync()}function f(e){return s.default.addListener(c,e)}},781,[145,20,782,783]);
__d(function(g,r,i,a,m,_e,d){"use strict";Object.defineProperty(_e,'__esModule',{value:!0}),Object.defineProperty(_e,"default",{enumerable:!0,get:function(){return o}});var e=r(d[0]),t=r(d[1]);function n(){const e='undefined'!=typeof navigator&&navigator.onLine;return{type:e?t.NetworkStateType.UNKNOWN:t.NetworkStateType.NONE,isConnected:e,isInternetReachable:e}}class s extends e.NativeModule{updateNetworkState(){const e=n();this.emit("onNetworkStateChanged",e)}async getIpAddressAsync(){try{const e=await fetch('https://api.ipify.org?format=json');return(await e.json()).ip}catch(e){throw e}}async getNetworkStateAsync(){return n()}async isAirplaneModeEnabledAsync(){return!1}startObserving(){this.eventListener=()=>this.updateNetworkState(),window.addEventListener('online',this.eventListener),window.addEventListener('offline',this.eventListener)}stopObserving(){this.eventListener&&(window.removeEventListener('online',this.eventListener),window.removeEventListener('offline',this.eventListener))}}var o=(0,e.registerWebModule)(s,'ExpoNetwork')},782,[145,783]);
__d(function(g,r,i,a,m,e,d){"use strict";var N;Object.defineProperty(e,'__esModule',{value:!0}),Object.defineProperty(e,"NetworkStateType",{enumerable:!0,get:function(){return N}}),(function(N){N.NONE="NONE",N.UNKNOWN="UNKNOWN",N.CELLULAR="CELLULAR",N.WIFI="WIFI",N.BLUETOOTH="BLUETOOTH",N.ETHERNET="ETHERNET",N.WIMAX="WIMAX",N.VPN="VPN",N.OTHER="OTHER"})(N||(N={}))},783,[]);