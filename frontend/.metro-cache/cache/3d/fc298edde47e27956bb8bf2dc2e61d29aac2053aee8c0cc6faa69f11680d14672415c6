{"dependencies":[{"name":"expo/virtual/env","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"dgHc21cgR+buKc7O3/dChhD5JJk=","exportNames":["*"],"imports":1}},{"name":"expo-network","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":40,"index":40}}],"key":"1uj8I4G/JNBf3YRANaksFTH4dPs=","exportNames":["*"],"imports":1}},{"name":"@react-native-async-storage/async-storage","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":41},"end":{"line":2,"column":69,"index":110}}],"key":"0kSRlooyBOaYM9tlTtK91nq+uds=","exportNames":["*"],"imports":1}},{"name":"./LocalDatabase","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":111},"end":{"line":3,"column":85,"index":196}}],"key":"4OHGfS3RYJ9C2KSqX1/pnZT0rg0=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopNamespace(e) {\n    if (e && e.__esModule) return e;\n    var n = {};\n    if (e) Object.keys(e).forEach(function (k) {\n      var d = Object.getOwnPropertyDescriptor(e, k);\n      Object.defineProperty(n, k, d.get ? d : {\n        enumerable: true,\n        get: function () {\n          return e[k];\n        }\n      });\n    });\n    n.default = e;\n    return n;\n  }\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"SyncService\", {\n    enumerable: true,\n    get: function () {\n      return SyncService;\n    }\n  });\n  Object.defineProperty(exports, \"syncService\", {\n    enumerable: true,\n    get: function () {\n      return syncService;\n    }\n  });\n  var _expoVirtualEnv = require(_dependencyMap[0], \"expo/virtual/env\");\n  var _expoNetwork = require(_dependencyMap[1], \"expo-network\");\n  var Network = _interopNamespace(_expoNetwork);\n  var _reactNativeAsyncStorageAsyncStorage = require(_dependencyMap[2], \"@react-native-async-storage/async-storage\");\n  var AsyncStorage = _interopDefault(_reactNativeAsyncStorageAsyncStorage);\n  var _LocalDatabase = require(_dependencyMap[3], \"./LocalDatabase\");\n  class SyncService {\n    syncInterval = null;\n    isInitialized = false;\n    constructor() {\n      this.backendUrl = _expoVirtualEnv.env.EXPO_PUBLIC_BACKEND_URL || '/';\n    }\n    async initialize() {\n      if (this.isInitialized) return;\n      try {\n        await _LocalDatabase.localDB.initialize();\n        this.startPeriodicSync();\n        this.isInitialized = true;\n        console.log('‚úÖ Sync service initialized');\n      } catch (error) {\n        console.error('‚ùå Sync service initialization error:', error);\n        throw error;\n      }\n    }\n\n    // === AUTOMATIC SYNC ===\n    startPeriodicSync() {\n      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ –∫–æ–≥–¥–∞ –µ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç\n      this.syncInterval = setInterval(async () => {\n        const networkState = await Network.getNetworkStateAsync();\n        if (networkState.isConnected) {\n          await this.syncWithServer();\n        }\n      }, 30000);\n    }\n    async stopPeriodicSync() {\n      if (this.syncInterval) {\n        clearInterval(this.syncInterval);\n        this.syncInterval = null;\n      }\n    }\n\n    // === MAIN SYNC FUNCTION ===\n    async syncWithServer() {\n      try {\n        const networkState = await Network.getNetworkStateAsync();\n        if (!networkState.isConnected) {\n          console.log('üì° No internet connection - sync skipped');\n          return false;\n        }\n        console.log('üîÑ Starting sync with server...');\n\n        // 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä\n        await this.uploadSensorData();\n\n        // 2. –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è\n        await this.downloadUpdatedWarnings();\n\n        // 3. –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏\n        await AsyncStorage.default.setItem('last_sync_time', new Date().toISOString());\n\n        // 4. –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ\n        await _LocalDatabase.localDB.cleanupOldData(30);\n        console.log('‚úÖ Sync completed successfully');\n        return true;\n      } catch (error) {\n        console.error('‚ùå Sync error:', error);\n        return false;\n      }\n    }\n\n    // === UPLOAD SENSOR DATA ===\n    async uploadSensorData() {\n      const unsyncedData = await _LocalDatabase.localDB.getUnsyncedSensorData();\n      if (unsyncedData.length === 0) {\n        console.log('üì§ No unsynced sensor data to upload');\n        return;\n      }\n      console.log(`üì§ Uploading ${unsyncedData.length} sensor data records...`);\n      try {\n        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—á–∫–∞–º–∏ –ø–æ 50 –∑–∞–ø–∏—Å–µ–π\n        const batchSize = 50;\n        for (let i = 0; i < unsyncedData.length; i += batchSize) {\n          const batch = unsyncedData.slice(i, i + batchSize);\n          const response = await fetch(`${this.backendUrl}api/sensor-data/batch`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              data: batch.map(item => ({\n                latitude: item.latitude,\n                longitude: item.longitude,\n                timestamp: item.timestamp,\n                speed: item.speed,\n                accuracy: item.accuracy,\n                accelerometer: item.accelerometer,\n                road_quality_score: item.roadQuality\n              }))\n            })\n          });\n          if (response.ok) {\n            const result = await response.json();\n            const localIds = batch.map(item => item.id);\n            const serverIds = result.inserted_ids || [];\n\n            // –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ\n            await _LocalDatabase.localDB.markSensorDataSynced(localIds, serverIds);\n            console.log(`‚úÖ Uploaded batch ${Math.floor(i / batchSize) + 1}/${Math.ceil(unsyncedData.length / batchSize)}`);\n          } else {\n            console.error(`‚ùå Failed to upload batch: ${response.status}`);\n          }\n        }\n      } catch (error) {\n        console.error('‚ùå Upload sensor data error:', error);\n      }\n    }\n\n    // === DOWNLOAD WARNINGS ===\n    async downloadUpdatedWarnings() {\n      try {\n        const downloadedRegions = await _LocalDatabase.localDB.getDownloadedRegions();\n        for (const region of downloadedRegions) {\n          const response = await fetch(`${this.backendUrl}api/warnings/region/${region.code}?since=${region.lastSync}`);\n          if (response.ok) {\n            const warnings = await response.json();\n            if (warnings.length > 0) {\n              const localWarnings = warnings.map(w => ({\n                serverId: w._id,\n                latitude: w.latitude,\n                longitude: w.longitude,\n                hazardType: w.hazard_type,\n                severity: w.severity,\n                description: w.description,\n                isVerified: w.is_verified,\n                region: region.code,\n                city: w.city || '',\n                country: w.country || '',\n                lastUpdated: w.updated_at || new Date().toISOString()\n              }));\n              await _LocalDatabase.localDB.saveWarnings(localWarnings);\n              await _LocalDatabase.localDB.updateRegionSyncStatus(region.code, region.name, warnings.length);\n              console.log(`üì• Downloaded ${warnings.length} warnings for ${region.name}`);\n            }\n          }\n        }\n      } catch (error) {\n        console.error('‚ùå Download warnings error:', error);\n      }\n    }\n\n    // === REGION MANAGEMENT ===\n    async downloadRegionData(regionCode, regionName, bounds) {\n      try {\n        const networkState = await Network.getNetworkStateAsync();\n        if (!networkState.isConnected) {\n          throw new Error('No internet connection');\n        }\n        console.log(`üì• Downloading data for region: ${regionName}...`);\n        const response = await fetch(`${this.backendUrl}api/warnings/region/${regionCode}/full?` + `north=${bounds.north}&south=${bounds.south}&east=${bounds.east}&west=${bounds.west}`);\n        if (!response.ok) {\n          throw new Error(`Failed to download region data: ${response.status}`);\n        }\n        const warnings = await response.json();\n        const localWarnings = warnings.map(w => ({\n          serverId: w._id,\n          latitude: w.latitude,\n          longitude: w.longitude,\n          hazardType: w.hazard_type,\n          severity: w.severity,\n          description: w.description,\n          isVerified: w.is_verified,\n          region: regionCode,\n          city: w.city || '',\n          country: w.country || '',\n          lastUpdated: w.updated_at || new Date().toISOString()\n        }));\n        await _LocalDatabase.localDB.saveWarnings(localWarnings);\n        await _LocalDatabase.localDB.updateRegionSyncStatus(regionCode, regionName, warnings.length);\n        console.log(`‚úÖ Downloaded ${warnings.length} warnings for ${regionName}`);\n        return true;\n      } catch (error) {\n        console.error(`‚ùå Failed to download region ${regionName}:`, error);\n        return false;\n      }\n    }\n    async getAvailableRegions() {\n      try {\n        const networkState = await Network.getNetworkStateAsync();\n        if (!networkState.isConnected) {\n          return [];\n        }\n        const response = await fetch(`${this.backendUrl}api/regions/available`);\n        if (!response.ok) return [];\n        return await response.json();\n      } catch (error) {\n        console.error('‚ùå Failed to get available regions:', error);\n        return [];\n      }\n    }\n\n    // === OFFLINE DATA ACCESS ===\n    async saveOfflineSensorData(latitude, longitude, speed, accuracy, accelerometer, roadQuality) {\n      const sensorData = {\n        latitude,\n        longitude,\n        timestamp: new Date().toISOString(),\n        speed,\n        accuracy,\n        accelerometer,\n        roadQuality,\n        isSynced: false\n      };\n      return await _LocalDatabase.localDB.saveSensorData(sensorData);\n    }\n    async getNearbyWarningsOffline(latitude, longitude, radiusKm = 1) {\n      return await _LocalDatabase.localDB.getNearbyWarnings(latitude, longitude, radiusKm);\n    }\n\n    // === STATUS METHODS ===\n    async getSyncStatus() {\n      return await _LocalDatabase.localDB.getSyncStatus();\n    }\n    async getDatabaseStats() {\n      return await _LocalDatabase.localDB.getDatabaseStats();\n    }\n    async forceFullSync() {\n      console.log('üîÑ Forcing full sync...');\n      return await this.syncWithServer();\n    }\n\n    // === MANUAL CONTROL ===\n    async clearLocalData() {\n      // –≠—Ç–æ –¥–ª—è debug/reset —Ñ—É–Ω–∫—Ü–∏–∏\n      console.log('üóëÔ∏è Clearing all local data...');\n      // Implement database clearing if needed\n    }\n  }\n  const syncService = new SyncService();\n});","lineCount":278,"map":[[27,2,17,0,"Object"],[27,8,17,0],[27,9,17,0,"defineProperty"],[27,23,17,0],[27,24,17,0,"exports"],[27,31,17,0],[28,4,17,0,"enumerable"],[28,14,17,0],[29,4,17,0,"get"],[29,7,17,0],[29,18,17,0,"get"],[29,19,17,0],[30,6,17,0],[30,13,17,0,"SyncService"],[30,24,17,0],[31,4,17,0],[32,2,17,0],[33,2,302,0,"Object"],[33,8,302,0],[33,9,302,0,"defineProperty"],[33,23,302,0],[33,24,302,0,"exports"],[33,31,302,0],[34,4,302,0,"enumerable"],[34,14,302,0],[35,4,302,0,"get"],[35,7,302,0],[35,18,302,0,"get"],[35,19,302,0],[36,6,302,0],[36,13,302,0,"syncService"],[36,24,302,0],[37,4,302,0],[38,2,302,0],[39,2,302,45],[39,6,302,45,"_expoVirtualEnv"],[39,21,302,45],[39,24,302,45,"require"],[39,31,302,45],[39,32,302,45,"_dependencyMap"],[39,46,302,45],[40,2,1,0],[40,6,1,0,"_expoNetwork"],[40,18,1,0],[40,21,1,0,"require"],[40,28,1,0],[40,29,1,0,"_dependencyMap"],[40,43,1,0],[41,2,1,0],[41,6,1,0,"Network"],[41,13,1,0],[41,16,1,0,"_interopNamespace"],[41,33,1,0],[41,34,1,0,"_expoNetwork"],[41,46,1,0],[42,2,2,0],[42,6,2,0,"_reactNativeAsyncStorageAsyncStorage"],[42,42,2,0],[42,45,2,0,"require"],[42,52,2,0],[42,53,2,0,"_dependencyMap"],[42,67,2,0],[43,2,2,0],[43,6,2,0,"AsyncStorage"],[43,18,2,0],[43,21,2,0,"_interopDefault"],[43,36,2,0],[43,37,2,0,"_reactNativeAsyncStorageAsyncStorage"],[43,73,2,0],[44,2,3,0],[44,6,3,0,"_LocalDatabase"],[44,20,3,0],[44,23,3,0,"require"],[44,30,3,0],[44,31,3,0,"_dependencyMap"],[44,45,3,0],[45,2,17,7],[45,8,17,13,"SyncService"],[45,19,17,24],[45,20,17,25],[46,4,19,10,"syncInterval"],[46,16,19,22],[46,19,19,48],[46,23,19,52],[47,4,20,10,"isInitialized"],[47,17,20,23],[47,20,20,26],[47,25,20,31],[48,4,22,2,"constructor"],[48,15,22,13,"constructor"],[48,16,22,13],[48,18,22,16],[49,6,23,4],[49,10,23,8],[49,11,23,9,"backendUrl"],[49,21,23,19],[49,24,23,22,"_expoVirtualEnv"],[49,39,23,22],[49,40,23,22,"env"],[49,43,23,22],[49,44,23,22,"EXPO_PUBLIC_BACKEND_URL"],[49,67,23,22],[49,71,23,61],[49,74,23,64],[50,4,24,2],[51,4,26,2],[51,10,26,8,"initialize"],[51,20,26,18,"initialize"],[51,21,26,18],[51,23,26,21],[52,6,27,4],[52,10,27,8],[52,14,27,12],[52,15,27,13,"isInitialized"],[52,28,27,26],[52,30,27,28],[53,6,29,4],[53,10,29,8],[54,8,30,6],[54,14,30,12,"localDB"],[54,28,30,19],[54,29,30,19,"localDB"],[54,36,30,19],[54,37,30,20,"initialize"],[54,47,30,30],[54,48,30,31],[54,49,30,32],[55,8,31,6],[55,12,31,10],[55,13,31,11,"startPeriodicSync"],[55,30,31,28],[55,31,31,29],[55,32,31,30],[56,8,32,6],[56,12,32,10],[56,13,32,11,"isInitialized"],[56,26,32,24],[56,29,32,27],[56,33,32,31],[57,8,34,6,"console"],[57,15,34,13],[57,16,34,14,"log"],[57,19,34,17],[57,20,34,18],[57,48,34,46],[57,49,34,47],[58,6,35,4],[58,7,35,5],[58,8,35,6],[58,15,35,13,"error"],[58,20,35,18],[58,22,35,20],[59,8,36,6,"console"],[59,15,36,13],[59,16,36,14,"error"],[59,21,36,19],[59,22,36,20],[59,60,36,58],[59,62,36,60,"error"],[59,67,36,65],[59,68,36,66],[60,8,37,6],[60,14,37,12,"error"],[60,19,37,17],[61,6,38,4],[62,4,39,2],[64,4,41,2],[65,4,42,10,"startPeriodicSync"],[65,21,42,27,"startPeriodicSync"],[65,22,42,27],[65,24,42,30],[66,6,43,4],[67,6,44,4],[67,10,44,8],[67,11,44,9,"syncInterval"],[67,23,44,21],[67,26,44,24,"setInterval"],[67,37,44,35],[67,38,44,36],[67,50,44,48],[68,8,45,6],[68,14,45,12,"networkState"],[68,26,45,24],[68,29,45,27],[68,35,45,33,"Network"],[68,42,45,40],[68,43,45,41,"getNetworkStateAsync"],[68,63,45,61],[68,64,45,62],[68,65,45,63],[69,8,46,6],[69,12,46,10,"networkState"],[69,24,46,22],[69,25,46,23,"isConnected"],[69,36,46,34],[69,38,46,36],[70,10,47,8],[70,16,47,14],[70,20,47,18],[70,21,47,19,"syncWithServer"],[70,35,47,33],[70,36,47,34],[70,37,47,35],[71,8,48,6],[72,6,49,4],[72,7,49,5],[72,9,49,7],[72,14,49,12],[72,15,49,13],[73,4,50,2],[74,4,52,2],[74,10,52,8,"stopPeriodicSync"],[74,26,52,24,"stopPeriodicSync"],[74,27,52,24],[74,29,52,27],[75,6,53,4],[75,10,53,8],[75,14,53,12],[75,15,53,13,"syncInterval"],[75,27,53,25],[75,29,53,27],[76,8,54,6,"clearInterval"],[76,21,54,19],[76,22,54,20],[76,26,54,24],[76,27,54,25,"syncInterval"],[76,39,54,37],[76,40,54,38],[77,8,55,6],[77,12,55,10],[77,13,55,11,"syncInterval"],[77,25,55,23],[77,28,55,26],[77,32,55,30],[78,6,56,4],[79,4,57,2],[81,4,59,2],[82,4,60,2],[82,10,60,8,"syncWithServer"],[82,24,60,22,"syncWithServer"],[82,25,60,22],[82,27,60,43],[83,6,61,4],[83,10,61,8],[84,8,62,6],[84,14,62,12,"networkState"],[84,26,62,24],[84,29,62,27],[84,35,62,33,"Network"],[84,42,62,40],[84,43,62,41,"getNetworkStateAsync"],[84,63,62,61],[84,64,62,62],[84,65,62,63],[85,8,63,6],[85,12,63,10],[85,13,63,11,"networkState"],[85,25,63,23],[85,26,63,24,"isConnected"],[85,37,63,35],[85,39,63,37],[86,10,64,8,"console"],[86,17,64,15],[86,18,64,16,"log"],[86,21,64,19],[86,22,64,20],[86,64,64,62],[86,65,64,63],[87,10,65,8],[87,17,65,15],[87,22,65,20],[88,8,66,6],[89,8,68,6,"console"],[89,15,68,13],[89,16,68,14,"log"],[89,19,68,17],[89,20,68,18],[89,53,68,51],[89,54,68,52],[91,8,70,6],[92,8,71,6],[92,14,71,12],[92,18,71,16],[92,19,71,17,"uploadSensorData"],[92,35,71,33],[92,36,71,34],[92,37,71,35],[94,8,73,6],[95,8,74,6],[95,14,74,12],[95,18,74,16],[95,19,74,17,"downloadUpdatedWarnings"],[95,42,74,40],[95,43,74,41],[95,44,74,42],[97,8,76,6],[98,8,77,6],[98,14,77,12,"AsyncStorage"],[98,26,77,24],[98,27,77,24,"default"],[98,34,77,24],[98,35,77,25,"setItem"],[98,42,77,32],[98,43,77,33],[98,59,77,49],[98,61,77,51],[98,65,77,55,"Date"],[98,69,77,59],[98,70,77,60],[98,71,77,61],[98,72,77,62,"toISOString"],[98,83,77,73],[98,84,77,74],[98,85,77,75],[98,86,77,76],[100,8,79,6],[101,8,80,6],[101,14,80,12,"localDB"],[101,28,80,19],[101,29,80,19,"localDB"],[101,36,80,19],[101,37,80,20,"cleanupOldData"],[101,51,80,34],[101,52,80,35],[101,54,80,37],[101,55,80,38],[102,8,82,6,"console"],[102,15,82,13],[102,16,82,14,"log"],[102,19,82,17],[102,20,82,18],[102,51,82,49],[102,52,82,50],[103,8,83,6],[103,15,83,13],[103,19,83,17],[104,6,84,4],[104,7,84,5],[104,8,84,6],[104,15,84,13,"error"],[104,20,84,18],[104,22,84,20],[105,8,85,6,"console"],[105,15,85,13],[105,16,85,14,"error"],[105,21,85,19],[105,22,85,20],[105,37,85,35],[105,39,85,37,"error"],[105,44,85,42],[105,45,85,43],[106,8,86,6],[106,15,86,13],[106,20,86,18],[107,6,87,4],[108,4,88,2],[110,4,90,2],[111,4,91,2],[111,10,91,16,"uploadSensorData"],[111,26,91,32,"uploadSensorData"],[111,27,91,32],[111,29,91,35],[112,6,92,4],[112,12,92,10,"unsyncedData"],[112,24,92,22],[112,27,92,25],[112,33,92,31,"localDB"],[112,47,92,38],[112,48,92,38,"localDB"],[112,55,92,38],[112,56,92,39,"getUnsyncedSensorData"],[112,77,92,60],[112,78,92,61],[112,79,92,62],[113,6,93,4],[113,10,93,8,"unsyncedData"],[113,22,93,20],[113,23,93,21,"length"],[113,29,93,27],[113,34,93,32],[113,35,93,33],[113,37,93,35],[114,8,94,6,"console"],[114,15,94,13],[114,16,94,14,"log"],[114,19,94,17],[114,20,94,18],[114,58,94,56],[114,59,94,57],[115,8,95,6],[116,6,96,4],[117,6,98,4,"console"],[117,13,98,11],[117,14,98,12,"log"],[117,17,98,15],[117,18,98,16],[117,34,98,32,"unsyncedData"],[117,46,98,44],[117,47,98,45,"length"],[117,53,98,51],[117,78,98,76],[117,79,98,77],[118,6,100,4],[118,10,100,8],[119,8,101,6],[120,8,102,6],[120,14,102,12,"batchSize"],[120,23,102,21],[120,26,102,24],[120,28,102,26],[121,8,103,6],[121,13,103,11],[121,17,103,15,"i"],[121,18,103,16],[121,21,103,19],[121,22,103,20],[121,24,103,22,"i"],[121,25,103,23],[121,28,103,26,"unsyncedData"],[121,40,103,38],[121,41,103,39,"length"],[121,47,103,45],[121,49,103,47,"i"],[121,50,103,48],[121,54,103,52,"batchSize"],[121,63,103,61],[121,65,103,63],[122,10,104,8],[122,16,104,14,"batch"],[122,21,104,19],[122,24,104,22,"unsyncedData"],[122,36,104,34],[122,37,104,35,"slice"],[122,42,104,40],[122,43,104,41,"i"],[122,44,104,42],[122,46,104,44,"i"],[122,47,104,45],[122,50,104,48,"batchSize"],[122,59,104,57],[122,60,104,58],[123,10,106,8],[123,16,106,14,"response"],[123,24,106,22],[123,27,106,25],[123,33,106,31,"fetch"],[123,38,106,36],[123,39,106,37],[123,42,106,40],[123,46,106,44],[123,47,106,45,"backendUrl"],[123,57,106,55],[123,80,106,78],[123,82,106,80],[124,12,107,10,"method"],[124,18,107,16],[124,20,107,18],[124,26,107,24],[125,12,108,10,"headers"],[125,19,108,17],[125,21,108,19],[126,14,109,12],[126,28,109,26],[126,30,109,28],[127,12,110,10],[127,13,110,11],[128,12,111,10,"body"],[128,16,111,14],[128,18,111,16,"JSON"],[128,22,111,20],[128,23,111,21,"stringify"],[128,32,111,30],[128,33,111,31],[129,14,112,12,"data"],[129,18,112,16],[129,20,112,18,"batch"],[129,25,112,23],[129,26,112,24,"map"],[129,29,112,27],[129,30,112,28,"item"],[129,34,112,32],[129,39,112,37],[130,16,113,14,"latitude"],[130,24,113,22],[130,26,113,24,"item"],[130,30,113,28],[130,31,113,29,"latitude"],[130,39,113,37],[131,16,114,14,"longitude"],[131,25,114,23],[131,27,114,25,"item"],[131,31,114,29],[131,32,114,30,"longitude"],[131,41,114,39],[132,16,115,14,"timestamp"],[132,25,115,23],[132,27,115,25,"item"],[132,31,115,29],[132,32,115,30,"timestamp"],[132,41,115,39],[133,16,116,14,"speed"],[133,21,116,19],[133,23,116,21,"item"],[133,27,116,25],[133,28,116,26,"speed"],[133,33,116,31],[134,16,117,14,"accuracy"],[134,24,117,22],[134,26,117,24,"item"],[134,30,117,28],[134,31,117,29,"accuracy"],[134,39,117,37],[135,16,118,14,"accelerometer"],[135,29,118,27],[135,31,118,29,"item"],[135,35,118,33],[135,36,118,34,"accelerometer"],[135,49,118,47],[136,16,119,14,"road_quality_score"],[136,34,119,32],[136,36,119,34,"item"],[136,40,119,38],[136,41,119,39,"roadQuality"],[137,14,120,12],[137,15,120,13],[137,16,120,14],[138,12,121,10],[138,13,121,11],[139,10,122,8],[139,11,122,9],[139,12,122,10],[140,10,124,8],[140,14,124,12,"response"],[140,22,124,20],[140,23,124,21,"ok"],[140,25,124,23],[140,27,124,25],[141,12,125,10],[141,18,125,16,"result"],[141,24,125,22],[141,27,125,25],[141,33,125,31,"response"],[141,41,125,39],[141,42,125,40,"json"],[141,46,125,44],[141,47,125,45],[141,48,125,46],[142,12,126,10],[142,18,126,16,"localIds"],[142,26,126,24],[142,29,126,27,"batch"],[142,34,126,32],[142,35,126,33,"map"],[142,38,126,36],[142,39,126,37,"item"],[142,43,126,41],[142,47,126,45,"item"],[142,51,126,49],[142,52,126,50,"id"],[142,54,126,53],[142,55,126,54],[143,12,127,10],[143,18,127,16,"serverIds"],[143,27,127,25],[143,30,127,28,"result"],[143,36,127,34],[143,37,127,35,"inserted_ids"],[143,49,127,47],[143,53,127,51],[143,55,127,53],[145,12,129,10],[146,12,130,10],[146,18,130,16,"localDB"],[146,32,130,23],[146,33,130,23,"localDB"],[146,40,130,23],[146,41,130,24,"markSensorDataSynced"],[146,61,130,44],[146,62,130,45,"localIds"],[146,70,130,53],[146,72,130,55,"serverIds"],[146,81,130,64],[146,82,130,65],[147,12,132,10,"console"],[147,19,132,17],[147,20,132,18,"log"],[147,23,132,21],[147,24,132,22],[147,44,132,42,"Math"],[147,48,132,46],[147,49,132,47,"floor"],[147,54,132,52],[147,55,132,53,"i"],[147,56,132,54],[147,59,132,55,"batchSize"],[147,68,132,64],[147,69,132,65],[147,72,132,68],[147,73,132,69],[147,77,132,73,"Math"],[147,81,132,77],[147,82,132,78,"ceil"],[147,86,132,82],[147,87,132,83,"unsyncedData"],[147,99,132,95],[147,100,132,96,"length"],[147,106,132,102],[147,109,132,103,"batchSize"],[147,118,132,112],[147,119,132,113],[147,121,132,115],[147,122,132,116],[148,10,133,8],[148,11,133,9],[148,17,133,15],[149,12,134,10,"console"],[149,19,134,17],[149,20,134,18,"error"],[149,25,134,23],[149,26,134,24],[149,55,134,53,"response"],[149,63,134,61],[149,64,134,62,"status"],[149,70,134,68],[149,72,134,70],[149,73,134,71],[150,10,135,8],[151,8,136,6],[152,6,137,4],[152,7,137,5],[152,8,137,6],[152,15,137,13,"error"],[152,20,137,18],[152,22,137,20],[153,8,138,6,"console"],[153,15,138,13],[153,16,138,14,"error"],[153,21,138,19],[153,22,138,20],[153,51,138,49],[153,53,138,51,"error"],[153,58,138,56],[153,59,138,57],[154,6,139,4],[155,4,140,2],[157,4,142,2],[158,4,143,2],[158,10,143,16,"downloadUpdatedWarnings"],[158,33,143,39,"downloadUpdatedWarnings"],[158,34,143,39],[158,36,143,42],[159,6,144,4],[159,10,144,8],[160,8,145,6],[160,14,145,12,"downloadedRegions"],[160,31,145,29],[160,34,145,32],[160,40,145,38,"localDB"],[160,54,145,45],[160,55,145,45,"localDB"],[160,62,145,45],[160,63,145,46,"getDownloadedRegions"],[160,83,145,66],[160,84,145,67],[160,85,145,68],[161,8,147,6],[161,13,147,11],[161,19,147,17,"region"],[161,25,147,23],[161,29,147,27,"downloadedRegions"],[161,46,147,44],[161,48,147,46],[162,10,148,8],[162,16,148,14,"response"],[162,24,148,22],[162,27,148,25],[162,33,148,31,"fetch"],[162,38,148,36],[162,39,149,10],[162,42,149,13],[162,46,149,17],[162,47,149,18,"backendUrl"],[162,57,149,28],[162,80,149,51,"region"],[162,86,149,57],[162,87,149,58,"code"],[162,91,149,62],[162,101,149,72,"region"],[162,107,149,78],[162,108,149,79,"lastSync"],[162,116,149,87],[162,118,150,8],[162,119,150,9],[163,10,152,8],[163,14,152,12,"response"],[163,22,152,20],[163,23,152,21,"ok"],[163,25,152,23],[163,27,152,25],[164,12,153,10],[164,18,153,16,"warnings"],[164,26,153,24],[164,29,153,27],[164,35,153,33,"response"],[164,43,153,41],[164,44,153,42,"json"],[164,48,153,46],[164,49,153,47],[164,50,153,48],[165,12,155,10],[165,16,155,14,"warnings"],[165,24,155,22],[165,25,155,23,"length"],[165,31,155,29],[165,34,155,32],[165,35,155,33],[165,37,155,35],[166,14,156,12],[166,20,156,18,"localWarnings"],[166,33,156,47],[166,36,156,50,"warnings"],[166,44,156,58],[166,45,156,59,"map"],[166,48,156,62],[166,49,156,64,"w"],[166,50,156,70],[166,55,156,76],[167,16,157,14,"serverId"],[167,24,157,22],[167,26,157,24,"w"],[167,27,157,25],[167,28,157,26,"_id"],[167,31,157,29],[168,16,158,14,"latitude"],[168,24,158,22],[168,26,158,24,"w"],[168,27,158,25],[168,28,158,26,"latitude"],[168,36,158,34],[169,16,159,14,"longitude"],[169,25,159,23],[169,27,159,25,"w"],[169,28,159,26],[169,29,159,27,"longitude"],[169,38,159,36],[170,16,160,14,"hazardType"],[170,26,160,24],[170,28,160,26,"w"],[170,29,160,27],[170,30,160,28,"hazard_type"],[170,41,160,39],[171,16,161,14,"severity"],[171,24,161,22],[171,26,161,24,"w"],[171,27,161,25],[171,28,161,26,"severity"],[171,36,161,34],[172,16,162,14,"description"],[172,27,162,25],[172,29,162,27,"w"],[172,30,162,28],[172,31,162,29,"description"],[172,42,162,40],[173,16,163,14,"isVerified"],[173,26,163,24],[173,28,163,26,"w"],[173,29,163,27],[173,30,163,28,"is_verified"],[173,41,163,39],[174,16,164,14,"region"],[174,22,164,20],[174,24,164,22,"region"],[174,30,164,28],[174,31,164,29,"code"],[174,35,164,33],[175,16,165,14,"city"],[175,20,165,18],[175,22,165,20,"w"],[175,23,165,21],[175,24,165,22,"city"],[175,28,165,26],[175,32,165,30],[175,34,165,32],[176,16,166,14,"country"],[176,23,166,21],[176,25,166,23,"w"],[176,26,166,24],[176,27,166,25,"country"],[176,34,166,32],[176,38,166,36],[176,40,166,38],[177,16,167,14,"lastUpdated"],[177,27,167,25],[177,29,167,27,"w"],[177,30,167,28],[177,31,167,29,"updated_at"],[177,41,167,39],[177,45,167,43],[177,49,167,47,"Date"],[177,53,167,51],[177,54,167,52],[177,55,167,53],[177,56,167,54,"toISOString"],[177,67,167,65],[177,68,167,66],[178,14,168,12],[178,15,168,13],[178,16,168,14],[178,17,168,15],[179,14,170,12],[179,20,170,18,"localDB"],[179,34,170,25],[179,35,170,25,"localDB"],[179,42,170,25],[179,43,170,26,"saveWarnings"],[179,55,170,38],[179,56,170,39,"localWarnings"],[179,69,170,52],[179,70,170,53],[180,14,171,12],[180,20,171,18,"localDB"],[180,34,171,25],[180,35,171,25,"localDB"],[180,42,171,25],[180,43,171,26,"updateRegionSyncStatus"],[180,65,171,48],[180,66,172,14,"region"],[180,72,172,20],[180,73,172,21,"code"],[180,77,172,25],[180,79,173,14,"region"],[180,85,173,20],[180,86,173,21,"name"],[180,90,173,25],[180,92,174,14,"warnings"],[180,100,174,22],[180,101,174,23,"length"],[180,107,175,12],[180,108,175,13],[181,14,177,12,"console"],[181,21,177,19],[181,22,177,20,"log"],[181,25,177,23],[181,26,177,24],[181,43,177,41,"warnings"],[181,51,177,49],[181,52,177,50,"length"],[181,58,177,56],[181,75,177,73,"region"],[181,81,177,79],[181,82,177,80,"name"],[181,86,177,84],[181,88,177,86],[181,89,177,87],[182,12,178,10],[183,10,179,8],[184,8,180,6],[185,6,181,4],[185,7,181,5],[185,8,181,6],[185,15,181,13,"error"],[185,20,181,18],[185,22,181,20],[186,8,182,6,"console"],[186,15,182,13],[186,16,182,14,"error"],[186,21,182,19],[186,22,182,20],[186,50,182,48],[186,52,182,50,"error"],[186,57,182,55],[186,58,182,56],[187,6,183,4],[188,4,184,2],[190,4,186,2],[191,4,187,2],[191,10,187,8,"downloadRegionData"],[191,28,187,26,"downloadRegionData"],[191,29,187,27,"regionCode"],[191,39,187,45],[191,41,187,47,"regionName"],[191,51,187,65],[191,53,187,67,"bounds"],[191,59,187,95],[191,61,187,115],[192,6,188,4],[192,10,188,8],[193,8,189,6],[193,14,189,12,"networkState"],[193,26,189,24],[193,29,189,27],[193,35,189,33,"Network"],[193,42,189,40],[193,43,189,41,"getNetworkStateAsync"],[193,63,189,61],[193,64,189,62],[193,65,189,63],[194,8,190,6],[194,12,190,10],[194,13,190,11,"networkState"],[194,25,190,23],[194,26,190,24,"isConnected"],[194,37,190,35],[194,39,190,37],[195,10,191,8],[195,16,191,14],[195,20,191,18,"Error"],[195,25,191,23],[195,26,191,24],[195,50,191,48],[195,51,191,49],[196,8,192,6],[197,8,194,6,"console"],[197,15,194,13],[197,16,194,14,"log"],[197,19,194,17],[197,20,194,18],[197,55,194,53,"regionName"],[197,65,194,63],[197,70,194,68],[197,71,194,69],[198,8,196,6],[198,14,196,12,"response"],[198,22,196,20],[198,25,196,23],[198,31,196,29,"fetch"],[198,36,196,34],[198,37,197,8],[198,40,197,11],[198,44,197,15],[198,45,197,16,"backendUrl"],[198,55,197,26],[198,78,197,49,"regionCode"],[198,88,197,59],[198,96,197,67],[198,99,198,8],[198,108,198,17,"bounds"],[198,114,198,23],[198,115,198,24,"north"],[198,120,198,29],[198,130,198,39,"bounds"],[198,136,198,45],[198,137,198,46,"south"],[198,142,198,51],[198,151,198,60,"bounds"],[198,157,198,66],[198,158,198,67,"east"],[198,162,198,71],[198,171,198,80,"bounds"],[198,177,198,86],[198,178,198,87,"west"],[198,182,198,91],[198,184,199,6],[198,185,199,7],[199,8,201,6],[199,12,201,10],[199,13,201,11,"response"],[199,21,201,19],[199,22,201,20,"ok"],[199,24,201,22],[199,26,201,24],[200,10,202,8],[200,16,202,14],[200,20,202,18,"Error"],[200,25,202,23],[200,26,202,24],[200,61,202,59,"response"],[200,69,202,67],[200,70,202,68,"status"],[200,76,202,74],[200,78,202,76],[200,79,202,77],[201,8,203,6],[202,8,205,6],[202,14,205,12,"warnings"],[202,22,205,20],[202,25,205,23],[202,31,205,29,"response"],[202,39,205,37],[202,40,205,38,"json"],[202,44,205,42],[202,45,205,43],[202,46,205,44],[203,8,207,6],[203,14,207,12,"localWarnings"],[203,27,207,41],[203,30,207,44,"warnings"],[203,38,207,52],[203,39,207,53,"map"],[203,42,207,56],[203,43,207,58,"w"],[203,44,207,64],[203,49,207,70],[204,10,208,8,"serverId"],[204,18,208,16],[204,20,208,18,"w"],[204,21,208,19],[204,22,208,20,"_id"],[204,25,208,23],[205,10,209,8,"latitude"],[205,18,209,16],[205,20,209,18,"w"],[205,21,209,19],[205,22,209,20,"latitude"],[205,30,209,28],[206,10,210,8,"longitude"],[206,19,210,17],[206,21,210,19,"w"],[206,22,210,20],[206,23,210,21,"longitude"],[206,32,210,30],[207,10,211,8,"hazardType"],[207,20,211,18],[207,22,211,20,"w"],[207,23,211,21],[207,24,211,22,"hazard_type"],[207,35,211,33],[208,10,212,8,"severity"],[208,18,212,16],[208,20,212,18,"w"],[208,21,212,19],[208,22,212,20,"severity"],[208,30,212,28],[209,10,213,8,"description"],[209,21,213,19],[209,23,213,21,"w"],[209,24,213,22],[209,25,213,23,"description"],[209,36,213,34],[210,10,214,8,"isVerified"],[210,20,214,18],[210,22,214,20,"w"],[210,23,214,21],[210,24,214,22,"is_verified"],[210,35,214,33],[211,10,215,8,"region"],[211,16,215,14],[211,18,215,16,"regionCode"],[211,28,215,26],[212,10,216,8,"city"],[212,14,216,12],[212,16,216,14,"w"],[212,17,216,15],[212,18,216,16,"city"],[212,22,216,20],[212,26,216,24],[212,28,216,26],[213,10,217,8,"country"],[213,17,217,15],[213,19,217,17,"w"],[213,20,217,18],[213,21,217,19,"country"],[213,28,217,26],[213,32,217,30],[213,34,217,32],[214,10,218,8,"lastUpdated"],[214,21,218,19],[214,23,218,21,"w"],[214,24,218,22],[214,25,218,23,"updated_at"],[214,35,218,33],[214,39,218,37],[214,43,218,41,"Date"],[214,47,218,45],[214,48,218,46],[214,49,218,47],[214,50,218,48,"toISOString"],[214,61,218,59],[214,62,218,60],[215,8,219,6],[215,9,219,7],[215,10,219,8],[215,11,219,9],[216,8,221,6],[216,14,221,12,"localDB"],[216,28,221,19],[216,29,221,19,"localDB"],[216,36,221,19],[216,37,221,20,"saveWarnings"],[216,49,221,32],[216,50,221,33,"localWarnings"],[216,63,221,46],[216,64,221,47],[217,8,222,6],[217,14,222,12,"localDB"],[217,28,222,19],[217,29,222,19,"localDB"],[217,36,222,19],[217,37,222,20,"updateRegionSyncStatus"],[217,59,222,42],[217,60,222,43,"regionCode"],[217,70,222,53],[217,72,222,55,"regionName"],[217,82,222,65],[217,84,222,67,"warnings"],[217,92,222,75],[217,93,222,76,"length"],[217,99,222,82],[217,100,222,83],[218,8,224,6,"console"],[218,15,224,13],[218,16,224,14,"log"],[218,19,224,17],[218,20,224,18],[218,36,224,34,"warnings"],[218,44,224,42],[218,45,224,43,"length"],[218,51,224,49],[218,68,224,66,"regionName"],[218,78,224,76],[218,80,224,78],[218,81,224,79],[219,8,225,6],[219,15,225,13],[219,19,225,17],[220,6,226,4],[220,7,226,5],[220,8,226,6],[220,15,226,13,"error"],[220,20,226,18],[220,22,226,20],[221,8,227,6,"console"],[221,15,227,13],[221,16,227,14,"error"],[221,21,227,19],[221,22,227,20],[221,53,227,51,"regionName"],[221,63,227,61],[221,66,227,64],[221,68,227,66,"error"],[221,73,227,71],[221,74,227,72],[222,8,228,6],[222,15,228,13],[222,20,228,18],[223,6,229,4],[224,4,230,2],[225,4,232,2],[225,10,232,8,"getAvailableRegions"],[225,29,232,27,"getAvailableRegions"],[225,30,232,27],[225,32,232,53],[226,6,233,4],[226,10,233,8],[227,8,234,6],[227,14,234,12,"networkState"],[227,26,234,24],[227,29,234,27],[227,35,234,33,"Network"],[227,42,234,40],[227,43,234,41,"getNetworkStateAsync"],[227,63,234,61],[227,64,234,62],[227,65,234,63],[228,8,235,6],[228,12,235,10],[228,13,235,11,"networkState"],[228,25,235,23],[228,26,235,24,"isConnected"],[228,37,235,35],[228,39,235,37],[229,10,236,8],[229,17,236,15],[229,19,236,17],[230,8,237,6],[231,8,239,6],[231,14,239,12,"response"],[231,22,239,20],[231,25,239,23],[231,31,239,29,"fetch"],[231,36,239,34],[231,37,239,35],[231,40,239,38],[231,44,239,42],[231,45,239,43,"backendUrl"],[231,55,239,53],[231,78,239,76],[231,79,239,77],[232,8,240,6],[232,12,240,10],[232,13,240,11,"response"],[232,21,240,19],[232,22,240,20,"ok"],[232,24,240,22],[232,26,240,24],[232,33,240,31],[232,35,240,33],[233,8,242,6],[233,15,242,13],[233,21,242,19,"response"],[233,29,242,27],[233,30,242,28,"json"],[233,34,242,32],[233,35,242,33],[233,36,242,34],[234,6,243,4],[234,7,243,5],[234,8,243,6],[234,15,243,13,"error"],[234,20,243,18],[234,22,243,20],[235,8,244,6,"console"],[235,15,244,13],[235,16,244,14,"error"],[235,21,244,19],[235,22,244,20],[235,58,244,56],[235,60,244,58,"error"],[235,65,244,63],[235,66,244,64],[236,8,245,6],[236,15,245,13],[236,17,245,15],[237,6,246,4],[238,4,247,2],[240,4,249,2],[241,4,250,2],[241,10,250,8,"saveOfflineSensorData"],[241,31,250,29,"saveOfflineSensorData"],[241,32,251,4,"latitude"],[241,40,251,20],[241,42,252,4,"longitude"],[241,51,252,21],[241,53,253,4,"speed"],[241,58,253,17],[241,60,254,4,"accuracy"],[241,68,254,20],[241,70,255,4,"accelerometer"],[241,83,255,54],[241,85,256,4,"roadQuality"],[241,96,256,23],[241,98,257,21],[242,6,258,4],[242,12,258,10,"sensorData"],[242,22,258,63],[242,25,258,66],[243,8,259,6,"latitude"],[243,16,259,14],[244,8,260,6,"longitude"],[244,17,260,15],[245,8,261,6,"timestamp"],[245,17,261,15],[245,19,261,17],[245,23,261,21,"Date"],[245,27,261,25],[245,28,261,26],[245,29,261,27],[245,30,261,28,"toISOString"],[245,41,261,39],[245,42,261,40],[245,43,261,41],[246,8,262,6,"speed"],[246,13,262,11],[247,8,263,6,"accuracy"],[247,16,263,14],[248,8,264,6,"accelerometer"],[248,21,264,19],[249,8,265,6,"roadQuality"],[249,19,265,17],[250,8,266,6,"isSynced"],[250,16,266,14],[250,18,266,16],[251,6,267,4],[251,7,267,5],[252,6,269,4],[252,13,269,11],[252,19,269,17,"localDB"],[252,33,269,24],[252,34,269,24,"localDB"],[252,41,269,24],[252,42,269,25,"saveSensorData"],[252,56,269,39],[252,57,269,40,"sensorData"],[252,67,269,50],[252,68,269,51],[253,4,270,2],[254,4,272,2],[254,10,272,8,"getNearbyWarningsOffline"],[254,34,272,32,"getNearbyWarningsOffline"],[254,35,273,4,"latitude"],[254,43,273,20],[254,45,274,4,"longitude"],[254,54,274,21],[254,56,275,4,"radiusKm"],[254,64,275,20],[254,67,275,23],[254,68,275,24],[254,70,276,29],[255,6,277,4],[255,13,277,11],[255,19,277,17,"localDB"],[255,33,277,24],[255,34,277,24,"localDB"],[255,41,277,24],[255,42,277,25,"getNearbyWarnings"],[255,59,277,42],[255,60,277,43,"latitude"],[255,68,277,51],[255,70,277,53,"longitude"],[255,79,277,62],[255,81,277,64,"radiusKm"],[255,89,277,72],[255,90,277,73],[256,4,278,2],[258,4,280,2],[259,4,281,2],[259,10,281,8,"getSyncStatus"],[259,23,281,21,"getSyncStatus"],[259,24,281,21],[259,26,281,45],[260,6,282,4],[260,13,282,11],[260,19,282,17,"localDB"],[260,33,282,24],[260,34,282,24,"localDB"],[260,41,282,24],[260,42,282,25,"getSyncStatus"],[260,55,282,38],[260,56,282,39],[260,57,282,40],[261,4,283,2],[262,4,285,2],[262,10,285,8,"getDatabaseStats"],[262,26,285,24,"getDatabaseStats"],[262,27,285,24],[262,29,285,27],[263,6,286,4],[263,13,286,11],[263,19,286,17,"localDB"],[263,33,286,24],[263,34,286,24,"localDB"],[263,41,286,24],[263,42,286,25,"getDatabaseStats"],[263,58,286,41],[263,59,286,42],[263,60,286,43],[264,4,287,2],[265,4,289,2],[265,10,289,8,"forceFullSync"],[265,23,289,21,"forceFullSync"],[265,24,289,21],[265,26,289,42],[266,6,290,4,"console"],[266,13,290,11],[266,14,290,12,"log"],[266,17,290,15],[266,18,290,16],[266,43,290,41],[266,44,290,42],[267,6,291,4],[267,13,291,11],[267,19,291,17],[267,23,291,21],[267,24,291,22,"syncWithServer"],[267,38,291,36],[267,39,291,37],[267,40,291,38],[268,4,292,2],[270,4,294,2],[271,4,295,2],[271,10,295,8,"clearLocalData"],[271,24,295,22,"clearLocalData"],[271,25,295,22],[271,27,295,25],[272,6,296,4],[273,6,297,4,"console"],[273,13,297,11],[273,14,297,12,"log"],[273,17,297,15],[273,18,297,16],[273,50,297,48],[273,51,297,49],[274,6,298,4],[275,4,299,2],[276,2,300,0],[277,2,302,7],[277,8,302,13,"syncService"],[277,19,302,24],[277,22,302,27],[277,26,302,31,"SyncService"],[277,37,302,42],[277,38,302,43],[277,39,302,44],[278,0,302,45],[278,3]],"functionMap":{"names":["<global>","SyncService","constructor","initialize","startPeriodicSync","setInterval$argument_0","stopPeriodicSync","syncWithServer","uploadSensorData","batch.map$argument_0","downloadUpdatedWarnings","warnings.map$argument_0","downloadRegionData","getAvailableRegions","saveOfflineSensorData","getNearbyWarningsOffline","getSyncStatus","getDatabaseStats","forceFullSync","clearLocalData"],"mappings":"AAA;OCgB;ECK;GDE;EEE;GFa;EGG;oCCE;KDK;GHC;EKE;GLK;EMG;GN4B;EOG;4BCqB;cDQ;qCCM,gBD;GPc;ESG;+DCa;cDY;GTgB;EWG;yDDoB;QCY;GXW;EYE;GZe;EaG;GboB;EcE;GdM;EeG;GfE;EgBE;GhBE;EiBE;GjBG;EkBG;GlBI;CDC"},"hasCjsExports":false},"type":"js/module"}]}