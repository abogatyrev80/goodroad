{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  exports.normalizeParams = normalizeParams;\n  exports.composeRow = composeRow;\n  exports.composeRows = composeRows;\n  exports.normalizeStorageIndex = normalizeStorageIndex;\n  /**\n   * Normalize the bind params to data structure that can be passed to native module.\n   * The data structure is a tuple of [primitiveParams, blobParams, shouldPassAsArray].\n   * @hidden\n   */\n  function normalizeParams(...params) {\n    let bindParams = params.length > 1 ? params : params[0];\n    if (bindParams == null) {\n      bindParams = [];\n    }\n    if (typeof bindParams !== 'object' || bindParams instanceof ArrayBuffer || ArrayBuffer.isView(bindParams)) {\n      bindParams = [bindParams];\n    }\n    const shouldPassAsArray = Array.isArray(bindParams);\n    if (Array.isArray(bindParams)) {\n      bindParams = bindParams.reduce((acc, value, index) => {\n        acc[index] = value;\n        return acc;\n      }, {});\n    }\n    const primitiveParams = {};\n    const blobParams = {};\n    for (const key in bindParams) {\n      const value = bindParams[key];\n      if (value instanceof Uint8Array) {\n        blobParams[key] = value;\n      } else {\n        primitiveParams[key] = value;\n      }\n    }\n    return [primitiveParams, blobParams, shouldPassAsArray];\n  }\n  /**\n   * Compose `columnNames` and `columnValues` to an row object.\n   * @hidden\n   */\n  function composeRow(columnNames, columnValues) {\n    // TODO(cedric): make these types more generic and tighten the returned object type based on provided column names/values\n    const row = {};\n    if (columnNames.length !== columnValues.length) {\n      throw new Error(`Column names and values count mismatch. Names: ${columnNames.length}, Values: ${columnValues.length}`);\n    }\n    for (let i = 0; i < columnNames.length; i++) {\n      row[columnNames[i]] = columnValues[i];\n    }\n    return row;\n  }\n  /**\n   * Compose `columnNames` and `columnValuesList` to an array of row objects.\n   * @hidden\n   */\n  function composeRows(columnNames, columnValuesList) {\n    if (columnValuesList.length === 0) {\n      return [];\n    }\n    if (columnNames.length !== columnValuesList[0].length) {\n      // We only check the first row because SQLite returns the same column count for all rows.\n      throw new Error(`Column names and values count mismatch. Names: ${columnNames.length}, Values: ${columnValuesList[0].length}`);\n    }\n    const results = [];\n    for (const columnValues of columnValuesList) {\n      // TODO(cedric): make these types more generic and tighten the returned object type based on provided column names/values\n      const row = {};\n      for (let i = 0; i < columnNames.length; i++) {\n        row[columnNames[i]] = columnValues[i];\n      }\n      results.push(row);\n    }\n    return results;\n  }\n  /**\n   * Normalize the index for the Storage.getKeyByIndexSync and Storage.getKeyByIndexAsync methods.\n   * @returns The normalized index or `null` if the index is out of bounds.\n   * @hidden\n   */\n  function normalizeStorageIndex(index) {\n    const value = Math.floor(Number(index));\n    // Boundary checks\n    if (Object.is(value, -0)) {\n      return 0;\n    }\n    if (!Number.isSafeInteger(value)) {\n      // Chromium uses zero index when the index is out of bounds\n      return 0;\n    }\n    if (value < 0) {\n      return null;\n    }\n    return value;\n  }\n});","lineCount":101,"map":[[7,2,6,0,"exports"],[7,9,6,0],[7,10,6,0,"normalizeParams"],[7,25,6,0],[7,28,6,0,"normalizeParams"],[7,43,6,0],[8,2,40,0,"exports"],[8,9,40,0],[8,10,40,0,"composeRow"],[8,20,40,0],[8,23,40,0,"composeRow"],[8,33,40,0],[9,2,55,0,"exports"],[9,9,55,0],[9,10,55,0,"composeRows"],[9,21,55,0],[9,24,55,0,"composeRows"],[9,35,55,0],[10,2,79,0,"exports"],[10,9,79,0],[10,10,79,0,"normalizeStorageIndex"],[10,31,79,0],[10,34,79,0,"normalizeStorageIndex"],[10,55,79,0],[11,2,1,0],[12,0,2,0],[13,0,3,0],[14,0,4,0],[15,0,5,0],[16,2,6,7],[16,11,6,16,"normalizeParams"],[16,26,6,31,"normalizeParams"],[16,27,6,32],[16,30,6,35,"params"],[16,36,6,41],[16,38,6,43],[17,4,7,4],[17,8,7,8,"bindParams"],[17,18,7,18],[17,21,7,21,"params"],[17,27,7,27],[17,28,7,28,"length"],[17,34,7,34],[17,37,7,37],[17,38,7,38],[17,41,7,41,"params"],[17,47,7,47],[17,50,7,50,"params"],[17,56,7,56],[17,57,7,57],[17,58,7,58],[17,59,7,59],[18,4,8,4],[18,8,8,8,"bindParams"],[18,18,8,18],[18,22,8,22],[18,26,8,26],[18,28,8,28],[19,6,9,8,"bindParams"],[19,16,9,18],[19,19,9,21],[19,21,9,23],[20,4,10,4],[21,4,11,4],[21,8,11,8],[21,15,11,15,"bindParams"],[21,25,11,25],[21,30,11,30],[21,38,11,38],[21,42,12,8,"bindParams"],[21,52,12,18],[21,64,12,30,"ArrayBuffer"],[21,75,12,41],[21,79,13,8,"ArrayBuffer"],[21,90,13,19],[21,91,13,20,"isView"],[21,97,13,26],[21,98,13,27,"bindParams"],[21,108,13,37],[21,109,13,38],[21,111,13,40],[22,6,14,8,"bindParams"],[22,16,14,18],[22,19,14,21],[22,20,14,22,"bindParams"],[22,30,14,32],[22,31,14,33],[23,4,15,4],[24,4,16,4],[24,10,16,10,"shouldPassAsArray"],[24,27,16,27],[24,30,16,30,"Array"],[24,35,16,35],[24,36,16,36,"isArray"],[24,43,16,43],[24,44,16,44,"bindParams"],[24,54,16,54],[24,55,16,55],[25,4,17,4],[25,8,17,8,"Array"],[25,13,17,13],[25,14,17,14,"isArray"],[25,21,17,21],[25,22,17,22,"bindParams"],[25,32,17,32],[25,33,17,33],[25,35,17,35],[26,6,18,8,"bindParams"],[26,16,18,18],[26,19,18,21,"bindParams"],[26,29,18,31],[26,30,18,32,"reduce"],[26,36,18,38],[26,37,18,39],[26,38,18,40,"acc"],[26,41,18,43],[26,43,18,45,"value"],[26,48,18,50],[26,50,18,52,"index"],[26,55,18,57],[26,60,18,62],[27,8,19,12,"acc"],[27,11,19,15],[27,12,19,16,"index"],[27,17,19,21],[27,18,19,22],[27,21,19,25,"value"],[27,26,19,30],[28,8,20,12],[28,15,20,19,"acc"],[28,18,20,22],[29,6,21,8],[29,7,21,9],[29,9,21,11],[29,10,21,12],[29,11,21,13],[29,12,21,14],[30,4,22,4],[31,4,23,4],[31,10,23,10,"primitiveParams"],[31,25,23,25],[31,28,23,28],[31,29,23,29],[31,30,23,30],[32,4,24,4],[32,10,24,10,"blobParams"],[32,20,24,20],[32,23,24,23],[32,24,24,24],[32,25,24,25],[33,4,25,4],[33,9,25,9],[33,15,25,15,"key"],[33,18,25,18],[33,22,25,22,"bindParams"],[33,32,25,32],[33,34,25,34],[34,6,26,8],[34,12,26,14,"value"],[34,17,26,19],[34,20,26,22,"bindParams"],[34,30,26,32],[34,31,26,33,"key"],[34,34,26,36],[34,35,26,37],[35,6,27,8],[35,10,27,12,"value"],[35,15,27,17],[35,27,27,29,"Uint8Array"],[35,37,27,39],[35,39,27,41],[36,8,28,12,"blobParams"],[36,18,28,22],[36,19,28,23,"key"],[36,22,28,26],[36,23,28,27],[36,26,28,30,"value"],[36,31,28,35],[37,6,29,8],[37,7,29,9],[37,13,30,13],[38,8,31,12,"primitiveParams"],[38,23,31,27],[38,24,31,28,"key"],[38,27,31,31],[38,28,31,32],[38,31,31,35,"value"],[38,36,31,40],[39,6,32,8],[40,4,33,4],[41,4,34,4],[41,11,34,11],[41,12,34,12,"primitiveParams"],[41,27,34,27],[41,29,34,29,"blobParams"],[41,39,34,39],[41,41,34,41,"shouldPassAsArray"],[41,58,34,58],[41,59,34,59],[42,2,35,0],[43,2,36,0],[44,0,37,0],[45,0,38,0],[46,0,39,0],[47,2,40,7],[47,11,40,16,"composeRow"],[47,21,40,26,"composeRow"],[47,22,40,27,"columnNames"],[47,33,40,38],[47,35,40,40,"columnValues"],[47,47,40,52],[47,49,40,54],[48,4,41,4],[49,4,42,4],[49,10,42,10,"row"],[49,13,42,13],[49,16,42,16],[49,17,42,17],[49,18,42,18],[50,4,43,4],[50,8,43,8,"columnNames"],[50,19,43,19],[50,20,43,20,"length"],[50,26,43,26],[50,31,43,31,"columnValues"],[50,43,43,43],[50,44,43,44,"length"],[50,50,43,50],[50,52,43,52],[51,6,44,8],[51,12,44,14],[51,16,44,18,"Error"],[51,21,44,23],[51,22,44,24],[51,72,44,74,"columnNames"],[51,83,44,85],[51,84,44,86,"length"],[51,90,44,92],[51,103,44,105,"columnValues"],[51,115,44,117],[51,116,44,118,"length"],[51,122,44,124],[51,124,44,126],[51,125,44,127],[52,4,45,4],[53,4,46,4],[53,9,46,9],[53,13,46,13,"i"],[53,14,46,14],[53,17,46,17],[53,18,46,18],[53,20,46,20,"i"],[53,21,46,21],[53,24,46,24,"columnNames"],[53,35,46,35],[53,36,46,36,"length"],[53,42,46,42],[53,44,46,44,"i"],[53,45,46,45],[53,47,46,47],[53,49,46,49],[54,6,47,8,"row"],[54,9,47,11],[54,10,47,12,"columnNames"],[54,21,47,23],[54,22,47,24,"i"],[54,23,47,25],[54,24,47,26],[54,25,47,27],[54,28,47,30,"columnValues"],[54,40,47,42],[54,41,47,43,"i"],[54,42,47,44],[54,43,47,45],[55,4,48,4],[56,4,49,4],[56,11,49,11,"row"],[56,14,49,14],[57,2,50,0],[58,2,51,0],[59,0,52,0],[60,0,53,0],[61,0,54,0],[62,2,55,7],[62,11,55,16,"composeRows"],[62,22,55,27,"composeRows"],[62,23,55,28,"columnNames"],[62,34,55,39],[62,36,55,41,"columnValuesList"],[62,52,55,57],[62,54,55,59],[63,4,56,4],[63,8,56,8,"columnValuesList"],[63,24,56,24],[63,25,56,25,"length"],[63,31,56,31],[63,36,56,36],[63,37,56,37],[63,39,56,39],[64,6,57,8],[64,13,57,15],[64,15,57,17],[65,4,58,4],[66,4,59,4],[66,8,59,8,"columnNames"],[66,19,59,19],[66,20,59,20,"length"],[66,26,59,26],[66,31,59,31,"columnValuesList"],[66,47,59,47],[66,48,59,48],[66,49,59,49],[66,50,59,50],[66,51,59,51,"length"],[66,57,59,57],[66,59,59,59],[67,6,60,8],[68,6,61,8],[68,12,61,14],[68,16,61,18,"Error"],[68,21,61,23],[68,22,61,24],[68,72,61,74,"columnNames"],[68,83,61,85],[68,84,61,86,"length"],[68,90,61,92],[68,103,61,105,"columnValuesList"],[68,119,61,121],[68,120,61,122],[68,121,61,123],[68,122,61,124],[68,123,61,125,"length"],[68,129,61,131],[68,131,61,133],[68,132,61,134],[69,4,62,4],[70,4,63,4],[70,10,63,10,"results"],[70,17,63,17],[70,20,63,20],[70,22,63,22],[71,4,64,4],[71,9,64,9],[71,15,64,15,"columnValues"],[71,27,64,27],[71,31,64,31,"columnValuesList"],[71,47,64,47],[71,49,64,49],[72,6,65,8],[73,6,66,8],[73,12,66,14,"row"],[73,15,66,17],[73,18,66,20],[73,19,66,21],[73,20,66,22],[74,6,67,8],[74,11,67,13],[74,15,67,17,"i"],[74,16,67,18],[74,19,67,21],[74,20,67,22],[74,22,67,24,"i"],[74,23,67,25],[74,26,67,28,"columnNames"],[74,37,67,39],[74,38,67,40,"length"],[74,44,67,46],[74,46,67,48,"i"],[74,47,67,49],[74,49,67,51],[74,51,67,53],[75,8,68,12,"row"],[75,11,68,15],[75,12,68,16,"columnNames"],[75,23,68,27],[75,24,68,28,"i"],[75,25,68,29],[75,26,68,30],[75,27,68,31],[75,30,68,34,"columnValues"],[75,42,68,46],[75,43,68,47,"i"],[75,44,68,48],[75,45,68,49],[76,6,69,8],[77,6,70,8,"results"],[77,13,70,15],[77,14,70,16,"push"],[77,18,70,20],[77,19,70,21,"row"],[77,22,70,24],[77,23,70,25],[78,4,71,4],[79,4,72,4],[79,11,72,11,"results"],[79,18,72,18],[80,2,73,0],[81,2,74,0],[82,0,75,0],[83,0,76,0],[84,0,77,0],[85,0,78,0],[86,2,79,7],[86,11,79,16,"normalizeStorageIndex"],[86,32,79,37,"normalizeStorageIndex"],[86,33,79,38,"index"],[86,38,79,43],[86,40,79,45],[87,4,80,4],[87,10,80,10,"value"],[87,15,80,15],[87,18,80,18,"Math"],[87,22,80,22],[87,23,80,23,"floor"],[87,28,80,28],[87,29,80,29,"Number"],[87,35,80,35],[87,36,80,36,"index"],[87,41,80,41],[87,42,80,42],[87,43,80,43],[88,4,81,4],[89,4,82,4],[89,8,82,8,"Object"],[89,14,82,14],[89,15,82,15,"is"],[89,17,82,17],[89,18,82,18,"value"],[89,23,82,23],[89,25,82,25],[89,26,82,26],[89,27,82,27],[89,28,82,28],[89,30,82,30],[90,6,83,8],[90,13,83,15],[90,14,83,16],[91,4,84,4],[92,4,85,4],[92,8,85,8],[92,9,85,9,"Number"],[92,15,85,15],[92,16,85,16,"isSafeInteger"],[92,29,85,29],[92,30,85,30,"value"],[92,35,85,35],[92,36,85,36],[92,38,85,38],[93,6,86,8],[94,6,87,8],[94,13,87,15],[94,14,87,16],[95,4,88,4],[96,4,89,4],[96,8,89,8,"value"],[96,13,89,13],[96,16,89,16],[96,17,89,17],[96,19,89,19],[97,6,90,8],[97,13,90,15],[97,17,90,19],[98,4,91,4],[99,4,92,4],[99,11,92,11,"value"],[99,16,92,16],[100,2,93,0],[101,0,93,1],[101,3]],"functionMap":{"names":["<global>","normalizeParams","bindParams.reduce$argument_0","composeRow","composeRows","normalizeStorageIndex"],"mappings":"AAA;OCK;uCCY;SDG;CDc;OGK;CHU;OIK;CJkB;OKM;CLc"},"hasCjsExports":false},"type":"js/module"}]}