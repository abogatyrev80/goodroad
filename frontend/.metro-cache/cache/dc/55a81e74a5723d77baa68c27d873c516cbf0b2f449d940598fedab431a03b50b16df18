{"dependencies":[{"name":"expo-network","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":40,"index":40}}],"key":"1uj8I4G/JNBf3YRANaksFTH4dPs=","exportNames":["*"],"imports":1}},{"name":"@react-native-async-storage/async-storage","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":41},"end":{"line":2,"column":69,"index":110}}],"key":"0kSRlooyBOaYM9tlTtK91nq+uds=","exportNames":["*"],"imports":1}},{"name":"./LocalDatabase","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":111},"end":{"line":3,"column":85,"index":196}}],"key":"4OHGfS3RYJ9C2KSqX1/pnZT0rg0=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopNamespace(e) {\n    if (e && e.__esModule) return e;\n    var n = {};\n    if (e) Object.keys(e).forEach(function (k) {\n      var d = Object.getOwnPropertyDescriptor(e, k);\n      Object.defineProperty(n, k, d.get ? d : {\n        enumerable: true,\n        get: function () {\n          return e[k];\n        }\n      });\n    });\n    n.default = e;\n    return n;\n  }\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"SyncService\", {\n    enumerable: true,\n    get: function () {\n      return SyncService;\n    }\n  });\n  Object.defineProperty(exports, \"syncService\", {\n    enumerable: true,\n    get: function () {\n      return syncService;\n    }\n  });\n  var _expoNetwork = require(_dependencyMap[0], \"expo-network\");\n  var Network = _interopNamespace(_expoNetwork);\n  var _reactNativeAsyncStorageAsyncStorage = require(_dependencyMap[1], \"@react-native-async-storage/async-storage\");\n  var AsyncStorage = _interopDefault(_reactNativeAsyncStorageAsyncStorage);\n  var _LocalDatabase = require(_dependencyMap[2], \"./LocalDatabase\");\n  class SyncService {\n    syncInterval = null;\n    isInitialized = false;\n    constructor() {\n      this.backendUrl = process.env.EXPO_PUBLIC_BACKEND_URL || 'https://smoothroad.emergent.host/';\n      console.log('üîó SyncService backend URL:', this.backendUrl);\n    }\n    async initialize() {\n      if (this.isInitialized) return;\n      try {\n        await _LocalDatabase.localDB.initialize();\n\n        // Only start periodic sync if database is available\n        if (_LocalDatabase.localDB.getDatabaseStats) {\n          this.startPeriodicSync();\n        }\n        this.isInitialized = true;\n        console.log('‚úÖ Sync service initialized');\n      } catch (error) {\n        console.error('‚ùå Sync service initialization error:', error);\n        console.warn('‚ö†Ô∏è Sync service continuing without local database');\n        this.isInitialized = true; // Allow service to continue without local DB\n      }\n    }\n\n    // === AUTOMATIC SYNC ===\n    startPeriodicSync() {\n      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ –∫–æ–≥–¥–∞ –µ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç\n      this.syncInterval = setInterval(async () => {\n        const networkState = await Network.getNetworkStateAsync();\n        if (networkState.isConnected) {\n          await this.syncWithServer();\n        }\n      }, 30000);\n    }\n    async stopPeriodicSync() {\n      if (this.syncInterval) {\n        clearInterval(this.syncInterval);\n        this.syncInterval = null;\n      }\n    }\n\n    // === MAIN SYNC FUNCTION ===\n    async syncWithServer() {\n      try {\n        const networkState = await Network.getNetworkStateAsync();\n        if (!networkState.isConnected) {\n          console.log('üì° No internet connection - sync skipped');\n          return false;\n        }\n        console.log('üîÑ Starting sync with server...');\n\n        // 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä\n        await this.uploadSensorData();\n\n        // 2. –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è\n        await this.downloadUpdatedWarnings();\n\n        // 3. –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏\n        await AsyncStorage.default.setItem('last_sync_time', new Date().toISOString());\n\n        // 4. –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ\n        await _LocalDatabase.localDB.cleanupOldData(30);\n        console.log('‚úÖ Sync completed successfully');\n        return true;\n      } catch (error) {\n        console.error('‚ùå Sync error:', error);\n        return false;\n      }\n    }\n\n    // === UPLOAD SENSOR DATA ===\n    async uploadSensorData() {\n      const unsyncedData = await _LocalDatabase.localDB.getUnsyncedSensorData();\n      if (unsyncedData.length === 0) {\n        console.log('üì§ No unsynced sensor data to upload');\n        return;\n      }\n      console.log(`üì§ Uploading ${unsyncedData.length} sensor data records...`);\n      try {\n        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—á–∫–∞–º–∏ –ø–æ 50 –∑–∞–ø–∏—Å–µ–π\n        const batchSize = 50;\n        for (let i = 0; i < unsyncedData.length; i += batchSize) {\n          const batch = unsyncedData.slice(i, i + batchSize);\n          const response = await fetch(`${this.backendUrl}api/sensor-data/batch`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              data: batch.map(item => ({\n                latitude: item.latitude,\n                longitude: item.longitude,\n                timestamp: item.timestamp,\n                speed: item.speed,\n                accuracy: item.accuracy,\n                accelerometer: item.accelerometer,\n                road_quality_score: item.roadQuality\n              }))\n            })\n          });\n          if (response.ok) {\n            const result = await response.json();\n            const localIds = batch.map(item => item.id);\n            const serverIds = result.inserted_ids || [];\n\n            // –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ\n            await _LocalDatabase.localDB.markSensorDataSynced(localIds, serverIds);\n            console.log(`‚úÖ Uploaded batch ${Math.floor(i / batchSize) + 1}/${Math.ceil(unsyncedData.length / batchSize)}`);\n          } else {\n            console.error(`‚ùå Failed to upload batch: ${response.status}`);\n          }\n        }\n      } catch (error) {\n        console.error('‚ùå Upload sensor data error:', error);\n      }\n    }\n\n    // === DOWNLOAD WARNINGS ===\n    async downloadUpdatedWarnings() {\n      try {\n        const downloadedRegions = await _LocalDatabase.localDB.getDownloadedRegions();\n        for (const region of downloadedRegions) {\n          const response = await fetch(`${this.backendUrl}api/warnings/region/${region.code}?since=${region.lastSync}`);\n          if (response.ok) {\n            const warnings = await response.json();\n            if (warnings.length > 0) {\n              const localWarnings = warnings.map(w => ({\n                serverId: w._id,\n                latitude: w.latitude,\n                longitude: w.longitude,\n                hazardType: w.hazard_type,\n                severity: w.severity,\n                description: w.description,\n                isVerified: w.is_verified,\n                region: region.code,\n                city: w.city || '',\n                country: w.country || '',\n                lastUpdated: w.updated_at || new Date().toISOString()\n              }));\n              await _LocalDatabase.localDB.saveWarnings(localWarnings);\n              await _LocalDatabase.localDB.updateRegionSyncStatus(region.code, region.name, warnings.length);\n              console.log(`üì• Downloaded ${warnings.length} warnings for ${region.name}`);\n            }\n          }\n        }\n      } catch (error) {\n        console.error('‚ùå Download warnings error:', error);\n      }\n    }\n\n    // === REGION MANAGEMENT ===\n    async downloadRegionData(regionCode, regionName, bounds) {\n      try {\n        const networkState = await Network.getNetworkStateAsync();\n        if (!networkState.isConnected) {\n          throw new Error('No internet connection');\n        }\n        console.log(`üì• Downloading data for region: ${regionName}...`);\n        const response = await fetch(`${this.backendUrl}api/warnings/region/${regionCode}/full?` + `north=${bounds.north}&south=${bounds.south}&east=${bounds.east}&west=${bounds.west}`);\n        if (!response.ok) {\n          throw new Error(`Failed to download region data: ${response.status}`);\n        }\n        const warnings = await response.json();\n        const localWarnings = warnings.map(w => ({\n          serverId: w._id,\n          latitude: w.latitude,\n          longitude: w.longitude,\n          hazardType: w.hazard_type,\n          severity: w.severity,\n          description: w.description,\n          isVerified: w.is_verified,\n          region: regionCode,\n          city: w.city || '',\n          country: w.country || '',\n          lastUpdated: w.updated_at || new Date().toISOString()\n        }));\n        await _LocalDatabase.localDB.saveWarnings(localWarnings);\n        await _LocalDatabase.localDB.updateRegionSyncStatus(regionCode, regionName, warnings.length);\n        console.log(`‚úÖ Downloaded ${warnings.length} warnings for ${regionName}`);\n        return true;\n      } catch (error) {\n        console.error(`‚ùå Failed to download region ${regionName}:`, error);\n        return false;\n      }\n    }\n    async getAvailableRegions() {\n      try {\n        const networkState = await Network.getNetworkStateAsync();\n        if (!networkState.isConnected) {\n          return [];\n        }\n        const response = await fetch(`${this.backendUrl}api/regions/available`);\n        if (!response.ok) return [];\n        return await response.json();\n      } catch (error) {\n        console.error('‚ùå Failed to get available regions:', error);\n        return [];\n      }\n    }\n\n    // === OFFLINE DATA ACCESS ===\n    async saveOfflineSensorData(latitude, longitude, speed, accuracy, accelerometer, roadQuality) {\n      const sensorData = {\n        latitude,\n        longitude,\n        timestamp: new Date().toISOString(),\n        speed,\n        accuracy,\n        accelerometer,\n        roadQuality,\n        isSynced: false\n      };\n      return await _LocalDatabase.localDB.saveSensorData(sensorData);\n    }\n    async getNearbyWarningsOffline(latitude, longitude, radiusKm = 1) {\n      return await _LocalDatabase.localDB.getNearbyWarnings(latitude, longitude, radiusKm);\n    }\n\n    // === STATUS METHODS ===\n    async getSyncStatus() {\n      return await _LocalDatabase.localDB.getSyncStatus();\n    }\n    async getDatabaseStats() {\n      return await _LocalDatabase.localDB.getDatabaseStats();\n    }\n    async forceFullSync() {\n      console.log('üîÑ Forcing full sync...');\n      return await this.syncWithServer();\n    }\n\n    // === MANUAL CONTROL ===\n    async clearLocalData() {\n      // –≠—Ç–æ –¥–ª—è debug/reset —Ñ—É–Ω–∫—Ü–∏–∏\n      console.log('üóëÔ∏è Clearing all local data...');\n      // Implement database clearing if needed\n    }\n  }\n  const syncService = new SyncService();\n});","lineCount":283,"map":[[27,2,17,0,"Object"],[27,8,17,0],[27,9,17,0,"defineProperty"],[27,23,17,0],[27,24,17,0,"exports"],[27,31,17,0],[28,4,17,0,"enumerable"],[28,14,17,0],[29,4,17,0,"get"],[29,7,17,0],[29,18,17,0,"get"],[29,19,17,0],[30,6,17,0],[30,13,17,0,"SyncService"],[30,24,17,0],[31,4,17,0],[32,2,17,0],[33,2,309,0,"Object"],[33,8,309,0],[33,9,309,0,"defineProperty"],[33,23,309,0],[33,24,309,0,"exports"],[33,31,309,0],[34,4,309,0,"enumerable"],[34,14,309,0],[35,4,309,0,"get"],[35,7,309,0],[35,18,309,0,"get"],[35,19,309,0],[36,6,309,0],[36,13,309,0,"syncService"],[36,24,309,0],[37,4,309,0],[38,2,309,0],[39,2,1,0],[39,6,1,0,"_expoNetwork"],[39,18,1,0],[39,21,1,0,"require"],[39,28,1,0],[39,29,1,0,"_dependencyMap"],[39,43,1,0],[40,2,1,0],[40,6,1,0,"Network"],[40,13,1,0],[40,16,1,0,"_interopNamespace"],[40,33,1,0],[40,34,1,0,"_expoNetwork"],[40,46,1,0],[41,2,2,0],[41,6,2,0,"_reactNativeAsyncStorageAsyncStorage"],[41,42,2,0],[41,45,2,0,"require"],[41,52,2,0],[41,53,2,0,"_dependencyMap"],[41,67,2,0],[42,2,2,0],[42,6,2,0,"AsyncStorage"],[42,18,2,0],[42,21,2,0,"_interopDefault"],[42,36,2,0],[42,37,2,0,"_reactNativeAsyncStorageAsyncStorage"],[42,73,2,0],[43,2,3,0],[43,6,3,0,"_LocalDatabase"],[43,20,3,0],[43,23,3,0,"require"],[43,30,3,0],[43,31,3,0,"_dependencyMap"],[43,45,3,0],[44,2,17,7],[44,8,17,13,"SyncService"],[44,19,17,24],[44,20,17,25],[45,4,19,10,"syncInterval"],[45,16,19,22],[45,19,19,48],[45,23,19,52],[46,4,20,10,"isInitialized"],[46,17,20,23],[46,20,20,26],[46,25,20,31],[47,4,22,2,"constructor"],[47,15,22,13,"constructor"],[47,16,22,13],[47,18,22,16],[48,6,23,4],[48,10,23,8],[48,11,23,9,"backendUrl"],[48,21,23,19],[48,24,23,22,"process"],[48,31,23,29],[48,32,23,30,"env"],[48,35,23,33],[48,36,23,34,"EXPO_PUBLIC_BACKEND_URL"],[48,59,23,57],[48,63,23,61],[48,98,23,96],[49,6,24,4,"console"],[49,13,24,11],[49,14,24,12,"log"],[49,17,24,15],[49,18,24,16],[49,47,24,45],[49,49,24,47],[49,53,24,51],[49,54,24,52,"backendUrl"],[49,64,24,62],[49,65,24,63],[50,4,25,2],[51,4,27,2],[51,10,27,8,"initialize"],[51,20,27,18,"initialize"],[51,21,27,18],[51,23,27,21],[52,6,28,4],[52,10,28,8],[52,14,28,12],[52,15,28,13,"isInitialized"],[52,28,28,26],[52,30,28,28],[53,6,30,4],[53,10,30,8],[54,8,31,6],[54,14,31,12,"localDB"],[54,28,31,19],[54,29,31,19,"localDB"],[54,36,31,19],[54,37,31,20,"initialize"],[54,47,31,30],[54,48,31,31],[54,49,31,32],[56,8,33,6],[57,8,34,6],[57,12,34,10,"localDB"],[57,26,34,17],[57,27,34,17,"localDB"],[57,34,34,17],[57,35,34,18,"getDatabaseStats"],[57,51,34,34],[57,53,34,36],[58,10,35,8],[58,14,35,12],[58,15,35,13,"startPeriodicSync"],[58,32,35,30],[58,33,35,31],[58,34,35,32],[59,8,36,6],[60,8,38,6],[60,12,38,10],[60,13,38,11,"isInitialized"],[60,26,38,24],[60,29,38,27],[60,33,38,31],[61,8,40,6,"console"],[61,15,40,13],[61,16,40,14,"log"],[61,19,40,17],[61,20,40,18],[61,48,40,46],[61,49,40,47],[62,6,41,4],[62,7,41,5],[62,8,41,6],[62,15,41,13,"error"],[62,20,41,18],[62,22,41,20],[63,8,42,6,"console"],[63,15,42,13],[63,16,42,14,"error"],[63,21,42,19],[63,22,42,20],[63,60,42,58],[63,62,42,60,"error"],[63,67,42,65],[63,68,42,66],[64,8,43,6,"console"],[64,15,43,13],[64,16,43,14,"warn"],[64,20,43,18],[64,21,43,19],[64,72,43,70],[64,73,43,71],[65,8,44,6],[65,12,44,10],[65,13,44,11,"isInitialized"],[65,26,44,24],[65,29,44,27],[65,33,44,31],[65,34,44,32],[65,35,44,33],[66,6,45,4],[67,4,46,2],[69,4,48,2],[70,4,49,10,"startPeriodicSync"],[70,21,49,27,"startPeriodicSync"],[70,22,49,27],[70,24,49,30],[71,6,50,4],[72,6,51,4],[72,10,51,8],[72,11,51,9,"syncInterval"],[72,23,51,21],[72,26,51,24,"setInterval"],[72,37,51,35],[72,38,51,36],[72,50,51,48],[73,8,52,6],[73,14,52,12,"networkState"],[73,26,52,24],[73,29,52,27],[73,35,52,33,"Network"],[73,42,52,40],[73,43,52,41,"getNetworkStateAsync"],[73,63,52,61],[73,64,52,62],[73,65,52,63],[74,8,53,6],[74,12,53,10,"networkState"],[74,24,53,22],[74,25,53,23,"isConnected"],[74,36,53,34],[74,38,53,36],[75,10,54,8],[75,16,54,14],[75,20,54,18],[75,21,54,19,"syncWithServer"],[75,35,54,33],[75,36,54,34],[75,37,54,35],[76,8,55,6],[77,6,56,4],[77,7,56,5],[77,9,56,7],[77,14,56,12],[77,15,56,13],[78,4,57,2],[79,4,59,2],[79,10,59,8,"stopPeriodicSync"],[79,26,59,24,"stopPeriodicSync"],[79,27,59,24],[79,29,59,27],[80,6,60,4],[80,10,60,8],[80,14,60,12],[80,15,60,13,"syncInterval"],[80,27,60,25],[80,29,60,27],[81,8,61,6,"clearInterval"],[81,21,61,19],[81,22,61,20],[81,26,61,24],[81,27,61,25,"syncInterval"],[81,39,61,37],[81,40,61,38],[82,8,62,6],[82,12,62,10],[82,13,62,11,"syncInterval"],[82,25,62,23],[82,28,62,26],[82,32,62,30],[83,6,63,4],[84,4,64,2],[86,4,66,2],[87,4,67,2],[87,10,67,8,"syncWithServer"],[87,24,67,22,"syncWithServer"],[87,25,67,22],[87,27,67,43],[88,6,68,4],[88,10,68,8],[89,8,69,6],[89,14,69,12,"networkState"],[89,26,69,24],[89,29,69,27],[89,35,69,33,"Network"],[89,42,69,40],[89,43,69,41,"getNetworkStateAsync"],[89,63,69,61],[89,64,69,62],[89,65,69,63],[90,8,70,6],[90,12,70,10],[90,13,70,11,"networkState"],[90,25,70,23],[90,26,70,24,"isConnected"],[90,37,70,35],[90,39,70,37],[91,10,71,8,"console"],[91,17,71,15],[91,18,71,16,"log"],[91,21,71,19],[91,22,71,20],[91,64,71,62],[91,65,71,63],[92,10,72,8],[92,17,72,15],[92,22,72,20],[93,8,73,6],[94,8,75,6,"console"],[94,15,75,13],[94,16,75,14,"log"],[94,19,75,17],[94,20,75,18],[94,53,75,51],[94,54,75,52],[96,8,77,6],[97,8,78,6],[97,14,78,12],[97,18,78,16],[97,19,78,17,"uploadSensorData"],[97,35,78,33],[97,36,78,34],[97,37,78,35],[99,8,80,6],[100,8,81,6],[100,14,81,12],[100,18,81,16],[100,19,81,17,"downloadUpdatedWarnings"],[100,42,81,40],[100,43,81,41],[100,44,81,42],[102,8,83,6],[103,8,84,6],[103,14,84,12,"AsyncStorage"],[103,26,84,24],[103,27,84,24,"default"],[103,34,84,24],[103,35,84,25,"setItem"],[103,42,84,32],[103,43,84,33],[103,59,84,49],[103,61,84,51],[103,65,84,55,"Date"],[103,69,84,59],[103,70,84,60],[103,71,84,61],[103,72,84,62,"toISOString"],[103,83,84,73],[103,84,84,74],[103,85,84,75],[103,86,84,76],[105,8,86,6],[106,8,87,6],[106,14,87,12,"localDB"],[106,28,87,19],[106,29,87,19,"localDB"],[106,36,87,19],[106,37,87,20,"cleanupOldData"],[106,51,87,34],[106,52,87,35],[106,54,87,37],[106,55,87,38],[107,8,89,6,"console"],[107,15,89,13],[107,16,89,14,"log"],[107,19,89,17],[107,20,89,18],[107,51,89,49],[107,52,89,50],[108,8,90,6],[108,15,90,13],[108,19,90,17],[109,6,91,4],[109,7,91,5],[109,8,91,6],[109,15,91,13,"error"],[109,20,91,18],[109,22,91,20],[110,8,92,6,"console"],[110,15,92,13],[110,16,92,14,"error"],[110,21,92,19],[110,22,92,20],[110,37,92,35],[110,39,92,37,"error"],[110,44,92,42],[110,45,92,43],[111,8,93,6],[111,15,93,13],[111,20,93,18],[112,6,94,4],[113,4,95,2],[115,4,97,2],[116,4,98,2],[116,10,98,16,"uploadSensorData"],[116,26,98,32,"uploadSensorData"],[116,27,98,32],[116,29,98,35],[117,6,99,4],[117,12,99,10,"unsyncedData"],[117,24,99,22],[117,27,99,25],[117,33,99,31,"localDB"],[117,47,99,38],[117,48,99,38,"localDB"],[117,55,99,38],[117,56,99,39,"getUnsyncedSensorData"],[117,77,99,60],[117,78,99,61],[117,79,99,62],[118,6,100,4],[118,10,100,8,"unsyncedData"],[118,22,100,20],[118,23,100,21,"length"],[118,29,100,27],[118,34,100,32],[118,35,100,33],[118,37,100,35],[119,8,101,6,"console"],[119,15,101,13],[119,16,101,14,"log"],[119,19,101,17],[119,20,101,18],[119,58,101,56],[119,59,101,57],[120,8,102,6],[121,6,103,4],[122,6,105,4,"console"],[122,13,105,11],[122,14,105,12,"log"],[122,17,105,15],[122,18,105,16],[122,34,105,32,"unsyncedData"],[122,46,105,44],[122,47,105,45,"length"],[122,53,105,51],[122,78,105,76],[122,79,105,77],[123,6,107,4],[123,10,107,8],[124,8,108,6],[125,8,109,6],[125,14,109,12,"batchSize"],[125,23,109,21],[125,26,109,24],[125,28,109,26],[126,8,110,6],[126,13,110,11],[126,17,110,15,"i"],[126,18,110,16],[126,21,110,19],[126,22,110,20],[126,24,110,22,"i"],[126,25,110,23],[126,28,110,26,"unsyncedData"],[126,40,110,38],[126,41,110,39,"length"],[126,47,110,45],[126,49,110,47,"i"],[126,50,110,48],[126,54,110,52,"batchSize"],[126,63,110,61],[126,65,110,63],[127,10,111,8],[127,16,111,14,"batch"],[127,21,111,19],[127,24,111,22,"unsyncedData"],[127,36,111,34],[127,37,111,35,"slice"],[127,42,111,40],[127,43,111,41,"i"],[127,44,111,42],[127,46,111,44,"i"],[127,47,111,45],[127,50,111,48,"batchSize"],[127,59,111,57],[127,60,111,58],[128,10,113,8],[128,16,113,14,"response"],[128,24,113,22],[128,27,113,25],[128,33,113,31,"fetch"],[128,38,113,36],[128,39,113,37],[128,42,113,40],[128,46,113,44],[128,47,113,45,"backendUrl"],[128,57,113,55],[128,80,113,78],[128,82,113,80],[129,12,114,10,"method"],[129,18,114,16],[129,20,114,18],[129,26,114,24],[130,12,115,10,"headers"],[130,19,115,17],[130,21,115,19],[131,14,116,12],[131,28,116,26],[131,30,116,28],[132,12,117,10],[132,13,117,11],[133,12,118,10,"body"],[133,16,118,14],[133,18,118,16,"JSON"],[133,22,118,20],[133,23,118,21,"stringify"],[133,32,118,30],[133,33,118,31],[134,14,119,12,"data"],[134,18,119,16],[134,20,119,18,"batch"],[134,25,119,23],[134,26,119,24,"map"],[134,29,119,27],[134,30,119,28,"item"],[134,34,119,32],[134,39,119,37],[135,16,120,14,"latitude"],[135,24,120,22],[135,26,120,24,"item"],[135,30,120,28],[135,31,120,29,"latitude"],[135,39,120,37],[136,16,121,14,"longitude"],[136,25,121,23],[136,27,121,25,"item"],[136,31,121,29],[136,32,121,30,"longitude"],[136,41,121,39],[137,16,122,14,"timestamp"],[137,25,122,23],[137,27,122,25,"item"],[137,31,122,29],[137,32,122,30,"timestamp"],[137,41,122,39],[138,16,123,14,"speed"],[138,21,123,19],[138,23,123,21,"item"],[138,27,123,25],[138,28,123,26,"speed"],[138,33,123,31],[139,16,124,14,"accuracy"],[139,24,124,22],[139,26,124,24,"item"],[139,30,124,28],[139,31,124,29,"accuracy"],[139,39,124,37],[140,16,125,14,"accelerometer"],[140,29,125,27],[140,31,125,29,"item"],[140,35,125,33],[140,36,125,34,"accelerometer"],[140,49,125,47],[141,16,126,14,"road_quality_score"],[141,34,126,32],[141,36,126,34,"item"],[141,40,126,38],[141,41,126,39,"roadQuality"],[142,14,127,12],[142,15,127,13],[142,16,127,14],[143,12,128,10],[143,13,128,11],[144,10,129,8],[144,11,129,9],[144,12,129,10],[145,10,131,8],[145,14,131,12,"response"],[145,22,131,20],[145,23,131,21,"ok"],[145,25,131,23],[145,27,131,25],[146,12,132,10],[146,18,132,16,"result"],[146,24,132,22],[146,27,132,25],[146,33,132,31,"response"],[146,41,132,39],[146,42,132,40,"json"],[146,46,132,44],[146,47,132,45],[146,48,132,46],[147,12,133,10],[147,18,133,16,"localIds"],[147,26,133,24],[147,29,133,27,"batch"],[147,34,133,32],[147,35,133,33,"map"],[147,38,133,36],[147,39,133,37,"item"],[147,43,133,41],[147,47,133,45,"item"],[147,51,133,49],[147,52,133,50,"id"],[147,54,133,53],[147,55,133,54],[148,12,134,10],[148,18,134,16,"serverIds"],[148,27,134,25],[148,30,134,28,"result"],[148,36,134,34],[148,37,134,35,"inserted_ids"],[148,49,134,47],[148,53,134,51],[148,55,134,53],[150,12,136,10],[151,12,137,10],[151,18,137,16,"localDB"],[151,32,137,23],[151,33,137,23,"localDB"],[151,40,137,23],[151,41,137,24,"markSensorDataSynced"],[151,61,137,44],[151,62,137,45,"localIds"],[151,70,137,53],[151,72,137,55,"serverIds"],[151,81,137,64],[151,82,137,65],[152,12,139,10,"console"],[152,19,139,17],[152,20,139,18,"log"],[152,23,139,21],[152,24,139,22],[152,44,139,42,"Math"],[152,48,139,46],[152,49,139,47,"floor"],[152,54,139,52],[152,55,139,53,"i"],[152,56,139,54],[152,59,139,55,"batchSize"],[152,68,139,64],[152,69,139,65],[152,72,139,68],[152,73,139,69],[152,77,139,73,"Math"],[152,81,139,77],[152,82,139,78,"ceil"],[152,86,139,82],[152,87,139,83,"unsyncedData"],[152,99,139,95],[152,100,139,96,"length"],[152,106,139,102],[152,109,139,103,"batchSize"],[152,118,139,112],[152,119,139,113],[152,121,139,115],[152,122,139,116],[153,10,140,8],[153,11,140,9],[153,17,140,15],[154,12,141,10,"console"],[154,19,141,17],[154,20,141,18,"error"],[154,25,141,23],[154,26,141,24],[154,55,141,53,"response"],[154,63,141,61],[154,64,141,62,"status"],[154,70,141,68],[154,72,141,70],[154,73,141,71],[155,10,142,8],[156,8,143,6],[157,6,144,4],[157,7,144,5],[157,8,144,6],[157,15,144,13,"error"],[157,20,144,18],[157,22,144,20],[158,8,145,6,"console"],[158,15,145,13],[158,16,145,14,"error"],[158,21,145,19],[158,22,145,20],[158,51,145,49],[158,53,145,51,"error"],[158,58,145,56],[158,59,145,57],[159,6,146,4],[160,4,147,2],[162,4,149,2],[163,4,150,2],[163,10,150,16,"downloadUpdatedWarnings"],[163,33,150,39,"downloadUpdatedWarnings"],[163,34,150,39],[163,36,150,42],[164,6,151,4],[164,10,151,8],[165,8,152,6],[165,14,152,12,"downloadedRegions"],[165,31,152,29],[165,34,152,32],[165,40,152,38,"localDB"],[165,54,152,45],[165,55,152,45,"localDB"],[165,62,152,45],[165,63,152,46,"getDownloadedRegions"],[165,83,152,66],[165,84,152,67],[165,85,152,68],[166,8,154,6],[166,13,154,11],[166,19,154,17,"region"],[166,25,154,23],[166,29,154,27,"downloadedRegions"],[166,46,154,44],[166,48,154,46],[167,10,155,8],[167,16,155,14,"response"],[167,24,155,22],[167,27,155,25],[167,33,155,31,"fetch"],[167,38,155,36],[167,39,156,10],[167,42,156,13],[167,46,156,17],[167,47,156,18,"backendUrl"],[167,57,156,28],[167,80,156,51,"region"],[167,86,156,57],[167,87,156,58,"code"],[167,91,156,62],[167,101,156,72,"region"],[167,107,156,78],[167,108,156,79,"lastSync"],[167,116,156,87],[167,118,157,8],[167,119,157,9],[168,10,159,8],[168,14,159,12,"response"],[168,22,159,20],[168,23,159,21,"ok"],[168,25,159,23],[168,27,159,25],[169,12,160,10],[169,18,160,16,"warnings"],[169,26,160,24],[169,29,160,27],[169,35,160,33,"response"],[169,43,160,41],[169,44,160,42,"json"],[169,48,160,46],[169,49,160,47],[169,50,160,48],[170,12,162,10],[170,16,162,14,"warnings"],[170,24,162,22],[170,25,162,23,"length"],[170,31,162,29],[170,34,162,32],[170,35,162,33],[170,37,162,35],[171,14,163,12],[171,20,163,18,"localWarnings"],[171,33,163,47],[171,36,163,50,"warnings"],[171,44,163,58],[171,45,163,59,"map"],[171,48,163,62],[171,49,163,64,"w"],[171,50,163,70],[171,55,163,76],[172,16,164,14,"serverId"],[172,24,164,22],[172,26,164,24,"w"],[172,27,164,25],[172,28,164,26,"_id"],[172,31,164,29],[173,16,165,14,"latitude"],[173,24,165,22],[173,26,165,24,"w"],[173,27,165,25],[173,28,165,26,"latitude"],[173,36,165,34],[174,16,166,14,"longitude"],[174,25,166,23],[174,27,166,25,"w"],[174,28,166,26],[174,29,166,27,"longitude"],[174,38,166,36],[175,16,167,14,"hazardType"],[175,26,167,24],[175,28,167,26,"w"],[175,29,167,27],[175,30,167,28,"hazard_type"],[175,41,167,39],[176,16,168,14,"severity"],[176,24,168,22],[176,26,168,24,"w"],[176,27,168,25],[176,28,168,26,"severity"],[176,36,168,34],[177,16,169,14,"description"],[177,27,169,25],[177,29,169,27,"w"],[177,30,169,28],[177,31,169,29,"description"],[177,42,169,40],[178,16,170,14,"isVerified"],[178,26,170,24],[178,28,170,26,"w"],[178,29,170,27],[178,30,170,28,"is_verified"],[178,41,170,39],[179,16,171,14,"region"],[179,22,171,20],[179,24,171,22,"region"],[179,30,171,28],[179,31,171,29,"code"],[179,35,171,33],[180,16,172,14,"city"],[180,20,172,18],[180,22,172,20,"w"],[180,23,172,21],[180,24,172,22,"city"],[180,28,172,26],[180,32,172,30],[180,34,172,32],[181,16,173,14,"country"],[181,23,173,21],[181,25,173,23,"w"],[181,26,173,24],[181,27,173,25,"country"],[181,34,173,32],[181,38,173,36],[181,40,173,38],[182,16,174,14,"lastUpdated"],[182,27,174,25],[182,29,174,27,"w"],[182,30,174,28],[182,31,174,29,"updated_at"],[182,41,174,39],[182,45,174,43],[182,49,174,47,"Date"],[182,53,174,51],[182,54,174,52],[182,55,174,53],[182,56,174,54,"toISOString"],[182,67,174,65],[182,68,174,66],[183,14,175,12],[183,15,175,13],[183,16,175,14],[183,17,175,15],[184,14,177,12],[184,20,177,18,"localDB"],[184,34,177,25],[184,35,177,25,"localDB"],[184,42,177,25],[184,43,177,26,"saveWarnings"],[184,55,177,38],[184,56,177,39,"localWarnings"],[184,69,177,52],[184,70,177,53],[185,14,178,12],[185,20,178,18,"localDB"],[185,34,178,25],[185,35,178,25,"localDB"],[185,42,178,25],[185,43,178,26,"updateRegionSyncStatus"],[185,65,178,48],[185,66,179,14,"region"],[185,72,179,20],[185,73,179,21,"code"],[185,77,179,25],[185,79,180,14,"region"],[185,85,180,20],[185,86,180,21,"name"],[185,90,180,25],[185,92,181,14,"warnings"],[185,100,181,22],[185,101,181,23,"length"],[185,107,182,12],[185,108,182,13],[186,14,184,12,"console"],[186,21,184,19],[186,22,184,20,"log"],[186,25,184,23],[186,26,184,24],[186,43,184,41,"warnings"],[186,51,184,49],[186,52,184,50,"length"],[186,58,184,56],[186,75,184,73,"region"],[186,81,184,79],[186,82,184,80,"name"],[186,86,184,84],[186,88,184,86],[186,89,184,87],[187,12,185,10],[188,10,186,8],[189,8,187,6],[190,6,188,4],[190,7,188,5],[190,8,188,6],[190,15,188,13,"error"],[190,20,188,18],[190,22,188,20],[191,8,189,6,"console"],[191,15,189,13],[191,16,189,14,"error"],[191,21,189,19],[191,22,189,20],[191,50,189,48],[191,52,189,50,"error"],[191,57,189,55],[191,58,189,56],[192,6,190,4],[193,4,191,2],[195,4,193,2],[196,4,194,2],[196,10,194,8,"downloadRegionData"],[196,28,194,26,"downloadRegionData"],[196,29,194,27,"regionCode"],[196,39,194,45],[196,41,194,47,"regionName"],[196,51,194,65],[196,53,194,67,"bounds"],[196,59,194,95],[196,61,194,115],[197,6,195,4],[197,10,195,8],[198,8,196,6],[198,14,196,12,"networkState"],[198,26,196,24],[198,29,196,27],[198,35,196,33,"Network"],[198,42,196,40],[198,43,196,41,"getNetworkStateAsync"],[198,63,196,61],[198,64,196,62],[198,65,196,63],[199,8,197,6],[199,12,197,10],[199,13,197,11,"networkState"],[199,25,197,23],[199,26,197,24,"isConnected"],[199,37,197,35],[199,39,197,37],[200,10,198,8],[200,16,198,14],[200,20,198,18,"Error"],[200,25,198,23],[200,26,198,24],[200,50,198,48],[200,51,198,49],[201,8,199,6],[202,8,201,6,"console"],[202,15,201,13],[202,16,201,14,"log"],[202,19,201,17],[202,20,201,18],[202,55,201,53,"regionName"],[202,65,201,63],[202,70,201,68],[202,71,201,69],[203,8,203,6],[203,14,203,12,"response"],[203,22,203,20],[203,25,203,23],[203,31,203,29,"fetch"],[203,36,203,34],[203,37,204,8],[203,40,204,11],[203,44,204,15],[203,45,204,16,"backendUrl"],[203,55,204,26],[203,78,204,49,"regionCode"],[203,88,204,59],[203,96,204,67],[203,99,205,8],[203,108,205,17,"bounds"],[203,114,205,23],[203,115,205,24,"north"],[203,120,205,29],[203,130,205,39,"bounds"],[203,136,205,45],[203,137,205,46,"south"],[203,142,205,51],[203,151,205,60,"bounds"],[203,157,205,66],[203,158,205,67,"east"],[203,162,205,71],[203,171,205,80,"bounds"],[203,177,205,86],[203,178,205,87,"west"],[203,182,205,91],[203,184,206,6],[203,185,206,7],[204,8,208,6],[204,12,208,10],[204,13,208,11,"response"],[204,21,208,19],[204,22,208,20,"ok"],[204,24,208,22],[204,26,208,24],[205,10,209,8],[205,16,209,14],[205,20,209,18,"Error"],[205,25,209,23],[205,26,209,24],[205,61,209,59,"response"],[205,69,209,67],[205,70,209,68,"status"],[205,76,209,74],[205,78,209,76],[205,79,209,77],[206,8,210,6],[207,8,212,6],[207,14,212,12,"warnings"],[207,22,212,20],[207,25,212,23],[207,31,212,29,"response"],[207,39,212,37],[207,40,212,38,"json"],[207,44,212,42],[207,45,212,43],[207,46,212,44],[208,8,214,6],[208,14,214,12,"localWarnings"],[208,27,214,41],[208,30,214,44,"warnings"],[208,38,214,52],[208,39,214,53,"map"],[208,42,214,56],[208,43,214,58,"w"],[208,44,214,64],[208,49,214,70],[209,10,215,8,"serverId"],[209,18,215,16],[209,20,215,18,"w"],[209,21,215,19],[209,22,215,20,"_id"],[209,25,215,23],[210,10,216,8,"latitude"],[210,18,216,16],[210,20,216,18,"w"],[210,21,216,19],[210,22,216,20,"latitude"],[210,30,216,28],[211,10,217,8,"longitude"],[211,19,217,17],[211,21,217,19,"w"],[211,22,217,20],[211,23,217,21,"longitude"],[211,32,217,30],[212,10,218,8,"hazardType"],[212,20,218,18],[212,22,218,20,"w"],[212,23,218,21],[212,24,218,22,"hazard_type"],[212,35,218,33],[213,10,219,8,"severity"],[213,18,219,16],[213,20,219,18,"w"],[213,21,219,19],[213,22,219,20,"severity"],[213,30,219,28],[214,10,220,8,"description"],[214,21,220,19],[214,23,220,21,"w"],[214,24,220,22],[214,25,220,23,"description"],[214,36,220,34],[215,10,221,8,"isVerified"],[215,20,221,18],[215,22,221,20,"w"],[215,23,221,21],[215,24,221,22,"is_verified"],[215,35,221,33],[216,10,222,8,"region"],[216,16,222,14],[216,18,222,16,"regionCode"],[216,28,222,26],[217,10,223,8,"city"],[217,14,223,12],[217,16,223,14,"w"],[217,17,223,15],[217,18,223,16,"city"],[217,22,223,20],[217,26,223,24],[217,28,223,26],[218,10,224,8,"country"],[218,17,224,15],[218,19,224,17,"w"],[218,20,224,18],[218,21,224,19,"country"],[218,28,224,26],[218,32,224,30],[218,34,224,32],[219,10,225,8,"lastUpdated"],[219,21,225,19],[219,23,225,21,"w"],[219,24,225,22],[219,25,225,23,"updated_at"],[219,35,225,33],[219,39,225,37],[219,43,225,41,"Date"],[219,47,225,45],[219,48,225,46],[219,49,225,47],[219,50,225,48,"toISOString"],[219,61,225,59],[219,62,225,60],[220,8,226,6],[220,9,226,7],[220,10,226,8],[220,11,226,9],[221,8,228,6],[221,14,228,12,"localDB"],[221,28,228,19],[221,29,228,19,"localDB"],[221,36,228,19],[221,37,228,20,"saveWarnings"],[221,49,228,32],[221,50,228,33,"localWarnings"],[221,63,228,46],[221,64,228,47],[222,8,229,6],[222,14,229,12,"localDB"],[222,28,229,19],[222,29,229,19,"localDB"],[222,36,229,19],[222,37,229,20,"updateRegionSyncStatus"],[222,59,229,42],[222,60,229,43,"regionCode"],[222,70,229,53],[222,72,229,55,"regionName"],[222,82,229,65],[222,84,229,67,"warnings"],[222,92,229,75],[222,93,229,76,"length"],[222,99,229,82],[222,100,229,83],[223,8,231,6,"console"],[223,15,231,13],[223,16,231,14,"log"],[223,19,231,17],[223,20,231,18],[223,36,231,34,"warnings"],[223,44,231,42],[223,45,231,43,"length"],[223,51,231,49],[223,68,231,66,"regionName"],[223,78,231,76],[223,80,231,78],[223,81,231,79],[224,8,232,6],[224,15,232,13],[224,19,232,17],[225,6,233,4],[225,7,233,5],[225,8,233,6],[225,15,233,13,"error"],[225,20,233,18],[225,22,233,20],[226,8,234,6,"console"],[226,15,234,13],[226,16,234,14,"error"],[226,21,234,19],[226,22,234,20],[226,53,234,51,"regionName"],[226,63,234,61],[226,66,234,64],[226,68,234,66,"error"],[226,73,234,71],[226,74,234,72],[227,8,235,6],[227,15,235,13],[227,20,235,18],[228,6,236,4],[229,4,237,2],[230,4,239,2],[230,10,239,8,"getAvailableRegions"],[230,29,239,27,"getAvailableRegions"],[230,30,239,27],[230,32,239,53],[231,6,240,4],[231,10,240,8],[232,8,241,6],[232,14,241,12,"networkState"],[232,26,241,24],[232,29,241,27],[232,35,241,33,"Network"],[232,42,241,40],[232,43,241,41,"getNetworkStateAsync"],[232,63,241,61],[232,64,241,62],[232,65,241,63],[233,8,242,6],[233,12,242,10],[233,13,242,11,"networkState"],[233,25,242,23],[233,26,242,24,"isConnected"],[233,37,242,35],[233,39,242,37],[234,10,243,8],[234,17,243,15],[234,19,243,17],[235,8,244,6],[236,8,246,6],[236,14,246,12,"response"],[236,22,246,20],[236,25,246,23],[236,31,246,29,"fetch"],[236,36,246,34],[236,37,246,35],[236,40,246,38],[236,44,246,42],[236,45,246,43,"backendUrl"],[236,55,246,53],[236,78,246,76],[236,79,246,77],[237,8,247,6],[237,12,247,10],[237,13,247,11,"response"],[237,21,247,19],[237,22,247,20,"ok"],[237,24,247,22],[237,26,247,24],[237,33,247,31],[237,35,247,33],[238,8,249,6],[238,15,249,13],[238,21,249,19,"response"],[238,29,249,27],[238,30,249,28,"json"],[238,34,249,32],[238,35,249,33],[238,36,249,34],[239,6,250,4],[239,7,250,5],[239,8,250,6],[239,15,250,13,"error"],[239,20,250,18],[239,22,250,20],[240,8,251,6,"console"],[240,15,251,13],[240,16,251,14,"error"],[240,21,251,19],[240,22,251,20],[240,58,251,56],[240,60,251,58,"error"],[240,65,251,63],[240,66,251,64],[241,8,252,6],[241,15,252,13],[241,17,252,15],[242,6,253,4],[243,4,254,2],[245,4,256,2],[246,4,257,2],[246,10,257,8,"saveOfflineSensorData"],[246,31,257,29,"saveOfflineSensorData"],[246,32,258,4,"latitude"],[246,40,258,20],[246,42,259,4,"longitude"],[246,51,259,21],[246,53,260,4,"speed"],[246,58,260,17],[246,60,261,4,"accuracy"],[246,68,261,20],[246,70,262,4,"accelerometer"],[246,83,262,54],[246,85,263,4,"roadQuality"],[246,96,263,23],[246,98,264,21],[247,6,265,4],[247,12,265,10,"sensorData"],[247,22,265,63],[247,25,265,66],[248,8,266,6,"latitude"],[248,16,266,14],[249,8,267,6,"longitude"],[249,17,267,15],[250,8,268,6,"timestamp"],[250,17,268,15],[250,19,268,17],[250,23,268,21,"Date"],[250,27,268,25],[250,28,268,26],[250,29,268,27],[250,30,268,28,"toISOString"],[250,41,268,39],[250,42,268,40],[250,43,268,41],[251,8,269,6,"speed"],[251,13,269,11],[252,8,270,6,"accuracy"],[252,16,270,14],[253,8,271,6,"accelerometer"],[253,21,271,19],[254,8,272,6,"roadQuality"],[254,19,272,17],[255,8,273,6,"isSynced"],[255,16,273,14],[255,18,273,16],[256,6,274,4],[256,7,274,5],[257,6,276,4],[257,13,276,11],[257,19,276,17,"localDB"],[257,33,276,24],[257,34,276,24,"localDB"],[257,41,276,24],[257,42,276,25,"saveSensorData"],[257,56,276,39],[257,57,276,40,"sensorData"],[257,67,276,50],[257,68,276,51],[258,4,277,2],[259,4,279,2],[259,10,279,8,"getNearbyWarningsOffline"],[259,34,279,32,"getNearbyWarningsOffline"],[259,35,280,4,"latitude"],[259,43,280,20],[259,45,281,4,"longitude"],[259,54,281,21],[259,56,282,4,"radiusKm"],[259,64,282,20],[259,67,282,23],[259,68,282,24],[259,70,283,29],[260,6,284,4],[260,13,284,11],[260,19,284,17,"localDB"],[260,33,284,24],[260,34,284,24,"localDB"],[260,41,284,24],[260,42,284,25,"getNearbyWarnings"],[260,59,284,42],[260,60,284,43,"latitude"],[260,68,284,51],[260,70,284,53,"longitude"],[260,79,284,62],[260,81,284,64,"radiusKm"],[260,89,284,72],[260,90,284,73],[261,4,285,2],[263,4,287,2],[264,4,288,2],[264,10,288,8,"getSyncStatus"],[264,23,288,21,"getSyncStatus"],[264,24,288,21],[264,26,288,45],[265,6,289,4],[265,13,289,11],[265,19,289,17,"localDB"],[265,33,289,24],[265,34,289,24,"localDB"],[265,41,289,24],[265,42,289,25,"getSyncStatus"],[265,55,289,38],[265,56,289,39],[265,57,289,40],[266,4,290,2],[267,4,292,2],[267,10,292,8,"getDatabaseStats"],[267,26,292,24,"getDatabaseStats"],[267,27,292,24],[267,29,292,27],[268,6,293,4],[268,13,293,11],[268,19,293,17,"localDB"],[268,33,293,24],[268,34,293,24,"localDB"],[268,41,293,24],[268,42,293,25,"getDatabaseStats"],[268,58,293,41],[268,59,293,42],[268,60,293,43],[269,4,294,2],[270,4,296,2],[270,10,296,8,"forceFullSync"],[270,23,296,21,"forceFullSync"],[270,24,296,21],[270,26,296,42],[271,6,297,4,"console"],[271,13,297,11],[271,14,297,12,"log"],[271,17,297,15],[271,18,297,16],[271,43,297,41],[271,44,297,42],[272,6,298,4],[272,13,298,11],[272,19,298,17],[272,23,298,21],[272,24,298,22,"syncWithServer"],[272,38,298,36],[272,39,298,37],[272,40,298,38],[273,4,299,2],[275,4,301,2],[276,4,302,2],[276,10,302,8,"clearLocalData"],[276,24,302,22,"clearLocalData"],[276,25,302,22],[276,27,302,25],[277,6,303,4],[278,6,304,4,"console"],[278,13,304,11],[278,14,304,12,"log"],[278,17,304,15],[278,18,304,16],[278,50,304,48],[278,51,304,49],[279,6,305,4],[280,4,306,2],[281,2,307,0],[282,2,309,7],[282,8,309,13,"syncService"],[282,19,309,24],[282,22,309,27],[282,26,309,31,"SyncService"],[282,37,309,42],[282,38,309,43],[282,39,309,44],[283,0,309,45],[283,3]],"functionMap":{"names":["<global>","SyncService","constructor","initialize","startPeriodicSync","setInterval$argument_0","stopPeriodicSync","syncWithServer","uploadSensorData","batch.map$argument_0","downloadUpdatedWarnings","warnings.map$argument_0","downloadRegionData","getAvailableRegions","saveOfflineSensorData","getNearbyWarningsOffline","getSyncStatus","getDatabaseStats","forceFullSync","clearLocalData"],"mappings":"AAA;OCgB;ECK;GDG;EEE;GFmB;EGG;oCCE;KDK;GHC;EKE;GLK;EMG;GN4B;EOG;4BCqB;cDQ;qCCM,gBD;GPc;ESG;+DCa;cDY;GTgB;EWG;yDDoB;QCY;GXW;EYE;GZe;EaG;GboB;EcE;GdM;EeG;GfE;EgBE;GhBE;EiBE;GjBG;EkBG;GlBI;CDC"},"hasCjsExports":false},"type":"js/module"}]}