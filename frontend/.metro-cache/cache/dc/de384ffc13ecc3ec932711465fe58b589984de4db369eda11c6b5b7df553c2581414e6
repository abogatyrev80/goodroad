{"dependencies":[{"name":"expo-sqlite","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":38,"index":38}}],"key":"QiSBWdXsWfNLYLVy2O3EksR8vJg=","exportNames":["*"],"imports":1}},{"name":"expo-network","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":39},"end":{"line":2,"column":40,"index":79}}],"key":"1uj8I4G/JNBf3YRANaksFTH4dPs=","exportNames":["*"],"imports":1}},{"name":"@react-native-async-storage/async-storage","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":80},"end":{"line":3,"column":69,"index":149}}],"key":"0kSRlooyBOaYM9tlTtK91nq+uds=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopNamespace(e) {\n    if (e && e.__esModule) return e;\n    var n = {};\n    if (e) Object.keys(e).forEach(function (k) {\n      var d = Object.getOwnPropertyDescriptor(e, k);\n      Object.defineProperty(n, k, d.get ? d : {\n        enumerable: true,\n        get: function () {\n          return e[k];\n        }\n      });\n    });\n    n.default = e;\n    return n;\n  }\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"localDB\", {\n    enumerable: true,\n    get: function () {\n      return localDB;\n    }\n  });\n  var _expoSqlite = require(_dependencyMap[0], \"expo-sqlite\");\n  var SQLite = _interopNamespace(_expoSqlite);\n  var _expoNetwork = require(_dependencyMap[1], \"expo-network\");\n  var Network = _interopNamespace(_expoNetwork);\n  var _reactNativeAsyncStorageAsyncStorage = require(_dependencyMap[2], \"@react-native-async-storage/async-storage\");\n  var AsyncStorage = _interopDefault(_reactNativeAsyncStorageAsyncStorage);\n  // Типы для локальных данных\n\n  class LocalDatabaseManager {\n    db = null;\n    syncInProgress = false;\n    async initialize() {\n      try {\n        this.db = await SQLite.openDatabaseAsync('good_road.db');\n        await this.createTables();\n        console.log('✅ Local database initialized');\n      } catch (error) {\n        console.error('❌ Database initialization error:', error);\n        throw error;\n      }\n    }\n    async createTables() {\n      if (!this.db) throw new Error('Database not initialized');\n\n      // Таблица для данных датчиков (собранных пользователем)\n      await this.db.execAsync(`\n      CREATE TABLE IF NOT EXISTS sensor_data (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        server_id TEXT,\n        latitude REAL NOT NULL,\n        longitude REAL NOT NULL,\n        timestamp TEXT NOT NULL,\n        speed REAL DEFAULT 0,\n        accuracy REAL DEFAULT 0,\n        accelerometer_x REAL DEFAULT 0,\n        accelerometer_y REAL DEFAULT 0,\n        accelerometer_z REAL DEFAULT 0,\n        road_quality REAL DEFAULT 50,\n        is_synced INTEGER DEFAULT 0,\n        created_at TEXT NOT NULL\n      );\n    `);\n\n      // Таблица для предупреждений (скачанных с сервера)\n      await this.db.execAsync(`\n      CREATE TABLE IF NOT EXISTS warnings (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        server_id TEXT UNIQUE,\n        latitude REAL NOT NULL,\n        longitude REAL NOT NULL,\n        hazard_type TEXT NOT NULL,\n        severity TEXT NOT NULL,\n        description TEXT,\n        is_verified INTEGER DEFAULT 0,\n        region TEXT,\n        city TEXT,\n        country TEXT,\n        last_updated TEXT NOT NULL\n      );\n    `);\n\n      // Таблица для статуса синхронизации регионов\n      await this.db.execAsync(`\n      CREATE TABLE IF NOT EXISTS sync_regions (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        region_code TEXT UNIQUE,\n        region_name TEXT,\n        last_sync TEXT,\n        warning_count INTEGER DEFAULT 0\n      );\n    `);\n\n      // Индексы для быстрого поиска по координатам\n      await this.db.execAsync(`\n      CREATE INDEX IF NOT EXISTS idx_sensor_location \n      ON sensor_data(latitude, longitude);\n    `);\n      await this.db.execAsync(`\n      CREATE INDEX IF NOT EXISTS idx_warnings_location \n      ON warnings(latitude, longitude);\n    `);\n      console.log('✅ Database tables created');\n    }\n\n    // === SENSOR DATA MANAGEMENT ===\n    async saveSensorData(data) {\n      if (!this.db) throw new Error('Database not initialized');\n      const result = await this.db.runAsync(`\n      INSERT INTO sensor_data (\n        server_id, latitude, longitude, timestamp, speed, accuracy,\n        accelerometer_x, accelerometer_y, accelerometer_z, \n        road_quality, is_synced, created_at\n      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n    `, [data.serverId || null, data.latitude, data.longitude, data.timestamp, data.speed, data.accuracy, data.accelerometer.x, data.accelerometer.y, data.accelerometer.z, data.roadQuality, data.isSynced ? 1 : 0, new Date().toISOString()]);\n      console.log(`💾 Saved sensor data locally (ID: ${result.lastInsertRowId})`);\n      return result.lastInsertRowId;\n    }\n    async getUnsyncedSensorData() {\n      if (!this.db) throw new Error('Database not initialized');\n      const result = await this.db.getAllAsync(`\n      SELECT * FROM sensor_data WHERE is_synced = 0 ORDER BY created_at\n    `);\n      return result.map(row => ({\n        id: row.id,\n        serverId: row.server_id,\n        latitude: row.latitude,\n        longitude: row.longitude,\n        timestamp: row.timestamp,\n        speed: row.speed,\n        accuracy: row.accuracy,\n        accelerometer: {\n          x: row.accelerometer_x,\n          y: row.accelerometer_y,\n          z: row.accelerometer_z\n        },\n        roadQuality: row.road_quality,\n        isSynced: row.is_synced === 1,\n        createdAt: row.created_at\n      }));\n    }\n    async markSensorDataSynced(localIds, serverIds) {\n      if (!this.db || localIds.length === 0) return;\n      const placeholders = localIds.map(() => '?').join(',');\n      await this.db.runAsync(`\n      UPDATE sensor_data \n      SET is_synced = 1 ${serverIds ? ', server_id = ?' : ''}\n      WHERE id IN (${placeholders})\n    `, serverIds ? [...localIds, ...serverIds] : localIds);\n      console.log(`✅ Marked ${localIds.length} sensor data records as synced`);\n    }\n\n    // === WARNINGS MANAGEMENT ===\n    async saveWarnings(warnings) {\n      if (!this.db || warnings.length === 0) return;\n      const statement = await this.db.prepareAsync(`\n      INSERT OR REPLACE INTO warnings (\n        server_id, latitude, longitude, hazard_type, severity,\n        description, is_verified, region, city, country, last_updated\n      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n    `);\n      try {\n        for (const warning of warnings) {\n          await statement.executeAsync([warning.serverId || `local_${Date.now()}_${Math.random()}`, warning.latitude, warning.longitude, warning.hazardType, warning.severity, warning.description || '', warning.isVerified ? 1 : 0, warning.region || '', warning.city || '', warning.country || '', warning.lastUpdated]);\n        }\n        console.log(`💾 Saved ${warnings.length} warnings locally`);\n      } finally {\n        await statement.finalizeAsync();\n      }\n    }\n    async getNearbyWarnings(latitude, longitude, radiusKm = 1) {\n      if (!this.db) throw new Error('Database not initialized');\n\n      // Простое приближение для поиска в радиусе\n      const latRange = radiusKm / 111; // ~1 градус = 111 км\n      const lonRange = radiusKm / (111 * Math.cos(latitude * Math.PI / 180));\n      const result = await this.db.getAllAsync(`\n      SELECT * FROM warnings \n      WHERE latitude BETWEEN ? AND ? \n      AND longitude BETWEEN ? AND ?\n      AND is_verified = 1\n      ORDER BY \n        (latitude - ?) * (latitude - ?) + \n        (longitude - ?) * (longitude - ?)\n      LIMIT 50\n    `, [latitude - latRange, latitude + latRange, longitude - lonRange, longitude + lonRange, latitude, latitude, longitude, longitude]);\n      return result.map(row => ({\n        id: row.id,\n        serverId: row.server_id,\n        latitude: row.latitude,\n        longitude: row.longitude,\n        hazardType: row.hazard_type,\n        severity: row.severity,\n        description: row.description,\n        isVerified: row.is_verified === 1,\n        region: row.region,\n        city: row.city,\n        country: row.country,\n        lastUpdated: row.last_updated\n      }));\n    }\n\n    // === REGION MANAGEMENT ===\n    async updateRegionSyncStatus(regionCode, regionName, warningCount) {\n      if (!this.db) throw new Error('Database not initialized');\n      await this.db.runAsync(`\n      INSERT OR REPLACE INTO sync_regions (region_code, region_name, last_sync, warning_count)\n      VALUES (?, ?, ?, ?)\n    `, [regionCode, regionName, new Date().toISOString(), warningCount]);\n      console.log(`📍 Updated sync status for region: ${regionName} (${warningCount} warnings)`);\n    }\n    async getDownloadedRegions() {\n      if (!this.db) throw new Error('Database not initialized');\n      const result = await this.db.getAllAsync(`\n      SELECT * FROM sync_regions ORDER BY region_name\n    `);\n      return result.map(row => ({\n        code: row.region_code,\n        name: row.region_name,\n        lastSync: row.last_sync,\n        warningCount: row.warning_count\n      }));\n    }\n\n    // === SYNC STATUS ===\n    async getSyncStatus() {\n      const lastSyncTime = (await AsyncStorage.default.getItem('last_sync_time')) || 'Never';\n      const downloadedRegions = await this.getDownloadedRegions();\n      const unsyncedData = await this.getUnsyncedSensorData();\n      const networkState = await Network.getNetworkStateAsync();\n      return {\n        lastSyncTime,\n        pendingSensorData: unsyncedData.length,\n        downloadedRegions: downloadedRegions.map(r => r.name),\n        isOnline: networkState.isConnected || false\n      };\n    }\n\n    // === DATA CLEANUP ===\n    async cleanupOldData(daysOld = 30) {\n      if (!this.db) return;\n      const cutoffDate = new Date();\n      cutoffDate.setDate(cutoffDate.getDate() - daysOld);\n      const cutoffISO = cutoffDate.toISOString();\n\n      // Удаляем старые синхронизированные данные датчиков\n      const sensorResult = await this.db.runAsync(`\n      DELETE FROM sensor_data \n      WHERE is_synced = 1 AND created_at < ?\n    `, [cutoffISO]);\n\n      // Удаляем старые неверифицированные предупреждения\n      const warningResult = await this.db.runAsync(`\n      DELETE FROM warnings \n      WHERE is_verified = 0 AND last_updated < ?\n    `, [cutoffISO]);\n      console.log(`🧹 Cleanup: removed ${sensorResult.changes} old sensor records, ${warningResult.changes} old warnings`);\n    }\n    async getDatabaseStats() {\n      if (!this.db) return null;\n      const sensorCount = await this.db.getFirstAsync(`SELECT COUNT(*) as count FROM sensor_data`);\n      const warningCount = await this.db.getFirstAsync(`SELECT COUNT(*) as count FROM warnings`);\n      const unsyncedCount = await this.db.getFirstAsync(`SELECT COUNT(*) as count FROM sensor_data WHERE is_synced = 0`);\n      return {\n        totalSensorData: sensorCount.count,\n        totalWarnings: warningCount.count,\n        unsyncedData: unsyncedCount.count\n      };\n    }\n  }\n  const localDB = new LocalDatabaseManager();\n});","lineCount":283,"map":[[27,2,350,0,"Object"],[27,8,350,0],[27,9,350,0,"defineProperty"],[27,23,350,0],[27,24,350,0,"exports"],[27,31,350,0],[28,4,350,0,"enumerable"],[28,14,350,0],[29,4,350,0,"get"],[29,7,350,0],[29,18,350,0,"get"],[29,19,350,0],[30,6,350,0],[30,13,350,0,"localDB"],[30,20,350,0],[31,4,350,0],[32,2,350,0],[33,2,1,0],[33,6,1,0,"_expoSqlite"],[33,17,1,0],[33,20,1,0,"require"],[33,27,1,0],[33,28,1,0,"_dependencyMap"],[33,42,1,0],[34,2,1,0],[34,6,1,0,"SQLite"],[34,12,1,0],[34,15,1,0,"_interopNamespace"],[34,32,1,0],[34,33,1,0,"_expoSqlite"],[34,44,1,0],[35,2,2,0],[35,6,2,0,"_expoNetwork"],[35,18,2,0],[35,21,2,0,"require"],[35,28,2,0],[35,29,2,0,"_dependencyMap"],[35,43,2,0],[36,2,2,0],[36,6,2,0,"Network"],[36,13,2,0],[36,16,2,0,"_interopNamespace"],[36,33,2,0],[36,34,2,0,"_expoNetwork"],[36,46,2,0],[37,2,3,0],[37,6,3,0,"_reactNativeAsyncStorageAsyncStorage"],[37,42,3,0],[37,45,3,0,"require"],[37,52,3,0],[37,53,3,0,"_dependencyMap"],[37,67,3,0],[38,2,3,0],[38,6,3,0,"AsyncStorage"],[38,18,3,0],[38,21,3,0,"_interopDefault"],[38,36,3,0],[38,37,3,0,"_reactNativeAsyncStorageAsyncStorage"],[38,73,3,0],[39,2,5,0],[41,2,46,0],[41,8,46,6,"LocalDatabaseManager"],[41,28,46,26],[41,29,46,27],[42,4,47,10,"db"],[42,6,47,12],[42,9,47,45],[42,13,47,49],[43,4,48,10,"syncInProgress"],[43,18,48,24],[43,21,48,27],[43,26,48,32],[44,4,50,2],[44,10,50,8,"initialize"],[44,20,50,18,"initialize"],[44,21,50,18],[44,23,50,21],[45,6,51,4],[45,10,51,8],[46,8,52,6],[46,12,52,10],[46,13,52,11,"db"],[46,15,52,13],[46,18,52,16],[46,24,52,22,"SQLite"],[46,30,52,28],[46,31,52,29,"openDatabaseAsync"],[46,48,52,46],[46,49,52,47],[46,63,52,61],[46,64,52,62],[47,8,53,6],[47,14,53,12],[47,18,53,16],[47,19,53,17,"createTables"],[47,31,53,29],[47,32,53,30],[47,33,53,31],[48,8,54,6,"console"],[48,15,54,13],[48,16,54,14,"log"],[48,19,54,17],[48,20,54,18],[48,50,54,48],[48,51,54,49],[49,6,55,4],[49,7,55,5],[49,8,55,6],[49,15,55,13,"error"],[49,20,55,18],[49,22,55,20],[50,8,56,6,"console"],[50,15,56,13],[50,16,56,14,"error"],[50,21,56,19],[50,22,56,20],[50,56,56,54],[50,58,56,56,"error"],[50,63,56,61],[50,64,56,62],[51,8,57,6],[51,14,57,12,"error"],[51,19,57,17],[52,6,58,4],[53,4,59,2],[54,4,61,2],[54,10,61,16,"createTables"],[54,22,61,28,"createTables"],[54,23,61,28],[54,25,61,31],[55,6,62,4],[55,10,62,8],[55,11,62,9],[55,15,62,13],[55,16,62,14,"db"],[55,18,62,16],[55,20,62,18],[55,26,62,24],[55,30,62,28,"Error"],[55,35,62,33],[55,36,62,34],[55,62,62,60],[55,63,62,61],[57,6,64,4],[58,6,65,4],[58,12,65,10],[58,16,65,14],[58,17,65,15,"db"],[58,19,65,17],[58,20,65,18,"execAsync"],[58,29,65,27],[58,30,65,28],[59,0,66,0],[60,0,67,0],[61,0,68,0],[62,0,69,0],[63,0,70,0],[64,0,71,0],[65,0,72,0],[66,0,73,0],[67,0,74,0],[68,0,75,0],[69,0,76,0],[70,0,77,0],[71,0,78,0],[72,0,79,0],[73,0,80,0],[74,0,81,0],[74,5,81,5],[74,6,81,6],[76,6,83,4],[77,6,84,4],[77,12,84,10],[77,16,84,14],[77,17,84,15,"db"],[77,19,84,17],[77,20,84,18,"execAsync"],[77,29,84,27],[77,30,84,28],[78,0,85,0],[79,0,86,0],[80,0,87,0],[81,0,88,0],[82,0,89,0],[83,0,90,0],[84,0,91,0],[85,0,92,0],[86,0,93,0],[87,0,94,0],[88,0,95,0],[89,0,96,0],[90,0,97,0],[91,0,98,0],[92,0,99,0],[92,5,99,5],[92,6,99,6],[94,6,101,4],[95,6,102,4],[95,12,102,10],[95,16,102,14],[95,17,102,15,"db"],[95,19,102,17],[95,20,102,18,"execAsync"],[95,29,102,27],[95,30,102,28],[96,0,103,0],[97,0,104,0],[98,0,105,0],[99,0,106,0],[100,0,107,0],[101,0,108,0],[102,0,109,0],[103,0,110,0],[103,5,110,5],[103,6,110,6],[105,6,112,4],[106,6,113,4],[106,12,113,10],[106,16,113,14],[106,17,113,15,"db"],[106,19,113,17],[106,20,113,18,"execAsync"],[106,29,113,27],[106,30,113,28],[107,0,114,0],[108,0,115,0],[109,0,116,0],[109,5,116,5],[109,6,116,6],[110,6,118,4],[110,12,118,10],[110,16,118,14],[110,17,118,15,"db"],[110,19,118,17],[110,20,118,18,"execAsync"],[110,29,118,27],[110,30,118,28],[111,0,119,0],[112,0,120,0],[113,0,121,0],[113,5,121,5],[113,6,121,6],[114,6,123,4,"console"],[114,13,123,11],[114,14,123,12,"log"],[114,17,123,15],[114,18,123,16],[114,45,123,43],[114,46,123,44],[115,4,124,2],[117,4,126,2],[118,4,127,2],[118,10,127,8,"saveSensorData"],[118,24,127,22,"saveSensorData"],[118,25,127,23,"data"],[118,29,127,70],[118,31,127,89],[119,6,128,4],[119,10,128,8],[119,11,128,9],[119,15,128,13],[119,16,128,14,"db"],[119,18,128,16],[119,20,128,18],[119,26,128,24],[119,30,128,28,"Error"],[119,35,128,33],[119,36,128,34],[119,62,128,60],[119,63,128,61],[120,6,130,4],[120,12,130,10,"result"],[120,18,130,16],[120,21,130,19],[120,27,130,25],[120,31,130,29],[120,32,130,30,"db"],[120,34,130,32],[120,35,130,33,"runAsync"],[120,43,130,41],[120,44,130,42],[121,0,131,0],[122,0,132,0],[123,0,133,0],[124,0,134,0],[125,0,135,0],[126,0,136,0],[126,5,136,5],[126,7,136,7],[126,8,137,6,"data"],[126,12,137,10],[126,13,137,11,"serverId"],[126,21,137,19],[126,25,137,23],[126,29,137,27],[126,31,138,6,"data"],[126,35,138,10],[126,36,138,11,"latitude"],[126,44,138,19],[126,46,139,6,"data"],[126,50,139,10],[126,51,139,11,"longitude"],[126,60,139,20],[126,62,140,6,"data"],[126,66,140,10],[126,67,140,11,"timestamp"],[126,76,140,20],[126,78,141,6,"data"],[126,82,141,10],[126,83,141,11,"speed"],[126,88,141,16],[126,90,142,6,"data"],[126,94,142,10],[126,95,142,11,"accuracy"],[126,103,142,19],[126,105,143,6,"data"],[126,109,143,10],[126,110,143,11,"accelerometer"],[126,123,143,24],[126,124,143,25,"x"],[126,125,143,26],[126,127,144,6,"data"],[126,131,144,10],[126,132,144,11,"accelerometer"],[126,145,144,24],[126,146,144,25,"y"],[126,147,144,26],[126,149,145,6,"data"],[126,153,145,10],[126,154,145,11,"accelerometer"],[126,167,145,24],[126,168,145,25,"z"],[126,169,145,26],[126,171,146,6,"data"],[126,175,146,10],[126,176,146,11,"roadQuality"],[126,187,146,22],[126,189,147,6,"data"],[126,193,147,10],[126,194,147,11,"isSynced"],[126,202,147,19],[126,205,147,22],[126,206,147,23],[126,209,147,26],[126,210,147,27],[126,212,148,6],[126,216,148,10,"Date"],[126,220,148,14],[126,221,148,15],[126,222,148,16],[126,223,148,17,"toISOString"],[126,234,148,28],[126,235,148,29],[126,236,148,30],[126,237,149,5],[126,238,149,6],[127,6,151,4,"console"],[127,13,151,11],[127,14,151,12,"log"],[127,17,151,15],[127,18,151,16],[127,55,151,53,"result"],[127,61,151,59],[127,62,151,60,"lastInsertRowId"],[127,77,151,75],[127,80,151,78],[127,81,151,79],[128,6,152,4],[128,13,152,11,"result"],[128,19,152,17],[128,20,152,18,"lastInsertRowId"],[128,35,152,33],[129,4,153,2],[130,4,155,2],[130,10,155,8,"getUnsyncedSensorData"],[130,31,155,29,"getUnsyncedSensorData"],[130,32,155,29],[130,34,155,60],[131,6,156,4],[131,10,156,8],[131,11,156,9],[131,15,156,13],[131,16,156,14,"db"],[131,18,156,16],[131,20,156,18],[131,26,156,24],[131,30,156,28,"Error"],[131,35,156,33],[131,36,156,34],[131,62,156,60],[131,63,156,61],[132,6,158,4],[132,12,158,10,"result"],[132,18,158,16],[132,21,158,19],[132,27,158,25],[132,31,158,29],[132,32,158,30,"db"],[132,34,158,32],[132,35,158,33,"getAllAsync"],[132,46,158,44],[132,47,158,45],[133,0,159,0],[134,0,160,0],[134,5,160,5],[134,6,160,15],[135,6,162,4],[135,13,162,11,"result"],[135,19,162,17],[135,20,162,18,"map"],[135,23,162,21],[135,24,162,22,"row"],[135,27,162,25],[135,32,162,30],[136,8,163,6,"id"],[136,10,163,8],[136,12,163,10,"row"],[136,15,163,13],[136,16,163,14,"id"],[136,18,163,16],[137,8,164,6,"serverId"],[137,16,164,14],[137,18,164,16,"row"],[137,21,164,19],[137,22,164,20,"server_id"],[137,31,164,29],[138,8,165,6,"latitude"],[138,16,165,14],[138,18,165,16,"row"],[138,21,165,19],[138,22,165,20,"latitude"],[138,30,165,28],[139,8,166,6,"longitude"],[139,17,166,15],[139,19,166,17,"row"],[139,22,166,20],[139,23,166,21,"longitude"],[139,32,166,30],[140,8,167,6,"timestamp"],[140,17,167,15],[140,19,167,17,"row"],[140,22,167,20],[140,23,167,21,"timestamp"],[140,32,167,30],[141,8,168,6,"speed"],[141,13,168,11],[141,15,168,13,"row"],[141,18,168,16],[141,19,168,17,"speed"],[141,24,168,22],[142,8,169,6,"accuracy"],[142,16,169,14],[142,18,169,16,"row"],[142,21,169,19],[142,22,169,20,"accuracy"],[142,30,169,28],[143,8,170,6,"accelerometer"],[143,21,170,19],[143,23,170,21],[144,10,171,8,"x"],[144,11,171,9],[144,13,171,11,"row"],[144,16,171,14],[144,17,171,15,"accelerometer_x"],[144,32,171,30],[145,10,172,8,"y"],[145,11,172,9],[145,13,172,11,"row"],[145,16,172,14],[145,17,172,15,"accelerometer_y"],[145,32,172,30],[146,10,173,8,"z"],[146,11,173,9],[146,13,173,11,"row"],[146,16,173,14],[146,17,173,15,"accelerometer_z"],[147,8,174,6],[147,9,174,7],[148,8,175,6,"roadQuality"],[148,19,175,17],[148,21,175,19,"row"],[148,24,175,22],[148,25,175,23,"road_quality"],[148,37,175,35],[149,8,176,6,"isSynced"],[149,16,176,14],[149,18,176,16,"row"],[149,21,176,19],[149,22,176,20,"is_synced"],[149,31,176,29],[149,36,176,34],[149,37,176,35],[150,8,177,6,"createdAt"],[150,17,177,15],[150,19,177,17,"row"],[150,22,177,20],[150,23,177,21,"created_at"],[151,6,178,4],[151,7,178,5],[151,8,178,6],[151,9,178,7],[152,4,179,2],[153,4,181,2],[153,10,181,8,"markSensorDataSynced"],[153,30,181,28,"markSensorDataSynced"],[153,31,181,29,"localIds"],[153,39,181,47],[153,41,181,49,"serverIds"],[153,50,181,69],[153,52,181,71],[154,6,182,4],[154,10,182,8],[154,11,182,9],[154,15,182,13],[154,16,182,14,"db"],[154,18,182,16],[154,22,182,20,"localIds"],[154,30,182,28],[154,31,182,29,"length"],[154,37,182,35],[154,42,182,40],[154,43,182,41],[154,45,182,43],[155,6,184,4],[155,12,184,10,"placeholders"],[155,24,184,22],[155,27,184,25,"localIds"],[155,35,184,33],[155,36,184,34,"map"],[155,39,184,37],[155,40,184,38],[155,46,184,44],[155,49,184,47],[155,50,184,48],[155,51,184,49,"join"],[155,55,184,53],[155,56,184,54],[155,59,184,57],[155,60,184,58],[156,6,186,4],[156,12,186,10],[156,16,186,14],[156,17,186,15,"db"],[156,19,186,17],[156,20,186,18,"runAsync"],[156,28,186,26],[156,29,186,27],[157,0,187,0],[158,0,188,0],[158,26,188,26,"serverIds"],[158,35,188,35],[158,38,188,38],[158,55,188,55],[158,58,188,58],[158,60,188,60],[159,0,189,0],[159,21,189,21,"placeholders"],[159,33,189,33],[160,0,190,0],[160,5,190,5],[160,7,190,7,"serverIds"],[160,16,190,16],[160,19,190,19],[160,20,190,20],[160,23,190,23,"localIds"],[160,31,190,31],[160,33,190,33],[160,36,190,36,"serverIds"],[160,45,190,45],[160,46,190,46],[160,49,190,49,"localIds"],[160,57,190,57],[160,58,190,58],[161,6,192,4,"console"],[161,13,192,11],[161,14,192,12,"log"],[161,17,192,15],[161,18,192,16],[161,30,192,28,"localIds"],[161,38,192,36],[161,39,192,37,"length"],[161,45,192,43],[161,77,192,75],[161,78,192,76],[162,4,193,2],[164,4,195,2],[165,4,196,2],[165,10,196,8,"saveWarnings"],[165,22,196,20,"saveWarnings"],[165,23,196,21,"warnings"],[165,31,196,45],[165,33,196,47],[166,6,197,4],[166,10,197,8],[166,11,197,9],[166,15,197,13],[166,16,197,14,"db"],[166,18,197,16],[166,22,197,20,"warnings"],[166,30,197,28],[166,31,197,29,"length"],[166,37,197,35],[166,42,197,40],[166,43,197,41],[166,45,197,43],[167,6,199,4],[167,12,199,10,"statement"],[167,21,199,19],[167,24,199,22],[167,30,199,28],[167,34,199,32],[167,35,199,33,"db"],[167,37,199,35],[167,38,199,36,"prepareAsync"],[167,50,199,48],[167,51,199,49],[168,0,200,0],[169,0,201,0],[170,0,202,0],[171,0,203,0],[172,0,204,0],[172,5,204,5],[172,6,204,6],[173,6,206,4],[173,10,206,8],[174,8,207,6],[174,13,207,11],[174,19,207,17,"warning"],[174,26,207,24],[174,30,207,28,"warnings"],[174,38,207,36],[174,40,207,38],[175,10,208,8],[175,16,208,14,"statement"],[175,25,208,23],[175,26,208,24,"executeAsync"],[175,38,208,36],[175,39,208,37],[175,40,209,10,"warning"],[175,47,209,17],[175,48,209,18,"serverId"],[175,56,209,26],[175,60,209,30],[175,69,209,39,"Date"],[175,73,209,43],[175,74,209,44,"now"],[175,77,209,47],[175,78,209,48],[175,79,209,49],[175,83,209,53,"Math"],[175,87,209,57],[175,88,209,58,"random"],[175,94,209,64],[175,95,209,65],[175,96,209,66],[175,98,209,68],[175,100,210,10,"warning"],[175,107,210,17],[175,108,210,18,"latitude"],[175,116,210,26],[175,118,211,10,"warning"],[175,125,211,17],[175,126,211,18,"longitude"],[175,135,211,27],[175,137,212,10,"warning"],[175,144,212,17],[175,145,212,18,"hazardType"],[175,155,212,28],[175,157,213,10,"warning"],[175,164,213,17],[175,165,213,18,"severity"],[175,173,213,26],[175,175,214,10,"warning"],[175,182,214,17],[175,183,214,18,"description"],[175,194,214,29],[175,198,214,33],[175,200,214,35],[175,202,215,10,"warning"],[175,209,215,17],[175,210,215,18,"isVerified"],[175,220,215,28],[175,223,215,31],[175,224,215,32],[175,227,215,35],[175,228,215,36],[175,230,216,10,"warning"],[175,237,216,17],[175,238,216,18,"region"],[175,244,216,24],[175,248,216,28],[175,250,216,30],[175,252,217,10,"warning"],[175,259,217,17],[175,260,217,18,"city"],[175,264,217,22],[175,268,217,26],[175,270,217,28],[175,272,218,10,"warning"],[175,279,218,17],[175,280,218,18,"country"],[175,287,218,25],[175,291,218,29],[175,293,218,31],[175,295,219,10,"warning"],[175,302,219,17],[175,303,219,18,"lastUpdated"],[175,314,219,29],[175,315,220,9],[175,316,220,10],[176,8,221,6],[177,8,223,6,"console"],[177,15,223,13],[177,16,223,14,"log"],[177,19,223,17],[177,20,223,18],[177,32,223,30,"warnings"],[177,40,223,38],[177,41,223,39,"length"],[177,47,223,45],[177,66,223,64],[177,67,223,65],[178,6,224,4],[178,7,224,5],[178,16,224,14],[179,8,225,6],[179,14,225,12,"statement"],[179,23,225,21],[179,24,225,22,"finalizeAsync"],[179,37,225,35],[179,38,225,36],[179,39,225,37],[180,6,226,4],[181,4,227,2],[182,4,229,2],[182,10,229,8,"getNearbyWarnings"],[182,27,229,25,"getNearbyWarnings"],[182,28,229,26,"latitude"],[182,36,229,42],[182,38,229,44,"longitude"],[182,47,229,61],[182,49,229,63,"radiusKm"],[182,57,229,79],[182,60,229,82],[182,61,229,83],[182,63,229,110],[183,6,230,4],[183,10,230,8],[183,11,230,9],[183,15,230,13],[183,16,230,14,"db"],[183,18,230,16],[183,20,230,18],[183,26,230,24],[183,30,230,28,"Error"],[183,35,230,33],[183,36,230,34],[183,62,230,60],[183,63,230,61],[185,6,232,4],[186,6,233,4],[186,12,233,10,"latRange"],[186,20,233,18],[186,23,233,21,"radiusKm"],[186,31,233,29],[186,34,233,32],[186,37,233,35],[186,38,233,36],[186,39,233,37],[187,6,234,4],[187,12,234,10,"lonRange"],[187,20,234,18],[187,23,234,21,"radiusKm"],[187,31,234,29],[187,35,234,33],[187,38,234,36],[187,41,234,39,"Math"],[187,45,234,43],[187,46,234,44,"cos"],[187,49,234,47],[187,50,234,48,"latitude"],[187,58,234,56],[187,61,234,59,"Math"],[187,65,234,63],[187,66,234,64,"PI"],[187,68,234,66],[187,71,234,69],[187,74,234,72],[187,75,234,73],[187,76,234,74],[188,6,236,4],[188,12,236,10,"result"],[188,18,236,16],[188,21,236,19],[188,27,236,25],[188,31,236,29],[188,32,236,30,"db"],[188,34,236,32],[188,35,236,33,"getAllAsync"],[188,46,236,44],[188,47,236,45],[189,0,237,0],[190,0,238,0],[191,0,239,0],[192,0,240,0],[193,0,241,0],[194,0,242,0],[195,0,243,0],[196,0,244,0],[197,0,245,0],[197,5,245,5],[197,7,245,7],[197,8,246,6,"latitude"],[197,16,246,14],[197,19,246,17,"latRange"],[197,27,246,25],[197,29,247,6,"latitude"],[197,37,247,14],[197,40,247,17,"latRange"],[197,48,247,25],[197,50,248,6,"longitude"],[197,59,248,15],[197,62,248,18,"lonRange"],[197,70,248,26],[197,72,249,6,"longitude"],[197,81,249,15],[197,84,249,18,"lonRange"],[197,92,249,26],[197,94,250,6,"latitude"],[197,102,250,14],[197,104,250,16,"latitude"],[197,112,250,24],[197,114,251,6,"longitude"],[197,123,251,15],[197,125,251,17,"longitude"],[197,134,251,26],[197,135,252,5],[197,136,252,15],[198,6,254,4],[198,13,254,11,"result"],[198,19,254,17],[198,20,254,18,"map"],[198,23,254,21],[198,24,254,22,"row"],[198,27,254,25],[198,32,254,30],[199,8,255,6,"id"],[199,10,255,8],[199,12,255,10,"row"],[199,15,255,13],[199,16,255,14,"id"],[199,18,255,16],[200,8,256,6,"serverId"],[200,16,256,14],[200,18,256,16,"row"],[200,21,256,19],[200,22,256,20,"server_id"],[200,31,256,29],[201,8,257,6,"latitude"],[201,16,257,14],[201,18,257,16,"row"],[201,21,257,19],[201,22,257,20,"latitude"],[201,30,257,28],[202,8,258,6,"longitude"],[202,17,258,15],[202,19,258,17,"row"],[202,22,258,20],[202,23,258,21,"longitude"],[202,32,258,30],[203,8,259,6,"hazardType"],[203,18,259,16],[203,20,259,18,"row"],[203,23,259,21],[203,24,259,22,"hazard_type"],[203,35,259,33],[204,8,260,6,"severity"],[204,16,260,14],[204,18,260,16,"row"],[204,21,260,19],[204,22,260,20,"severity"],[204,30,260,70],[205,8,261,6,"description"],[205,19,261,17],[205,21,261,19,"row"],[205,24,261,22],[205,25,261,23,"description"],[205,36,261,34],[206,8,262,6,"isVerified"],[206,18,262,16],[206,20,262,18,"row"],[206,23,262,21],[206,24,262,22,"is_verified"],[206,35,262,33],[206,40,262,38],[206,41,262,39],[207,8,263,6,"region"],[207,14,263,12],[207,16,263,14,"row"],[207,19,263,17],[207,20,263,18,"region"],[207,26,263,24],[208,8,264,6,"city"],[208,12,264,10],[208,14,264,12,"row"],[208,17,264,15],[208,18,264,16,"city"],[208,22,264,20],[209,8,265,6,"country"],[209,15,265,13],[209,17,265,15,"row"],[209,20,265,18],[209,21,265,19,"country"],[209,28,265,26],[210,8,266,6,"lastUpdated"],[210,19,266,17],[210,21,266,19,"row"],[210,24,266,22],[210,25,266,23,"last_updated"],[211,6,267,4],[211,7,267,5],[211,8,267,6],[211,9,267,7],[212,4,268,2],[214,4,270,2],[215,4,271,2],[215,10,271,8,"updateRegionSyncStatus"],[215,32,271,30,"updateRegionSyncStatus"],[215,33,271,31,"regionCode"],[215,43,271,49],[215,45,271,51,"regionName"],[215,55,271,69],[215,57,271,71,"warningCount"],[215,69,271,91],[215,71,271,93],[216,6,272,4],[216,10,272,8],[216,11,272,9],[216,15,272,13],[216,16,272,14,"db"],[216,18,272,16],[216,20,272,18],[216,26,272,24],[216,30,272,28,"Error"],[216,35,272,33],[216,36,272,34],[216,62,272,60],[216,63,272,61],[217,6,274,4],[217,12,274,10],[217,16,274,14],[217,17,274,15,"db"],[217,19,274,17],[217,20,274,18,"runAsync"],[217,28,274,26],[217,29,274,27],[218,0,275,0],[219,0,276,0],[220,0,277,0],[220,5,277,5],[220,7,277,7],[220,8,277,8,"regionCode"],[220,18,277,18],[220,20,277,20,"regionName"],[220,30,277,30],[220,32,277,32],[220,36,277,36,"Date"],[220,40,277,40],[220,41,277,41],[220,42,277,42],[220,43,277,43,"toISOString"],[220,54,277,54],[220,55,277,55],[220,56,277,56],[220,58,277,58,"warningCount"],[220,70,277,70],[220,71,277,71],[220,72,277,72],[221,6,279,4,"console"],[221,13,279,11],[221,14,279,12,"log"],[221,17,279,15],[221,18,279,16],[221,56,279,54,"regionName"],[221,66,279,64],[221,71,279,69,"warningCount"],[221,83,279,81],[221,95,279,93],[221,96,279,94],[222,4,280,2],[223,4,282,2],[223,10,282,8,"getDownloadedRegions"],[223,30,282,28,"getDownloadedRegions"],[223,31,282,28],[223,33,282,117],[224,6,283,4],[224,10,283,8],[224,11,283,9],[224,15,283,13],[224,16,283,14,"db"],[224,18,283,16],[224,20,283,18],[224,26,283,24],[224,30,283,28,"Error"],[224,35,283,33],[224,36,283,34],[224,62,283,60],[224,63,283,61],[225,6,285,4],[225,12,285,10,"result"],[225,18,285,16],[225,21,285,19],[225,27,285,25],[225,31,285,29],[225,32,285,30,"db"],[225,34,285,32],[225,35,285,33,"getAllAsync"],[225,46,285,44],[225,47,285,45],[226,0,286,0],[227,0,287,0],[227,5,287,5],[227,6,287,15],[228,6,289,4],[228,13,289,11,"result"],[228,19,289,17],[228,20,289,18,"map"],[228,23,289,21],[228,24,289,22,"row"],[228,27,289,25],[228,32,289,30],[229,8,290,6,"code"],[229,12,290,10],[229,14,290,12,"row"],[229,17,290,15],[229,18,290,16,"region_code"],[229,29,290,27],[230,8,291,6,"name"],[230,12,291,10],[230,14,291,12,"row"],[230,17,291,15],[230,18,291,16,"region_name"],[230,29,291,27],[231,8,292,6,"lastSync"],[231,16,292,14],[231,18,292,16,"row"],[231,21,292,19],[231,22,292,20,"last_sync"],[231,31,292,29],[232,8,293,6,"warningCount"],[232,20,293,18],[232,22,293,20,"row"],[232,25,293,23],[232,26,293,24,"warning_count"],[233,6,294,4],[233,7,294,5],[233,8,294,6],[233,9,294,7],[234,4,295,2],[236,4,297,2],[237,4,298,2],[237,10,298,8,"getSyncStatus"],[237,23,298,21,"getSyncStatus"],[237,24,298,21],[237,26,298,45],[238,6,299,4],[238,12,299,10,"lastSyncTime"],[238,24,299,22],[238,27,299,25],[238,34,299,31,"AsyncStorage"],[238,46,299,43],[238,47,299,43,"default"],[238,54,299,43],[238,55,299,44,"getItem"],[238,62,299,51],[238,63,299,52],[238,79,299,68],[238,80,299,69],[238,85,299,73],[238,92,299,80],[239,6,300,4],[239,12,300,10,"downloadedRegions"],[239,29,300,27],[239,32,300,30],[239,38,300,36],[239,42,300,40],[239,43,300,41,"getDownloadedRegions"],[239,63,300,61],[239,64,300,62],[239,65,300,63],[240,6,301,4],[240,12,301,10,"unsyncedData"],[240,24,301,22],[240,27,301,25],[240,33,301,31],[240,37,301,35],[240,38,301,36,"getUnsyncedSensorData"],[240,59,301,57],[240,60,301,58],[240,61,301,59],[241,6,302,4],[241,12,302,10,"networkState"],[241,24,302,22],[241,27,302,25],[241,33,302,31,"Network"],[241,40,302,38],[241,41,302,39,"getNetworkStateAsync"],[241,61,302,59],[241,62,302,60],[241,63,302,61],[242,6,304,4],[242,13,304,11],[243,8,305,6,"lastSyncTime"],[243,20,305,18],[244,8,306,6,"pendingSensorData"],[244,25,306,23],[244,27,306,25,"unsyncedData"],[244,39,306,37],[244,40,306,38,"length"],[244,46,306,44],[245,8,307,6,"downloadedRegions"],[245,25,307,23],[245,27,307,25,"downloadedRegions"],[245,44,307,42],[245,45,307,43,"map"],[245,48,307,46],[245,49,307,47,"r"],[245,50,307,48],[245,54,307,52,"r"],[245,55,307,53],[245,56,307,54,"name"],[245,60,307,58],[245,61,307,59],[246,8,308,6,"isOnline"],[246,16,308,14],[246,18,308,16,"networkState"],[246,30,308,28],[246,31,308,29,"isConnected"],[246,42,308,40],[246,46,308,44],[247,6,309,4],[247,7,309,5],[248,4,310,2],[250,4,312,2],[251,4,313,2],[251,10,313,8,"cleanupOldData"],[251,24,313,22,"cleanupOldData"],[251,25,313,23,"daysOld"],[251,32,313,38],[251,35,313,41],[251,37,313,43],[251,39,313,45],[252,6,314,4],[252,10,314,8],[252,11,314,9],[252,15,314,13],[252,16,314,14,"db"],[252,18,314,16],[252,20,314,18],[253,6,316,4],[253,12,316,10,"cutoffDate"],[253,22,316,20],[253,25,316,23],[253,29,316,27,"Date"],[253,33,316,31],[253,34,316,32],[253,35,316,33],[254,6,317,4,"cutoffDate"],[254,16,317,14],[254,17,317,15,"setDate"],[254,24,317,22],[254,25,317,23,"cutoffDate"],[254,35,317,33],[254,36,317,34,"getDate"],[254,43,317,41],[254,44,317,42],[254,45,317,43],[254,48,317,46,"daysOld"],[254,55,317,53],[254,56,317,54],[255,6,318,4],[255,12,318,10,"cutoffISO"],[255,21,318,19],[255,24,318,22,"cutoffDate"],[255,34,318,32],[255,35,318,33,"toISOString"],[255,46,318,44],[255,47,318,45],[255,48,318,46],[257,6,320,4],[258,6,321,4],[258,12,321,10,"sensorResult"],[258,24,321,22],[258,27,321,25],[258,33,321,31],[258,37,321,35],[258,38,321,36,"db"],[258,40,321,38],[258,41,321,39,"runAsync"],[258,49,321,47],[258,50,321,48],[259,0,322,0],[260,0,323,0],[261,0,324,0],[261,5,324,5],[261,7,324,7],[261,8,324,8,"cutoffISO"],[261,17,324,17],[261,18,324,18],[261,19,324,19],[263,6,326,4],[264,6,327,4],[264,12,327,10,"warningResult"],[264,25,327,23],[264,28,327,26],[264,34,327,32],[264,38,327,36],[264,39,327,37,"db"],[264,41,327,39],[264,42,327,40,"runAsync"],[264,50,327,48],[264,51,327,49],[265,0,328,0],[266,0,329,0],[267,0,330,0],[267,5,330,5],[267,7,330,7],[267,8,330,8,"cutoffISO"],[267,17,330,17],[267,18,330,18],[267,19,330,19],[268,6,332,4,"console"],[268,13,332,11],[268,14,332,12,"log"],[268,17,332,15],[268,18,332,16],[268,41,332,39,"sensorResult"],[268,53,332,51],[268,54,332,52,"changes"],[268,61,332,59],[268,85,332,83,"warningResult"],[268,98,332,96],[268,99,332,97,"changes"],[268,106,332,104],[268,121,332,119],[268,122,332,120],[269,4,333,2],[270,4,335,2],[270,10,335,8,"getDatabaseStats"],[270,26,335,24,"getDatabaseStats"],[270,27,335,24],[270,29,335,27],[271,6,336,4],[271,10,336,8],[271,11,336,9],[271,15,336,13],[271,16,336,14,"db"],[271,18,336,16],[271,20,336,18],[271,27,336,25],[271,31,336,29],[272,6,338,4],[272,12,338,10,"sensorCount"],[272,23,338,21],[272,26,338,24],[272,32,338,30],[272,36,338,34],[272,37,338,35,"db"],[272,39,338,37],[272,40,338,38,"getFirstAsync"],[272,53,338,51],[272,54,338,52],[272,97,338,95],[272,98,338,115],[273,6,339,4],[273,12,339,10,"warningCount"],[273,24,339,22],[273,27,339,25],[273,33,339,31],[273,37,339,35],[273,38,339,36,"db"],[273,40,339,38],[273,41,339,39,"getFirstAsync"],[273,54,339,52],[273,55,339,53],[273,95,339,93],[273,96,339,113],[274,6,340,4],[274,12,340,10,"unsyncedCount"],[274,25,340,23],[274,28,340,26],[274,34,340,32],[274,38,340,36],[274,39,340,37,"db"],[274,41,340,39],[274,42,340,40,"getFirstAsync"],[274,55,340,53],[274,56,340,54],[274,119,340,117],[274,120,340,137],[275,6,342,4],[275,13,342,11],[276,8,343,6,"totalSensorData"],[276,23,343,21],[276,25,343,23,"sensorCount"],[276,36,343,34],[276,37,343,35,"count"],[276,42,343,40],[277,8,344,6,"totalWarnings"],[277,21,344,19],[277,23,344,21,"warningCount"],[277,35,344,33],[277,36,344,34,"count"],[277,41,344,39],[278,8,345,6,"unsyncedData"],[278,20,345,18],[278,22,345,20,"unsyncedCount"],[278,35,345,33],[278,36,345,34,"count"],[279,6,346,4],[279,7,346,5],[280,4,347,2],[281,2,348,0],[282,2,350,7],[282,8,350,13,"localDB"],[282,15,350,20],[282,18,350,23],[282,22,350,27,"LocalDatabaseManager"],[282,42,350,47],[282,43,350,48],[282,44,350,49],[283,0,350,50],[283,3]],"functionMap":{"names":["<global>","LocalDatabaseManager","LocalDatabaseManager#initialize","LocalDatabaseManager#createTables","LocalDatabaseManager#saveSensorData","LocalDatabaseManager#getUnsyncedSensorData","result.map$argument_0","LocalDatabaseManager#markSensorDataSynced","localIds.map$argument_0","LocalDatabaseManager#saveWarnings","LocalDatabaseManager#getNearbyWarnings","LocalDatabaseManager#updateRegionSyncStatus","LocalDatabaseManager#getDownloadedRegions","LocalDatabaseManager#getSyncStatus","downloadedRegions.map$argument_0","LocalDatabaseManager#cleanupOldData","LocalDatabaseManager#getDatabaseStats"],"mappings":"AAA;AC6C;ECI;GDS;EEE;GF+D;EGG;GH0B;EIE;sBCO;MDgB;GJC;EME;sCCG,SD;GNS;EQG;GR+B;ESE;sBJyB;MIa;GTC;EUG;GVS;EWE;sBNO;MMK;GXC;EYG;+CCS,WD;GZG;EcG;GdoB;EeE;GfY;CDC"},"hasCjsExports":false},"type":"js/module"}]}