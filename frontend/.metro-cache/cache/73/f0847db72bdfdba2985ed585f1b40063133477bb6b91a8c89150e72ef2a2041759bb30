{"dependencies":[{"name":"expo-modules-core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":56,"index":56}}],"key":"fU8WLIPqoAGygnPbZ/QJiQQfXEY=","exportNames":["*"],"imports":1}},{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":57},"end":{"line":2,"column":44,"index":101}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8=","exportNames":["*"],"imports":1}},{"name":"./ExpoNetwork","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":102},"end":{"line":3,"column":40,"index":142}}],"key":"Yqddhm5j9b01inHghA+b7Za0zms=","exportNames":["*"],"imports":1}},{"name":"./Network.types","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":143},"end":{"line":4,"column":51,"index":194}}],"key":"GiPLcUg9tZbd6VOtWB0JLN4tfy8=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"NetworkStateType\", {\n    enumerable: true,\n    get: function () {\n      return _NetworkTypes.NetworkStateType;\n    }\n  });\n  exports.getNetworkStateAsync = getNetworkStateAsync;\n  exports.getIpAddressAsync = getIpAddressAsync;\n  exports.isAirplaneModeEnabledAsync = isAirplaneModeEnabledAsync;\n  exports.addNetworkStateListener = addNetworkStateListener;\n  exports.useNetworkState = useNetworkState;\n  var _expoModulesCore = require(_dependencyMap[0], \"expo-modules-core\");\n  var _react = require(_dependencyMap[1], \"react\");\n  var _ExpoNetwork = require(_dependencyMap[2], \"./ExpoNetwork\");\n  var ExpoNetwork = _interopDefault(_ExpoNetwork);\n  var _NetworkTypes = require(_dependencyMap[3], \"./Network.types\");\n  const onNetworkStateEventName = 'onNetworkStateChanged';\n  // @needsAudit\n  /**\n   * Gets the device's current network connection state.\n   *\n   * On web, `navigator.connection.type` is not available on browsers. So if there is an active\n   * network connection, the field `type` returns `NetworkStateType.UNKNOWN`. Otherwise, it returns\n   * `NetworkStateType.NONE`.\n   * @return A `Promise` that fulfils with a `NetworkState` object.\n   *\n   * @example\n   * ```ts\n   * await Network.getNetworkStateAsync();\n   * // {\n   * //   type: NetworkStateType.CELLULAR,\n   * //   isConnected: true,\n   * //   isInternetReachable: true,\n   * // }\n   * ```\n   */\n  async function getNetworkStateAsync() {\n    if (!ExpoNetwork.default.getNetworkStateAsync) {\n      throw new _expoModulesCore.UnavailabilityError('expo-network', 'getNetworkStateAsync');\n    }\n    return await ExpoNetwork.default.getNetworkStateAsync();\n  }\n  // @needsAudit\n  /**\n   * Gets the device's current IPv4 address. Returns `0.0.0.0` if the IP address could not be retrieved.\n   *\n   * On web, this method uses the third-party [`ipify service`](https://www.ipify.org/) to get the\n   * public IP address of the current device.\n   * @return A `Promise` that fulfils with a `string` of the current IP address of the device's main\n   * network interface. Can only be IPv4 address.\n   *\n   * @example\n   * ```ts\n   * await Network.getIpAddressAsync();\n   * // \"92.168.32.44\"\n   * ```\n   */\n  async function getIpAddressAsync() {\n    if (!ExpoNetwork.default.getIpAddressAsync) {\n      throw new _expoModulesCore.UnavailabilityError('expo-network', 'getIpAddressAsync');\n    }\n    return await ExpoNetwork.default.getIpAddressAsync();\n  }\n  // @needsAudit\n  /**\n   * Tells if the device is in airplane mode.\n   * @return Returns a `Promise` that fulfils with a `boolean` value for whether the device is in\n   * airplane mode or not.\n   * @platform android\n   *\n   * @example\n   * ```ts\n   * await Network.isAirplaneModeEnabledAsync();\n   * // false\n   * ```\n   */\n  async function isAirplaneModeEnabledAsync() {\n    if (!ExpoNetwork.default.isAirplaneModeEnabledAsync) {\n      throw new _expoModulesCore.UnavailabilityError('expo-network', 'isAirplaneModeEnabledAsync');\n    }\n    return await ExpoNetwork.default.isAirplaneModeEnabledAsync();\n  }\n  /**\n   * Adds a listener that will fire whenever the network state changes.\n   *\n   * @param listener Callback to execute when the network state changes. The callback is provided with\n   * a single argument that is an object containing information about the network state.\n   *\n   * @example\n   * ```ts\n   * const subscription = addNetworkStateListener(({ type, isConnected, isInternetReachable }) => {\n   *   console.log(`Network type: ${type}, Connected: ${isConnected}, Internet Reachable: ${isInternetReachable}`);\n   * });\n   * ```\n   *\n   * @returns A subscription object with a remove function to unregister the listener.\n   */\n  function addNetworkStateListener(listener) {\n    return ExpoNetwork.default.addListener(onNetworkStateEventName, listener);\n  }\n  // @needsAudit\n  /**\n   * Returns the current network state of the device. This method\n   * initiates a listener for network state changes and cleans up before unmounting.\n   *\n   * @example\n   * ```ts\n   * const networkState = useNetworkState();\n   * console.log(`Current network type: ${networkState.type}`);\n   * ```\n   *\n   * @return The current network state of the device, including connectivity and type.\n   */\n  function useNetworkState() {\n    const [networkState, setNetworkState] = (0, _react.useState)({});\n    (0, _react.useEffect)(() => {\n      getNetworkStateAsync().then(setNetworkState);\n      const listener = addNetworkStateListener(networkState => setNetworkState(networkState));\n      return () => listener.remove();\n    }, []);\n    return networkState;\n  }\n});","lineCount":134,"map":[[12,2,5,0,"Object"],[12,8,5,0],[12,9,5,0,"defineProperty"],[12,23,5,0],[12,24,5,0,"exports"],[12,31,5,0],[13,4,5,0,"enumerable"],[13,14,5,0],[14,4,5,0,"get"],[14,7,5,0],[14,18,5,0,"get"],[14,19,5,0],[15,6,5,0],[15,13,5,9,"NetworkStateType"],[15,26,5,25],[15,27,5,25,"NetworkStateType"],[15,43,5,25],[16,4,5,25],[17,2,5,25],[18,2,26,0,"exports"],[18,9,26,0],[18,10,26,0,"getNetworkStateAsync"],[18,30,26,0],[18,33,26,0,"getNetworkStateAsync"],[18,53,26,0],[19,2,47,0,"exports"],[19,9,47,0],[19,10,47,0,"getIpAddressAsync"],[19,27,47,0],[19,30,47,0,"getIpAddressAsync"],[19,47,47,0],[20,2,66,0,"exports"],[20,9,66,0],[20,10,66,0,"isAirplaneModeEnabledAsync"],[20,36,66,0],[20,39,66,0,"isAirplaneModeEnabledAsync"],[20,65,66,0],[21,2,87,0,"exports"],[21,9,87,0],[21,10,87,0,"addNetworkStateListener"],[21,33,87,0],[21,36,87,0,"addNetworkStateListener"],[21,59,87,0],[22,2,103,0,"exports"],[22,9,103,0],[22,10,103,0,"useNetworkState"],[22,25,103,0],[22,28,103,0,"useNetworkState"],[22,43,103,0],[23,2,1,0],[23,6,1,0,"_expoModulesCore"],[23,22,1,0],[23,25,1,0,"require"],[23,32,1,0],[23,33,1,0,"_dependencyMap"],[23,47,1,0],[24,2,2,0],[24,6,2,0,"_react"],[24,12,2,0],[24,15,2,0,"require"],[24,22,2,0],[24,23,2,0,"_dependencyMap"],[24,37,2,0],[25,2,3,0],[25,6,3,0,"_ExpoNetwork"],[25,18,3,0],[25,21,3,0,"require"],[25,28,3,0],[25,29,3,0,"_dependencyMap"],[25,43,3,0],[26,2,3,0],[26,6,3,0,"ExpoNetwork"],[26,17,3,0],[26,20,3,0,"_interopDefault"],[26,35,3,0],[26,36,3,0,"_ExpoNetwork"],[26,48,3,0],[27,2,4,0],[27,6,4,0,"_NetworkTypes"],[27,19,4,0],[27,22,4,0,"require"],[27,29,4,0],[27,30,4,0,"_dependencyMap"],[27,44,4,0],[28,2,6,0],[28,8,6,6,"onNetworkStateEventName"],[28,31,6,29],[28,34,6,32],[28,57,6,55],[29,2,7,0],[30,2,8,0],[31,0,9,0],[32,0,10,0],[33,0,11,0],[34,0,12,0],[35,0,13,0],[36,0,14,0],[37,0,15,0],[38,0,16,0],[39,0,17,0],[40,0,18,0],[41,0,19,0],[42,0,20,0],[43,0,21,0],[44,0,22,0],[45,0,23,0],[46,0,24,0],[47,0,25,0],[48,2,26,7],[48,17,26,22,"getNetworkStateAsync"],[48,37,26,42,"getNetworkStateAsync"],[48,38,26,42],[48,40,26,45],[49,4,27,4],[49,8,27,8],[49,9,27,9,"ExpoNetwork"],[49,20,27,20],[49,21,27,20,"default"],[49,28,27,20],[49,29,27,21,"getNetworkStateAsync"],[49,49,27,41],[49,51,27,43],[50,6,28,8],[50,12,28,14],[50,16,28,18,"UnavailabilityError"],[50,32,28,37],[50,33,28,37,"UnavailabilityError"],[50,52,28,37],[50,53,28,38],[50,67,28,52],[50,69,28,54],[50,91,28,76],[50,92,28,77],[51,4,29,4],[52,4,30,4],[52,11,30,11],[52,17,30,17,"ExpoNetwork"],[52,28,30,28],[52,29,30,28,"default"],[52,36,30,28],[52,37,30,29,"getNetworkStateAsync"],[52,57,30,49],[52,58,30,50],[52,59,30,51],[53,2,31,0],[54,2,32,0],[55,2,33,0],[56,0,34,0],[57,0,35,0],[58,0,36,0],[59,0,37,0],[60,0,38,0],[61,0,39,0],[62,0,40,0],[63,0,41,0],[64,0,42,0],[65,0,43,0],[66,0,44,0],[67,0,45,0],[68,0,46,0],[69,2,47,7],[69,17,47,22,"getIpAddressAsync"],[69,34,47,39,"getIpAddressAsync"],[69,35,47,39],[69,37,47,42],[70,4,48,4],[70,8,48,8],[70,9,48,9,"ExpoNetwork"],[70,20,48,20],[70,21,48,20,"default"],[70,28,48,20],[70,29,48,21,"getIpAddressAsync"],[70,46,48,38],[70,48,48,40],[71,6,49,8],[71,12,49,14],[71,16,49,18,"UnavailabilityError"],[71,32,49,37],[71,33,49,37,"UnavailabilityError"],[71,52,49,37],[71,53,49,38],[71,67,49,52],[71,69,49,54],[71,88,49,73],[71,89,49,74],[72,4,50,4],[73,4,51,4],[73,11,51,11],[73,17,51,17,"ExpoNetwork"],[73,28,51,28],[73,29,51,28,"default"],[73,36,51,28],[73,37,51,29,"getIpAddressAsync"],[73,54,51,46],[73,55,51,47],[73,56,51,48],[74,2,52,0],[75,2,53,0],[76,2,54,0],[77,0,55,0],[78,0,56,0],[79,0,57,0],[80,0,58,0],[81,0,59,0],[82,0,60,0],[83,0,61,0],[84,0,62,0],[85,0,63,0],[86,0,64,0],[87,0,65,0],[88,2,66,7],[88,17,66,22,"isAirplaneModeEnabledAsync"],[88,43,66,48,"isAirplaneModeEnabledAsync"],[88,44,66,48],[88,46,66,51],[89,4,67,4],[89,8,67,8],[89,9,67,9,"ExpoNetwork"],[89,20,67,20],[89,21,67,20,"default"],[89,28,67,20],[89,29,67,21,"isAirplaneModeEnabledAsync"],[89,55,67,47],[89,57,67,49],[90,6,68,8],[90,12,68,14],[90,16,68,18,"UnavailabilityError"],[90,32,68,37],[90,33,68,37,"UnavailabilityError"],[90,52,68,37],[90,53,68,38],[90,67,68,52],[90,69,68,54],[90,97,68,82],[90,98,68,83],[91,4,69,4],[92,4,70,4],[92,11,70,11],[92,17,70,17,"ExpoNetwork"],[92,28,70,28],[92,29,70,28,"default"],[92,36,70,28],[92,37,70,29,"isAirplaneModeEnabledAsync"],[92,63,70,55],[92,64,70,56],[92,65,70,57],[93,2,71,0],[94,2,72,0],[95,0,73,0],[96,0,74,0],[97,0,75,0],[98,0,76,0],[99,0,77,0],[100,0,78,0],[101,0,79,0],[102,0,80,0],[103,0,81,0],[104,0,82,0],[105,0,83,0],[106,0,84,0],[107,0,85,0],[108,0,86,0],[109,2,87,7],[109,11,87,16,"addNetworkStateListener"],[109,34,87,39,"addNetworkStateListener"],[109,35,87,40,"listener"],[109,43,87,48],[109,45,87,50],[110,4,88,4],[110,11,88,11,"ExpoNetwork"],[110,22,88,22],[110,23,88,22,"default"],[110,30,88,22],[110,31,88,23,"addListener"],[110,42,88,34],[110,43,88,35,"onNetworkStateEventName"],[110,66,88,58],[110,68,88,60,"listener"],[110,76,88,68],[110,77,88,69],[111,2,89,0],[112,2,90,0],[113,2,91,0],[114,0,92,0],[115,0,93,0],[116,0,94,0],[117,0,95,0],[118,0,96,0],[119,0,97,0],[120,0,98,0],[121,0,99,0],[122,0,100,0],[123,0,101,0],[124,0,102,0],[125,2,103,7],[125,11,103,16,"useNetworkState"],[125,26,103,31,"useNetworkState"],[125,27,103,31],[125,29,103,34],[126,4,104,4],[126,10,104,10],[126,11,104,11,"networkState"],[126,23,104,23],[126,25,104,25,"setNetworkState"],[126,40,104,40],[126,41,104,41],[126,44,104,44],[126,48,104,44,"useState"],[126,54,104,52],[126,55,104,52,"useState"],[126,63,104,52],[126,65,104,53],[126,66,104,54],[126,67,104,55],[126,68,104,56],[127,4,105,4],[127,8,105,4,"useEffect"],[127,14,105,13],[127,15,105,13,"useEffect"],[127,24,105,13],[127,26,105,14],[127,32,105,20],[128,6,106,8,"getNetworkStateAsync"],[128,26,106,28],[128,27,106,29],[128,28,106,30],[128,29,106,31,"then"],[128,33,106,35],[128,34,106,36,"setNetworkState"],[128,49,106,51],[128,50,106,52],[129,6,107,8],[129,12,107,14,"listener"],[129,20,107,22],[129,23,107,25,"addNetworkStateListener"],[129,46,107,48],[129,47,107,50,"networkState"],[129,59,107,62],[129,63,107,67,"setNetworkState"],[129,78,107,82],[129,79,107,83,"networkState"],[129,91,107,95],[129,92,107,96],[129,93,107,97],[130,6,108,8],[130,13,108,15],[130,19,108,21,"listener"],[130,27,108,29],[130,28,108,30,"remove"],[130,34,108,36],[130,35,108,37],[130,36,108,38],[131,4,109,4],[131,5,109,5],[131,7,109,7],[131,9,109,9],[131,10,109,10],[132,4,110,4],[132,11,110,11,"networkState"],[132,23,110,23],[133,2,111,0],[134,0,111,1],[134,3]],"functionMap":{"names":["<global>","getNetworkStateAsync","getIpAddressAsync","isAirplaneModeEnabledAsync","addNetworkStateListener","useNetworkState","useEffect$argument_0","addNetworkStateListener$argument_0","<anonymous>"],"mappings":"AAA;OCyB;CDK;OEgB;CFK;OGc;CHK;OIgB;CJE;OKc;cCE;iDCE,+CD;eEC,uBF;KDC;CLE"},"hasCjsExports":false},"type":"js/module"}]}