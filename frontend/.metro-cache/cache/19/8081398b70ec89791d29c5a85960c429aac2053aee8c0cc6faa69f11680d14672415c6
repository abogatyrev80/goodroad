{"dependencies":[{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"YisBBiy2Xm9DEVdFebZ2nbgAHBo=","exportNames":["*"],"imports":1}},{"name":"expo/virtual/env","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"dgHc21cgR+buKc7O3/dChhD5JJk=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"yg7e6laZwmpbIvId5jovq9ugXp8=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30=","exportNames":["*"],"imports":1}},{"name":"expo-network","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":40,"index":40}}],"key":"1uj8I4G/JNBf3YRANaksFTH4dPs=","exportNames":["*"],"imports":1}},{"name":"@react-native-async-storage/async-storage","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":41},"end":{"line":2,"column":69,"index":110}}],"key":"0kSRlooyBOaYM9tlTtK91nq+uds=","exportNames":["*"],"imports":1}},{"name":"./LocalDatabase","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":111},"end":{"line":3,"column":85,"index":196}}],"key":"4OHGfS3RYJ9C2KSqX1/pnZT0rg0=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  function _interopNamespace(e) {\n    if (e && e.__esModule) return e;\n    var n = {};\n    if (e) Object.keys(e).forEach(function (k) {\n      var d = Object.getOwnPropertyDescriptor(e, k);\n      Object.defineProperty(n, k, d.get ? d : {\n        enumerable: true,\n        get: function () {\n          return e[k];\n        }\n      });\n    });\n    n.default = e;\n    return n;\n  }\n  Object.defineProperty(exports, \"SyncService\", {\n    enumerable: true,\n    get: function () {\n      return SyncService;\n    }\n  });\n  Object.defineProperty(exports, \"syncService\", {\n    enumerable: true,\n    get: function () {\n      return syncService;\n    }\n  });\n  var _babelRuntimeHelpersAsyncToGenerator = require(_dependencyMap[0], \"@babel/runtime/helpers/asyncToGenerator\");\n  var _asyncToGenerator = _interopDefault(_babelRuntimeHelpersAsyncToGenerator);\n  var _expoVirtualEnv = require(_dependencyMap[1], \"expo/virtual/env\");\n  var _babelRuntimeHelpersClassCallCheck = require(_dependencyMap[2], \"@babel/runtime/helpers/classCallCheck\");\n  var _classCallCheck = _interopDefault(_babelRuntimeHelpersClassCallCheck);\n  var _babelRuntimeHelpersCreateClass = require(_dependencyMap[3], \"@babel/runtime/helpers/createClass\");\n  var _createClass = _interopDefault(_babelRuntimeHelpersCreateClass);\n  var _expoNetwork = require(_dependencyMap[4], \"expo-network\");\n  var Network = _interopNamespace(_expoNetwork);\n  var _reactNativeAsyncStorageAsyncStorage = require(_dependencyMap[5], \"@react-native-async-storage/async-storage\");\n  var AsyncStorage = _interopDefault(_reactNativeAsyncStorageAsyncStorage);\n  var _LocalDatabase = require(_dependencyMap[6], \"./LocalDatabase\");\n  var SyncService = /*#__PURE__*/function () {\n    function SyncService() {\n      (0, _classCallCheck.default)(this, SyncService);\n      this.syncInterval = null;\n      this.isInitialized = false;\n      this.backendUrl = _expoVirtualEnv.env.EXPO_PUBLIC_BACKEND_URL || '/';\n    }\n    return (0, _createClass.default)(SyncService, [{\n      key: \"initialize\",\n      value: function () {\n        var _initialize = (0, _asyncToGenerator.default)(function* () {\n          if (this.isInitialized) return;\n          try {\n            yield _LocalDatabase.localDB.initialize();\n            this.startPeriodicSync();\n            this.isInitialized = true;\n            console.log('‚úÖ Sync service initialized');\n          } catch (error) {\n            console.error('‚ùå Sync service initialization error:', error);\n            throw error;\n          }\n        });\n        function initialize() {\n          return _initialize.apply(this, arguments);\n        }\n        return initialize;\n      }() // === AUTOMATIC SYNC ===\n    }, {\n      key: \"startPeriodicSync\",\n      value: function startPeriodicSync() {\n        var _this = this;\n        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ –∫–æ–≥–¥–∞ –µ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç\n        this.syncInterval = setInterval(/*#__PURE__*/(0, _asyncToGenerator.default)(function* () {\n          var networkState = yield Network.getNetworkStateAsync();\n          if (networkState.isConnected) {\n            yield _this.syncWithServer();\n          }\n        }), 30000);\n      }\n    }, {\n      key: \"stopPeriodicSync\",\n      value: function () {\n        var _stopPeriodicSync = (0, _asyncToGenerator.default)(function* () {\n          if (this.syncInterval) {\n            clearInterval(this.syncInterval);\n            this.syncInterval = null;\n          }\n        });\n        function stopPeriodicSync() {\n          return _stopPeriodicSync.apply(this, arguments);\n        }\n        return stopPeriodicSync;\n      }() // === MAIN SYNC FUNCTION ===\n    }, {\n      key: \"syncWithServer\",\n      value: function () {\n        var _syncWithServer = (0, _asyncToGenerator.default)(function* () {\n          try {\n            var networkState = yield Network.getNetworkStateAsync();\n            if (!networkState.isConnected) {\n              console.log('üì° No internet connection - sync skipped');\n              return false;\n            }\n            console.log('üîÑ Starting sync with server...');\n\n            // 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä\n            yield this.uploadSensorData();\n\n            // 2. –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è\n            yield this.downloadUpdatedWarnings();\n\n            // 3. –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏\n            yield AsyncStorage.default.setItem('last_sync_time', new Date().toISOString());\n\n            // 4. –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ\n            yield _LocalDatabase.localDB.cleanupOldData(30);\n            console.log('‚úÖ Sync completed successfully');\n            return true;\n          } catch (error) {\n            console.error('‚ùå Sync error:', error);\n            return false;\n          }\n        });\n        function syncWithServer() {\n          return _syncWithServer.apply(this, arguments);\n        }\n        return syncWithServer;\n      }() // === UPLOAD SENSOR DATA ===\n    }, {\n      key: \"uploadSensorData\",\n      value: function () {\n        var _uploadSensorData = (0, _asyncToGenerator.default)(function* () {\n          var unsyncedData = yield _LocalDatabase.localDB.getUnsyncedSensorData();\n          if (unsyncedData.length === 0) {\n            console.log('üì§ No unsynced sensor data to upload');\n            return;\n          }\n          console.log(`üì§ Uploading ${unsyncedData.length} sensor data records...`);\n          try {\n            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—á–∫–∞–º–∏ –ø–æ 50 –∑–∞–ø–∏—Å–µ–π\n            var batchSize = 50;\n            for (var i = 0; i < unsyncedData.length; i += batchSize) {\n              var batch = unsyncedData.slice(i, i + batchSize);\n              var response = yield fetch(`${this.backendUrl}api/sensor-data/batch`, {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                  data: batch.map(item => ({\n                    latitude: item.latitude,\n                    longitude: item.longitude,\n                    timestamp: item.timestamp,\n                    speed: item.speed,\n                    accuracy: item.accuracy,\n                    accelerometer: item.accelerometer,\n                    road_quality_score: item.roadQuality\n                  }))\n                })\n              });\n              if (response.ok) {\n                var result = yield response.json();\n                var localIds = batch.map(item => item.id);\n                var serverIds = result.inserted_ids || [];\n\n                // –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ\n                yield _LocalDatabase.localDB.markSensorDataSynced(localIds, serverIds);\n                console.log(`‚úÖ Uploaded batch ${Math.floor(i / batchSize) + 1}/${Math.ceil(unsyncedData.length / batchSize)}`);\n              } else {\n                console.error(`‚ùå Failed to upload batch: ${response.status}`);\n              }\n            }\n          } catch (error) {\n            console.error('‚ùå Upload sensor data error:', error);\n          }\n        });\n        function uploadSensorData() {\n          return _uploadSensorData.apply(this, arguments);\n        }\n        return uploadSensorData;\n      }() // === DOWNLOAD WARNINGS ===\n    }, {\n      key: \"downloadUpdatedWarnings\",\n      value: function () {\n        var _downloadUpdatedWarnings = (0, _asyncToGenerator.default)(function* () {\n          var _this2 = this;\n          try {\n            var downloadedRegions = yield _LocalDatabase.localDB.getDownloadedRegions();\n            var _loop = function* (region) {\n              var response = yield fetch(`${_this2.backendUrl}api/warnings/region/${region.code}?since=${region.lastSync}`);\n              if (response.ok) {\n                var warnings = yield response.json();\n                if (warnings.length > 0) {\n                  var localWarnings = warnings.map(w => ({\n                    serverId: w._id,\n                    latitude: w.latitude,\n                    longitude: w.longitude,\n                    hazardType: w.hazard_type,\n                    severity: w.severity,\n                    description: w.description,\n                    isVerified: w.is_verified,\n                    region: region.code,\n                    city: w.city || '',\n                    country: w.country || '',\n                    lastUpdated: w.updated_at || new Date().toISOString()\n                  }));\n                  yield _LocalDatabase.localDB.saveWarnings(localWarnings);\n                  yield _LocalDatabase.localDB.updateRegionSyncStatus(region.code, region.name, warnings.length);\n                  console.log(`üì• Downloaded ${warnings.length} warnings for ${region.name}`);\n                }\n              }\n            };\n            for (var region of downloadedRegions) {\n              yield* _loop(region);\n            }\n          } catch (error) {\n            console.error('‚ùå Download warnings error:', error);\n          }\n        });\n        function downloadUpdatedWarnings() {\n          return _downloadUpdatedWarnings.apply(this, arguments);\n        }\n        return downloadUpdatedWarnings;\n      }() // === REGION MANAGEMENT ===\n    }, {\n      key: \"downloadRegionData\",\n      value: function () {\n        var _downloadRegionData = (0, _asyncToGenerator.default)(function* (regionCode, regionName, bounds) {\n          try {\n            var networkState = yield Network.getNetworkStateAsync();\n            if (!networkState.isConnected) {\n              throw new Error('No internet connection');\n            }\n            console.log(`üì• Downloading data for region: ${regionName}...`);\n            var response = yield fetch(`${this.backendUrl}api/warnings/region/${regionCode}/full?` + `north=${bounds.north}&south=${bounds.south}&east=${bounds.east}&west=${bounds.west}`);\n            if (!response.ok) {\n              throw new Error(`Failed to download region data: ${response.status}`);\n            }\n            var warnings = yield response.json();\n            var localWarnings = warnings.map(w => ({\n              serverId: w._id,\n              latitude: w.latitude,\n              longitude: w.longitude,\n              hazardType: w.hazard_type,\n              severity: w.severity,\n              description: w.description,\n              isVerified: w.is_verified,\n              region: regionCode,\n              city: w.city || '',\n              country: w.country || '',\n              lastUpdated: w.updated_at || new Date().toISOString()\n            }));\n            yield _LocalDatabase.localDB.saveWarnings(localWarnings);\n            yield _LocalDatabase.localDB.updateRegionSyncStatus(regionCode, regionName, warnings.length);\n            console.log(`‚úÖ Downloaded ${warnings.length} warnings for ${regionName}`);\n            return true;\n          } catch (error) {\n            console.error(`‚ùå Failed to download region ${regionName}:`, error);\n            return false;\n          }\n        });\n        function downloadRegionData(_x, _x2, _x3) {\n          return _downloadRegionData.apply(this, arguments);\n        }\n        return downloadRegionData;\n      }()\n    }, {\n      key: \"getAvailableRegions\",\n      value: function () {\n        var _getAvailableRegions = (0, _asyncToGenerator.default)(function* () {\n          try {\n            var networkState = yield Network.getNetworkStateAsync();\n            if (!networkState.isConnected) {\n              return [];\n            }\n            var response = yield fetch(`${this.backendUrl}api/regions/available`);\n            if (!response.ok) return [];\n            return yield response.json();\n          } catch (error) {\n            console.error('‚ùå Failed to get available regions:', error);\n            return [];\n          }\n        });\n        function getAvailableRegions() {\n          return _getAvailableRegions.apply(this, arguments);\n        }\n        return getAvailableRegions;\n      }() // === OFFLINE DATA ACCESS ===\n    }, {\n      key: \"saveOfflineSensorData\",\n      value: function () {\n        var _saveOfflineSensorData = (0, _asyncToGenerator.default)(function* (latitude, longitude, speed, accuracy, accelerometer, roadQuality) {\n          var sensorData = {\n            latitude,\n            longitude,\n            timestamp: new Date().toISOString(),\n            speed,\n            accuracy,\n            accelerometer,\n            roadQuality,\n            isSynced: false\n          };\n          return yield _LocalDatabase.localDB.saveSensorData(sensorData);\n        });\n        function saveOfflineSensorData(_x4, _x5, _x6, _x7, _x8, _x9) {\n          return _saveOfflineSensorData.apply(this, arguments);\n        }\n        return saveOfflineSensorData;\n      }()\n    }, {\n      key: \"getNearbyWarningsOffline\",\n      value: function () {\n        var _getNearbyWarningsOffline = (0, _asyncToGenerator.default)(function* (latitude, longitude) {\n          var radiusKm = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n          return yield _LocalDatabase.localDB.getNearbyWarnings(latitude, longitude, radiusKm);\n        });\n        function getNearbyWarningsOffline(_x0, _x1) {\n          return _getNearbyWarningsOffline.apply(this, arguments);\n        }\n        return getNearbyWarningsOffline;\n      }() // === STATUS METHODS ===\n    }, {\n      key: \"getSyncStatus\",\n      value: function () {\n        var _getSyncStatus = (0, _asyncToGenerator.default)(function* () {\n          return yield _LocalDatabase.localDB.getSyncStatus();\n        });\n        function getSyncStatus() {\n          return _getSyncStatus.apply(this, arguments);\n        }\n        return getSyncStatus;\n      }()\n    }, {\n      key: \"getDatabaseStats\",\n      value: function () {\n        var _getDatabaseStats = (0, _asyncToGenerator.default)(function* () {\n          return yield _LocalDatabase.localDB.getDatabaseStats();\n        });\n        function getDatabaseStats() {\n          return _getDatabaseStats.apply(this, arguments);\n        }\n        return getDatabaseStats;\n      }()\n    }, {\n      key: \"forceFullSync\",\n      value: function () {\n        var _forceFullSync = (0, _asyncToGenerator.default)(function* () {\n          console.log('üîÑ Forcing full sync...');\n          return yield this.syncWithServer();\n        });\n        function forceFullSync() {\n          return _forceFullSync.apply(this, arguments);\n        }\n        return forceFullSync;\n      }() // === MANUAL CONTROL ===\n    }, {\n      key: \"clearLocalData\",\n      value: function () {\n        var _clearLocalData = (0, _asyncToGenerator.default)(function* () {\n          // –≠—Ç–æ –¥–ª—è debug/reset —Ñ—É–Ω–∫—Ü–∏–∏\n          console.log('üóëÔ∏è Clearing all local data...');\n          // Implement database clearing if needed\n        });\n        function clearLocalData() {\n          return _clearLocalData.apply(this, arguments);\n        }\n        return clearLocalData;\n      }()\n    }]);\n  }();\n  var syncService = new SyncService();\n});","lineCount":382,"map":[[27,2,17,0,"Object"],[27,8,17,0],[27,9,17,0,"defineProperty"],[27,23,17,0],[27,24,17,0,"exports"],[27,31,17,0],[28,4,17,0,"enumerable"],[28,14,17,0],[29,4,17,0,"get"],[29,7,17,0],[29,18,17,0,"get"],[29,19,17,0],[30,6,17,0],[30,13,17,0,"SyncService"],[30,24,17,0],[31,4,17,0],[32,2,17,0],[33,2,302,0,"Object"],[33,8,302,0],[33,9,302,0,"defineProperty"],[33,23,302,0],[33,24,302,0,"exports"],[33,31,302,0],[34,4,302,0,"enumerable"],[34,14,302,0],[35,4,302,0,"get"],[35,7,302,0],[35,18,302,0,"get"],[35,19,302,0],[36,6,302,0],[36,13,302,0,"syncService"],[36,24,302,0],[37,4,302,0],[38,2,302,0],[39,2,302,45],[39,6,302,45,"_babelRuntimeHelpersAsyncToGenerator"],[39,42,302,45],[39,45,302,45,"require"],[39,52,302,45],[39,53,302,45,"_dependencyMap"],[39,67,302,45],[40,2,302,45],[40,6,302,45,"_asyncToGenerator"],[40,23,302,45],[40,26,302,45,"_interopDefault"],[40,41,302,45],[40,42,302,45,"_babelRuntimeHelpersAsyncToGenerator"],[40,78,302,45],[41,2,302,45],[41,6,302,45,"_expoVirtualEnv"],[41,21,302,45],[41,24,302,45,"require"],[41,31,302,45],[41,32,302,45,"_dependencyMap"],[41,46,302,45],[42,2,302,45],[42,6,302,45,"_babelRuntimeHelpersClassCallCheck"],[42,40,302,45],[42,43,302,45,"require"],[42,50,302,45],[42,51,302,45,"_dependencyMap"],[42,65,302,45],[43,2,302,45],[43,6,302,45,"_classCallCheck"],[43,21,302,45],[43,24,302,45,"_interopDefault"],[43,39,302,45],[43,40,302,45,"_babelRuntimeHelpersClassCallCheck"],[43,74,302,45],[44,2,302,45],[44,6,302,45,"_babelRuntimeHelpersCreateClass"],[44,37,302,45],[44,40,302,45,"require"],[44,47,302,45],[44,48,302,45,"_dependencyMap"],[44,62,302,45],[45,2,302,45],[45,6,302,45,"_createClass"],[45,18,302,45],[45,21,302,45,"_interopDefault"],[45,36,302,45],[45,37,302,45,"_babelRuntimeHelpersCreateClass"],[45,68,302,45],[46,2,1,0],[46,6,1,0,"_expoNetwork"],[46,18,1,0],[46,21,1,0,"require"],[46,28,1,0],[46,29,1,0,"_dependencyMap"],[46,43,1,0],[47,2,1,0],[47,6,1,0,"Network"],[47,13,1,0],[47,16,1,0,"_interopNamespace"],[47,33,1,0],[47,34,1,0,"_expoNetwork"],[47,46,1,0],[48,2,2,0],[48,6,2,0,"_reactNativeAsyncStorageAsyncStorage"],[48,42,2,0],[48,45,2,0,"require"],[48,52,2,0],[48,53,2,0,"_dependencyMap"],[48,67,2,0],[49,2,2,0],[49,6,2,0,"AsyncStorage"],[49,18,2,0],[49,21,2,0,"_interopDefault"],[49,36,2,0],[49,37,2,0,"_reactNativeAsyncStorageAsyncStorage"],[49,73,2,0],[50,2,3,0],[50,6,3,0,"_LocalDatabase"],[50,20,3,0],[50,23,3,0,"require"],[50,30,3,0],[50,31,3,0,"_dependencyMap"],[50,45,3,0],[51,2,3,85],[51,6,17,13,"SyncService"],[51,17,17,24],[52,4,22,2],[52,13,22,2,"SyncService"],[52,25,22,2],[52,27,22,16],[53,6,22,16],[53,10,22,16,"_classCallCheck"],[53,25,22,16],[53,26,22,16,"default"],[53,33,22,16],[53,41,22,16,"SyncService"],[53,52,22,16],[54,6,22,16],[54,11,19,10,"syncInterval"],[54,23,19,22],[54,26,19,48],[54,30,19,52],[55,6,19,52],[55,11,20,10,"isInitialized"],[55,24,20,23],[55,27,20,26],[55,32,20,31],[56,6,23,4],[56,10,23,8],[56,11,23,9,"backendUrl"],[56,21,23,19],[56,24,23,22,"_expoVirtualEnv"],[56,39,23,22],[56,40,23,22,"env"],[56,43,23,22],[56,44,23,22,"EXPO_PUBLIC_BACKEND_URL"],[56,67,23,22],[56,71,23,61],[56,74,23,64],[57,4,24,2],[58,4,24,3],[58,15,24,3,"_createClass"],[58,27,24,3],[58,28,24,3,"default"],[58,35,24,3],[58,37,24,3,"SyncService"],[58,48,24,3],[59,6,24,3,"key"],[59,9,24,3],[60,6,24,3,"value"],[60,11,24,3],[61,8,24,3],[61,12,24,3,"_initialize"],[61,23,24,3],[61,30,24,3,"_asyncToGenerator"],[61,47,24,3],[61,48,24,3,"default"],[61,55,24,3],[61,57,26,2],[61,70,26,21],[62,10,27,4],[62,14,27,8],[62,18,27,12],[62,19,27,13,"isInitialized"],[62,32,27,26],[62,34,27,28],[63,10,29,4],[63,14,29,8],[64,12,30,6],[64,18,30,12,"localDB"],[64,32,30,19],[64,33,30,19,"localDB"],[64,40,30,19],[64,41,30,20,"initialize"],[64,51,30,30],[64,52,30,31],[64,53,30,32],[65,12,31,6],[65,16,31,10],[65,17,31,11,"startPeriodicSync"],[65,34,31,28],[65,35,31,29],[65,36,31,30],[66,12,32,6],[66,16,32,10],[66,17,32,11,"isInitialized"],[66,30,32,24],[66,33,32,27],[66,37,32,31],[67,12,34,6,"console"],[67,19,34,13],[67,20,34,14,"log"],[67,23,34,17],[67,24,34,18],[67,52,34,46],[67,53,34,47],[68,10,35,4],[68,11,35,5],[68,12,35,6],[68,19,35,13,"error"],[68,24,35,18],[68,26,35,20],[69,12,36,6,"console"],[69,19,36,13],[69,20,36,14,"error"],[69,25,36,19],[69,26,36,20],[69,64,36,58],[69,66,36,60,"error"],[69,71,36,65],[69,72,36,66],[70,12,37,6],[70,18,37,12,"error"],[70,23,37,17],[71,10,38,4],[72,8,39,2],[72,9,39,3],[73,8,39,3],[73,17,26,8,"initialize"],[73,27,26,18,"initialize"],[73,28,26,18],[74,10,26,18],[74,17,26,18,"_initialize"],[74,28,26,18],[74,29,26,18,"apply"],[74,34,26,18],[74,41,26,18,"arguments"],[74,50,26,18],[75,8,26,18],[76,8,26,18],[76,15,26,8,"initialize"],[76,25,26,18],[77,6,26,18],[77,10,41,2],[78,4,41,2],[79,6,41,2,"key"],[79,9,41,2],[80,6,41,2,"value"],[80,11,41,2],[80,13,42,2],[80,22,42,10,"startPeriodicSync"],[80,39,42,27,"startPeriodicSync"],[80,40,42,27],[80,42,42,30],[81,8,42,30],[81,12,42,30,"_this"],[81,17,42,30],[82,8,43,4],[83,8,44,4],[83,12,44,8],[83,13,44,9,"syncInterval"],[83,25,44,21],[83,28,44,24,"setInterval"],[83,39,44,35],[83,57,44,35,"_asyncToGenerator"],[83,74,44,35],[83,75,44,35,"default"],[83,82,44,35],[83,84,44,36],[83,97,44,48],[84,10,45,6],[84,14,45,12,"networkState"],[84,26,45,24],[84,35,45,33,"Network"],[84,42,45,40],[84,43,45,41,"getNetworkStateAsync"],[84,63,45,61],[84,64,45,62],[84,65,45,63],[85,10,46,6],[85,14,46,10,"networkState"],[85,26,46,22],[85,27,46,23,"isConnected"],[85,38,46,34],[85,40,46,36],[86,12,47,8],[86,18,47,14,"_this"],[86,23,47,18],[86,24,47,19,"syncWithServer"],[86,38,47,33],[86,39,47,34],[86,40,47,35],[87,10,48,6],[88,8,49,4],[88,9,49,5],[88,12,49,7],[88,17,49,12],[88,18,49,13],[89,6,50,2],[90,4,50,3],[91,6,50,3,"key"],[91,9,50,3],[92,6,50,3,"value"],[92,11,50,3],[93,8,50,3],[93,12,50,3,"_stopPeriodicSync"],[93,29,50,3],[93,36,50,3,"_asyncToGenerator"],[93,53,50,3],[93,54,50,3,"default"],[93,61,50,3],[93,63,52,2],[93,76,52,27],[94,10,53,4],[94,14,53,8],[94,18,53,12],[94,19,53,13,"syncInterval"],[94,31,53,25],[94,33,53,27],[95,12,54,6,"clearInterval"],[95,25,54,19],[95,26,54,20],[95,30,54,24],[95,31,54,25,"syncInterval"],[95,43,54,37],[95,44,54,38],[96,12,55,6],[96,16,55,10],[96,17,55,11,"syncInterval"],[96,29,55,23],[96,32,55,26],[96,36,55,30],[97,10,56,4],[98,8,57,2],[98,9,57,3],[99,8,57,3],[99,17,52,8,"stopPeriodicSync"],[99,33,52,24,"stopPeriodicSync"],[99,34,52,24],[100,10,52,24],[100,17,52,24,"_stopPeriodicSync"],[100,34,52,24],[100,35,52,24,"apply"],[100,40,52,24],[100,47,52,24,"arguments"],[100,56,52,24],[101,8,52,24],[102,8,52,24],[102,15,52,8,"stopPeriodicSync"],[102,31,52,24],[103,6,52,24],[103,10,59,2],[104,4,59,2],[105,6,59,2,"key"],[105,9,59,2],[106,6,59,2,"value"],[106,11,59,2],[107,8,59,2],[107,12,59,2,"_syncWithServer"],[107,27,59,2],[107,34,59,2,"_asyncToGenerator"],[107,51,59,2],[107,52,59,2,"default"],[107,59,59,2],[107,61,60,2],[107,74,60,43],[108,10,61,4],[108,14,61,8],[109,12,62,6],[109,16,62,12,"networkState"],[109,28,62,24],[109,37,62,33,"Network"],[109,44,62,40],[109,45,62,41,"getNetworkStateAsync"],[109,65,62,61],[109,66,62,62],[109,67,62,63],[110,12,63,6],[110,16,63,10],[110,17,63,11,"networkState"],[110,29,63,23],[110,30,63,24,"isConnected"],[110,41,63,35],[110,43,63,37],[111,14,64,8,"console"],[111,21,64,15],[111,22,64,16,"log"],[111,25,64,19],[111,26,64,20],[111,68,64,62],[111,69,64,63],[112,14,65,8],[112,21,65,15],[112,26,65,20],[113,12,66,6],[114,12,68,6,"console"],[114,19,68,13],[114,20,68,14,"log"],[114,23,68,17],[114,24,68,18],[114,57,68,51],[114,58,68,52],[116,12,70,6],[117,12,71,6],[117,18,71,12],[117,22,71,16],[117,23,71,17,"uploadSensorData"],[117,39,71,33],[117,40,71,34],[117,41,71,35],[119,12,73,6],[120,12,74,6],[120,18,74,12],[120,22,74,16],[120,23,74,17,"downloadUpdatedWarnings"],[120,46,74,40],[120,47,74,41],[120,48,74,42],[122,12,76,6],[123,12,77,6],[123,18,77,12,"AsyncStorage"],[123,30,77,24],[123,31,77,24,"default"],[123,38,77,24],[123,39,77,25,"setItem"],[123,46,77,32],[123,47,77,33],[123,63,77,49],[123,65,77,51],[123,69,77,55,"Date"],[123,73,77,59],[123,74,77,60],[123,75,77,61],[123,76,77,62,"toISOString"],[123,87,77,73],[123,88,77,74],[123,89,77,75],[123,90,77,76],[125,12,79,6],[126,12,80,6],[126,18,80,12,"localDB"],[126,32,80,19],[126,33,80,19,"localDB"],[126,40,80,19],[126,41,80,20,"cleanupOldData"],[126,55,80,34],[126,56,80,35],[126,58,80,37],[126,59,80,38],[127,12,82,6,"console"],[127,19,82,13],[127,20,82,14,"log"],[127,23,82,17],[127,24,82,18],[127,55,82,49],[127,56,82,50],[128,12,83,6],[128,19,83,13],[128,23,83,17],[129,10,84,4],[129,11,84,5],[129,12,84,6],[129,19,84,13,"error"],[129,24,84,18],[129,26,84,20],[130,12,85,6,"console"],[130,19,85,13],[130,20,85,14,"error"],[130,25,85,19],[130,26,85,20],[130,41,85,35],[130,43,85,37,"error"],[130,48,85,42],[130,49,85,43],[131,12,86,6],[131,19,86,13],[131,24,86,18],[132,10,87,4],[133,8,88,2],[133,9,88,3],[134,8,88,3],[134,17,60,8,"syncWithServer"],[134,31,60,22,"syncWithServer"],[134,32,60,22],[135,10,60,22],[135,17,60,22,"_syncWithServer"],[135,32,60,22],[135,33,60,22,"apply"],[135,38,60,22],[135,45,60,22,"arguments"],[135,54,60,22],[136,8,60,22],[137,8,60,22],[137,15,60,8,"syncWithServer"],[137,29,60,22],[138,6,60,22],[138,10,90,2],[139,4,90,2],[140,6,90,2,"key"],[140,9,90,2],[141,6,90,2,"value"],[141,11,90,2],[142,8,90,2],[142,12,90,2,"_uploadSensorData"],[142,29,90,2],[142,36,90,2,"_asyncToGenerator"],[142,53,90,2],[142,54,90,2,"default"],[142,61,90,2],[142,63,91,2],[142,76,91,35],[143,10,92,4],[143,14,92,10,"unsyncedData"],[143,26,92,22],[143,35,92,31,"localDB"],[143,49,92,38],[143,50,92,38,"localDB"],[143,57,92,38],[143,58,92,39,"getUnsyncedSensorData"],[143,79,92,60],[143,80,92,61],[143,81,92,62],[144,10,93,4],[144,14,93,8,"unsyncedData"],[144,26,93,20],[144,27,93,21,"length"],[144,33,93,27],[144,38,93,32],[144,39,93,33],[144,41,93,35],[145,12,94,6,"console"],[145,19,94,13],[145,20,94,14,"log"],[145,23,94,17],[145,24,94,18],[145,62,94,56],[145,63,94,57],[146,12,95,6],[147,10,96,4],[148,10,98,4,"console"],[148,17,98,11],[148,18,98,12,"log"],[148,21,98,15],[148,22,98,16],[148,38,98,32,"unsyncedData"],[148,50,98,44],[148,51,98,45,"length"],[148,57,98,51],[148,82,98,76],[148,83,98,77],[149,10,100,4],[149,14,100,8],[150,12,101,6],[151,12,102,6],[151,16,102,12,"batchSize"],[151,25,102,21],[151,28,102,24],[151,30,102,26],[152,12,103,6],[152,17,103,11],[152,21,103,15,"i"],[152,22,103,16],[152,25,103,19],[152,26,103,20],[152,28,103,22,"i"],[152,29,103,23],[152,32,103,26,"unsyncedData"],[152,44,103,38],[152,45,103,39,"length"],[152,51,103,45],[152,53,103,47,"i"],[152,54,103,48],[152,58,103,52,"batchSize"],[152,67,103,61],[152,69,103,63],[153,14,104,8],[153,18,104,14,"batch"],[153,23,104,19],[153,26,104,22,"unsyncedData"],[153,38,104,34],[153,39,104,35,"slice"],[153,44,104,40],[153,45,104,41,"i"],[153,46,104,42],[153,48,104,44,"i"],[153,49,104,45],[153,52,104,48,"batchSize"],[153,61,104,57],[153,62,104,58],[154,14,106,8],[154,18,106,14,"response"],[154,26,106,22],[154,35,106,31,"fetch"],[154,40,106,36],[154,41,106,37],[154,44,106,40],[154,48,106,44],[154,49,106,45,"backendUrl"],[154,59,106,55],[154,82,106,78],[154,84,106,80],[155,16,107,10,"method"],[155,22,107,16],[155,24,107,18],[155,30,107,24],[156,16,108,10,"headers"],[156,23,108,17],[156,25,108,19],[157,18,109,12],[157,32,109,26],[157,34,109,28],[158,16,110,10],[158,17,110,11],[159,16,111,10,"body"],[159,20,111,14],[159,22,111,16,"JSON"],[159,26,111,20],[159,27,111,21,"stringify"],[159,36,111,30],[159,37,111,31],[160,18,112,12,"data"],[160,22,112,16],[160,24,112,18,"batch"],[160,29,112,23],[160,30,112,24,"map"],[160,33,112,27],[160,34,112,28,"item"],[160,38,112,32],[160,43,112,37],[161,20,113,14,"latitude"],[161,28,113,22],[161,30,113,24,"item"],[161,34,113,28],[161,35,113,29,"latitude"],[161,43,113,37],[162,20,114,14,"longitude"],[162,29,114,23],[162,31,114,25,"item"],[162,35,114,29],[162,36,114,30,"longitude"],[162,45,114,39],[163,20,115,14,"timestamp"],[163,29,115,23],[163,31,115,25,"item"],[163,35,115,29],[163,36,115,30,"timestamp"],[163,45,115,39],[164,20,116,14,"speed"],[164,25,116,19],[164,27,116,21,"item"],[164,31,116,25],[164,32,116,26,"speed"],[164,37,116,31],[165,20,117,14,"accuracy"],[165,28,117,22],[165,30,117,24,"item"],[165,34,117,28],[165,35,117,29,"accuracy"],[165,43,117,37],[166,20,118,14,"accelerometer"],[166,33,118,27],[166,35,118,29,"item"],[166,39,118,33],[166,40,118,34,"accelerometer"],[166,53,118,47],[167,20,119,14,"road_quality_score"],[167,38,119,32],[167,40,119,34,"item"],[167,44,119,38],[167,45,119,39,"roadQuality"],[168,18,120,12],[168,19,120,13],[168,20,120,14],[169,16,121,10],[169,17,121,11],[170,14,122,8],[170,15,122,9],[170,16,122,10],[171,14,124,8],[171,18,124,12,"response"],[171,26,124,20],[171,27,124,21,"ok"],[171,29,124,23],[171,31,124,25],[172,16,125,10],[172,20,125,16,"result"],[172,26,125,22],[172,35,125,31,"response"],[172,43,125,39],[172,44,125,40,"json"],[172,48,125,44],[172,49,125,45],[172,50,125,46],[173,16,126,10],[173,20,126,16,"localIds"],[173,28,126,24],[173,31,126,27,"batch"],[173,36,126,32],[173,37,126,33,"map"],[173,40,126,36],[173,41,126,37,"item"],[173,45,126,41],[173,49,126,45,"item"],[173,53,126,49],[173,54,126,50,"id"],[173,56,126,53],[173,57,126,54],[174,16,127,10],[174,20,127,16,"serverIds"],[174,29,127,25],[174,32,127,28,"result"],[174,38,127,34],[174,39,127,35,"inserted_ids"],[174,51,127,47],[174,55,127,51],[174,57,127,53],[176,16,129,10],[177,16,130,10],[177,22,130,16,"localDB"],[177,36,130,23],[177,37,130,23,"localDB"],[177,44,130,23],[177,45,130,24,"markSensorDataSynced"],[177,65,130,44],[177,66,130,45,"localIds"],[177,74,130,53],[177,76,130,55,"serverIds"],[177,85,130,64],[177,86,130,65],[178,16,132,10,"console"],[178,23,132,17],[178,24,132,18,"log"],[178,27,132,21],[178,28,132,22],[178,48,132,42,"Math"],[178,52,132,46],[178,53,132,47,"floor"],[178,58,132,52],[178,59,132,53,"i"],[178,60,132,54],[178,63,132,55,"batchSize"],[178,72,132,64],[178,73,132,65],[178,76,132,68],[178,77,132,69],[178,81,132,73,"Math"],[178,85,132,77],[178,86,132,78,"ceil"],[178,90,132,82],[178,91,132,83,"unsyncedData"],[178,103,132,95],[178,104,132,96,"length"],[178,110,132,102],[178,113,132,103,"batchSize"],[178,122,132,112],[178,123,132,113],[178,125,132,115],[178,126,132,116],[179,14,133,8],[179,15,133,9],[179,21,133,15],[180,16,134,10,"console"],[180,23,134,17],[180,24,134,18,"error"],[180,29,134,23],[180,30,134,24],[180,59,134,53,"response"],[180,67,134,61],[180,68,134,62,"status"],[180,74,134,68],[180,76,134,70],[180,77,134,71],[181,14,135,8],[182,12,136,6],[183,10,137,4],[183,11,137,5],[183,12,137,6],[183,19,137,13,"error"],[183,24,137,18],[183,26,137,20],[184,12,138,6,"console"],[184,19,138,13],[184,20,138,14,"error"],[184,25,138,19],[184,26,138,20],[184,55,138,49],[184,57,138,51,"error"],[184,62,138,56],[184,63,138,57],[185,10,139,4],[186,8,140,2],[186,9,140,3],[187,8,140,3],[187,17,91,16,"uploadSensorData"],[187,33,91,32,"uploadSensorData"],[187,34,91,32],[188,10,91,32],[188,17,91,32,"_uploadSensorData"],[188,34,91,32],[188,35,91,32,"apply"],[188,40,91,32],[188,47,91,32,"arguments"],[188,56,91,32],[189,8,91,32],[190,8,91,32],[190,15,91,16,"uploadSensorData"],[190,31,91,32],[191,6,91,32],[191,10,142,2],[192,4,142,2],[193,6,142,2,"key"],[193,9,142,2],[194,6,142,2,"value"],[194,11,142,2],[195,8,142,2],[195,12,142,2,"_downloadUpdatedWarnings"],[195,36,142,2],[195,43,142,2,"_asyncToGenerator"],[195,60,142,2],[195,61,142,2,"default"],[195,68,142,2],[195,70,143,2],[195,83,143,42],[196,10,143,42],[196,14,143,42,"_this2"],[196,20,143,42],[197,10,144,4],[197,14,144,8],[198,12,145,6],[198,16,145,12,"downloadedRegions"],[198,33,145,29],[198,42,145,38,"localDB"],[198,56,145,45],[198,57,145,45,"localDB"],[198,64,145,45],[198,65,145,46,"getDownloadedRegions"],[198,85,145,66],[198,86,145,67],[198,87,145,68],[199,12,145,69],[199,16,145,69,"_loop"],[199,21,145,69],[199,34,145,69,"_loop"],[199,35,145,69,"region"],[199,41,145,69],[199,43,147,46],[200,14,148,8],[200,18,148,14,"response"],[200,26,148,22],[200,35,148,31,"fetch"],[200,40,148,36],[200,41,149,10],[200,44,149,13,"_this2"],[200,50,149,17],[200,51,149,18,"backendUrl"],[200,61,149,28],[200,84,149,51,"region"],[200,90,149,57],[200,91,149,58,"code"],[200,95,149,62],[200,105,149,72,"region"],[200,111,149,78],[200,112,149,79,"lastSync"],[200,120,149,87],[200,122,150,8],[200,123,150,9],[201,14,152,8],[201,18,152,12,"response"],[201,26,152,20],[201,27,152,21,"ok"],[201,29,152,23],[201,31,152,25],[202,16,153,10],[202,20,153,16,"warnings"],[202,28,153,24],[202,37,153,33,"response"],[202,45,153,41],[202,46,153,42,"json"],[202,50,153,46],[202,51,153,47],[202,52,153,48],[203,16,155,10],[203,20,155,14,"warnings"],[203,28,155,22],[203,29,155,23,"length"],[203,35,155,29],[203,38,155,32],[203,39,155,33],[203,41,155,35],[204,18,156,12],[204,22,156,18,"localWarnings"],[204,35,156,47],[204,38,156,50,"warnings"],[204,46,156,58],[204,47,156,59,"map"],[204,50,156,62],[204,51,156,64,"w"],[204,52,156,70],[204,57,156,76],[205,20,157,14,"serverId"],[205,28,157,22],[205,30,157,24,"w"],[205,31,157,25],[205,32,157,26,"_id"],[205,35,157,29],[206,20,158,14,"latitude"],[206,28,158,22],[206,30,158,24,"w"],[206,31,158,25],[206,32,158,26,"latitude"],[206,40,158,34],[207,20,159,14,"longitude"],[207,29,159,23],[207,31,159,25,"w"],[207,32,159,26],[207,33,159,27,"longitude"],[207,42,159,36],[208,20,160,14,"hazardType"],[208,30,160,24],[208,32,160,26,"w"],[208,33,160,27],[208,34,160,28,"hazard_type"],[208,45,160,39],[209,20,161,14,"severity"],[209,28,161,22],[209,30,161,24,"w"],[209,31,161,25],[209,32,161,26,"severity"],[209,40,161,34],[210,20,162,14,"description"],[210,31,162,25],[210,33,162,27,"w"],[210,34,162,28],[210,35,162,29,"description"],[210,46,162,40],[211,20,163,14,"isVerified"],[211,30,163,24],[211,32,163,26,"w"],[211,33,163,27],[211,34,163,28,"is_verified"],[211,45,163,39],[212,20,164,14,"region"],[212,26,164,20],[212,28,164,22,"region"],[212,34,164,28],[212,35,164,29,"code"],[212,39,164,33],[213,20,165,14,"city"],[213,24,165,18],[213,26,165,20,"w"],[213,27,165,21],[213,28,165,22,"city"],[213,32,165,26],[213,36,165,30],[213,38,165,32],[214,20,166,14,"country"],[214,27,166,21],[214,29,166,23,"w"],[214,30,166,24],[214,31,166,25,"country"],[214,38,166,32],[214,42,166,36],[214,44,166,38],[215,20,167,14,"lastUpdated"],[215,31,167,25],[215,33,167,27,"w"],[215,34,167,28],[215,35,167,29,"updated_at"],[215,45,167,39],[215,49,167,43],[215,53,167,47,"Date"],[215,57,167,51],[215,58,167,52],[215,59,167,53],[215,60,167,54,"toISOString"],[215,71,167,65],[215,72,167,66],[216,18,168,12],[216,19,168,13],[216,20,168,14],[216,21,168,15],[217,18,170,12],[217,24,170,18,"localDB"],[217,38,170,25],[217,39,170,25,"localDB"],[217,46,170,25],[217,47,170,26,"saveWarnings"],[217,59,170,38],[217,60,170,39,"localWarnings"],[217,73,170,52],[217,74,170,53],[218,18,171,12],[218,24,171,18,"localDB"],[218,38,171,25],[218,39,171,25,"localDB"],[218,46,171,25],[218,47,171,26,"updateRegionSyncStatus"],[218,69,171,48],[218,70,172,14,"region"],[218,76,172,20],[218,77,172,21,"code"],[218,81,172,25],[218,83,173,14,"region"],[218,89,173,20],[218,90,173,21,"name"],[218,94,173,25],[218,96,174,14,"warnings"],[218,104,174,22],[218,105,174,23,"length"],[218,111,175,12],[218,112,175,13],[219,18,177,12,"console"],[219,25,177,19],[219,26,177,20,"log"],[219,29,177,23],[219,30,177,24],[219,47,177,41,"warnings"],[219,55,177,49],[219,56,177,50,"length"],[219,62,177,56],[219,79,177,73,"region"],[219,85,177,79],[219,86,177,80,"name"],[219,90,177,84],[219,92,177,86],[219,93,177,87],[220,16,178,10],[221,14,179,8],[222,12,180,6],[222,13,180,7],[223,12,147,6],[223,17,147,11],[223,21,147,17,"region"],[223,27,147,23],[223,31,147,27,"downloadedRegions"],[223,48,147,44],[224,14,147,44],[224,21,147,44,"_loop"],[224,26,147,44],[224,27,147,44,"region"],[224,33,147,44],[225,12,147,44],[226,10,181,4],[226,11,181,5],[226,12,181,6],[226,19,181,13,"error"],[226,24,181,18],[226,26,181,20],[227,12,182,6,"console"],[227,19,182,13],[227,20,182,14,"error"],[227,25,182,19],[227,26,182,20],[227,54,182,48],[227,56,182,50,"error"],[227,61,182,55],[227,62,182,56],[228,10,183,4],[229,8,184,2],[229,9,184,3],[230,8,184,3],[230,17,143,16,"downloadUpdatedWarnings"],[230,40,143,39,"downloadUpdatedWarnings"],[230,41,143,39],[231,10,143,39],[231,17,143,39,"_downloadUpdatedWarnings"],[231,41,143,39],[231,42,143,39,"apply"],[231,47,143,39],[231,54,143,39,"arguments"],[231,63,143,39],[232,8,143,39],[233,8,143,39],[233,15,143,16,"downloadUpdatedWarnings"],[233,38,143,39],[234,6,143,39],[234,10,186,2],[235,4,186,2],[236,6,186,2,"key"],[236,9,186,2],[237,6,186,2,"value"],[237,11,186,2],[238,8,186,2],[238,12,186,2,"_downloadRegionData"],[238,31,186,2],[238,38,186,2,"_asyncToGenerator"],[238,55,186,2],[238,56,186,2,"default"],[238,63,186,2],[238,65,187,2],[238,76,187,27,"regionCode"],[238,86,187,45],[238,88,187,47,"regionName"],[238,98,187,65],[238,100,187,67,"bounds"],[238,106,187,95],[238,108,187,115],[239,10,188,4],[239,14,188,8],[240,12,189,6],[240,16,189,12,"networkState"],[240,28,189,24],[240,37,189,33,"Network"],[240,44,189,40],[240,45,189,41,"getNetworkStateAsync"],[240,65,189,61],[240,66,189,62],[240,67,189,63],[241,12,190,6],[241,16,190,10],[241,17,190,11,"networkState"],[241,29,190,23],[241,30,190,24,"isConnected"],[241,41,190,35],[241,43,190,37],[242,14,191,8],[242,20,191,14],[242,24,191,18,"Error"],[242,29,191,23],[242,30,191,24],[242,54,191,48],[242,55,191,49],[243,12,192,6],[244,12,194,6,"console"],[244,19,194,13],[244,20,194,14,"log"],[244,23,194,17],[244,24,194,18],[244,59,194,53,"regionName"],[244,69,194,63],[244,74,194,68],[244,75,194,69],[245,12,196,6],[245,16,196,12,"response"],[245,24,196,20],[245,33,196,29,"fetch"],[245,38,196,34],[245,39,197,8],[245,42,197,11],[245,46,197,15],[245,47,197,16,"backendUrl"],[245,57,197,26],[245,80,197,49,"regionCode"],[245,90,197,59],[245,98,197,67],[245,101,198,8],[245,110,198,17,"bounds"],[245,116,198,23],[245,117,198,24,"north"],[245,122,198,29],[245,132,198,39,"bounds"],[245,138,198,45],[245,139,198,46,"south"],[245,144,198,51],[245,153,198,60,"bounds"],[245,159,198,66],[245,160,198,67,"east"],[245,164,198,71],[245,173,198,80,"bounds"],[245,179,198,86],[245,180,198,87,"west"],[245,184,198,91],[245,186,199,6],[245,187,199,7],[246,12,201,6],[246,16,201,10],[246,17,201,11,"response"],[246,25,201,19],[246,26,201,20,"ok"],[246,28,201,22],[246,30,201,24],[247,14,202,8],[247,20,202,14],[247,24,202,18,"Error"],[247,29,202,23],[247,30,202,24],[247,65,202,59,"response"],[247,73,202,67],[247,74,202,68,"status"],[247,80,202,74],[247,82,202,76],[247,83,202,77],[248,12,203,6],[249,12,205,6],[249,16,205,12,"warnings"],[249,24,205,20],[249,33,205,29,"response"],[249,41,205,37],[249,42,205,38,"json"],[249,46,205,42],[249,47,205,43],[249,48,205,44],[250,12,207,6],[250,16,207,12,"localWarnings"],[250,29,207,41],[250,32,207,44,"warnings"],[250,40,207,52],[250,41,207,53,"map"],[250,44,207,56],[250,45,207,58,"w"],[250,46,207,64],[250,51,207,70],[251,14,208,8,"serverId"],[251,22,208,16],[251,24,208,18,"w"],[251,25,208,19],[251,26,208,20,"_id"],[251,29,208,23],[252,14,209,8,"latitude"],[252,22,209,16],[252,24,209,18,"w"],[252,25,209,19],[252,26,209,20,"latitude"],[252,34,209,28],[253,14,210,8,"longitude"],[253,23,210,17],[253,25,210,19,"w"],[253,26,210,20],[253,27,210,21,"longitude"],[253,36,210,30],[254,14,211,8,"hazardType"],[254,24,211,18],[254,26,211,20,"w"],[254,27,211,21],[254,28,211,22,"hazard_type"],[254,39,211,33],[255,14,212,8,"severity"],[255,22,212,16],[255,24,212,18,"w"],[255,25,212,19],[255,26,212,20,"severity"],[255,34,212,28],[256,14,213,8,"description"],[256,25,213,19],[256,27,213,21,"w"],[256,28,213,22],[256,29,213,23,"description"],[256,40,213,34],[257,14,214,8,"isVerified"],[257,24,214,18],[257,26,214,20,"w"],[257,27,214,21],[257,28,214,22,"is_verified"],[257,39,214,33],[258,14,215,8,"region"],[258,20,215,14],[258,22,215,16,"regionCode"],[258,32,215,26],[259,14,216,8,"city"],[259,18,216,12],[259,20,216,14,"w"],[259,21,216,15],[259,22,216,16,"city"],[259,26,216,20],[259,30,216,24],[259,32,216,26],[260,14,217,8,"country"],[260,21,217,15],[260,23,217,17,"w"],[260,24,217,18],[260,25,217,19,"country"],[260,32,217,26],[260,36,217,30],[260,38,217,32],[261,14,218,8,"lastUpdated"],[261,25,218,19],[261,27,218,21,"w"],[261,28,218,22],[261,29,218,23,"updated_at"],[261,39,218,33],[261,43,218,37],[261,47,218,41,"Date"],[261,51,218,45],[261,52,218,46],[261,53,218,47],[261,54,218,48,"toISOString"],[261,65,218,59],[261,66,218,60],[262,12,219,6],[262,13,219,7],[262,14,219,8],[262,15,219,9],[263,12,221,6],[263,18,221,12,"localDB"],[263,32,221,19],[263,33,221,19,"localDB"],[263,40,221,19],[263,41,221,20,"saveWarnings"],[263,53,221,32],[263,54,221,33,"localWarnings"],[263,67,221,46],[263,68,221,47],[264,12,222,6],[264,18,222,12,"localDB"],[264,32,222,19],[264,33,222,19,"localDB"],[264,40,222,19],[264,41,222,20,"updateRegionSyncStatus"],[264,63,222,42],[264,64,222,43,"regionCode"],[264,74,222,53],[264,76,222,55,"regionName"],[264,86,222,65],[264,88,222,67,"warnings"],[264,96,222,75],[264,97,222,76,"length"],[264,103,222,82],[264,104,222,83],[265,12,224,6,"console"],[265,19,224,13],[265,20,224,14,"log"],[265,23,224,17],[265,24,224,18],[265,40,224,34,"warnings"],[265,48,224,42],[265,49,224,43,"length"],[265,55,224,49],[265,72,224,66,"regionName"],[265,82,224,76],[265,84,224,78],[265,85,224,79],[266,12,225,6],[266,19,225,13],[266,23,225,17],[267,10,226,4],[267,11,226,5],[267,12,226,6],[267,19,226,13,"error"],[267,24,226,18],[267,26,226,20],[268,12,227,6,"console"],[268,19,227,13],[268,20,227,14,"error"],[268,25,227,19],[268,26,227,20],[268,57,227,51,"regionName"],[268,67,227,61],[268,70,227,64],[268,72,227,66,"error"],[268,77,227,71],[268,78,227,72],[269,12,228,6],[269,19,228,13],[269,24,228,18],[270,10,229,4],[271,8,230,2],[271,9,230,3],[272,8,230,3],[272,17,187,8,"downloadRegionData"],[272,35,187,26,"downloadRegionData"],[272,36,187,26,"_x"],[272,38,187,26],[272,40,187,26,"_x2"],[272,43,187,26],[272,45,187,26,"_x3"],[272,48,187,26],[273,10,187,26],[273,17,187,26,"_downloadRegionData"],[273,36,187,26],[273,37,187,26,"apply"],[273,42,187,26],[273,49,187,26,"arguments"],[273,58,187,26],[274,8,187,26],[275,8,187,26],[275,15,187,8,"downloadRegionData"],[275,33,187,26],[276,6,187,26],[277,4,187,26],[278,6,187,26,"key"],[278,9,187,26],[279,6,187,26,"value"],[279,11,187,26],[280,8,187,26],[280,12,187,26,"_getAvailableRegions"],[280,32,187,26],[280,39,187,26,"_asyncToGenerator"],[280,56,187,26],[280,57,187,26,"default"],[280,64,187,26],[280,66,232,2],[280,79,232,53],[281,10,233,4],[281,14,233,8],[282,12,234,6],[282,16,234,12,"networkState"],[282,28,234,24],[282,37,234,33,"Network"],[282,44,234,40],[282,45,234,41,"getNetworkStateAsync"],[282,65,234,61],[282,66,234,62],[282,67,234,63],[283,12,235,6],[283,16,235,10],[283,17,235,11,"networkState"],[283,29,235,23],[283,30,235,24,"isConnected"],[283,41,235,35],[283,43,235,37],[284,14,236,8],[284,21,236,15],[284,23,236,17],[285,12,237,6],[286,12,239,6],[286,16,239,12,"response"],[286,24,239,20],[286,33,239,29,"fetch"],[286,38,239,34],[286,39,239,35],[286,42,239,38],[286,46,239,42],[286,47,239,43,"backendUrl"],[286,57,239,53],[286,80,239,76],[286,81,239,77],[287,12,240,6],[287,16,240,10],[287,17,240,11,"response"],[287,25,240,19],[287,26,240,20,"ok"],[287,28,240,22],[287,30,240,24],[287,37,240,31],[287,39,240,33],[288,12,242,6],[288,25,242,19,"response"],[288,33,242,27],[288,34,242,28,"json"],[288,38,242,32],[288,39,242,33],[288,40,242,34],[289,10,243,4],[289,11,243,5],[289,12,243,6],[289,19,243,13,"error"],[289,24,243,18],[289,26,243,20],[290,12,244,6,"console"],[290,19,244,13],[290,20,244,14,"error"],[290,25,244,19],[290,26,244,20],[290,62,244,56],[290,64,244,58,"error"],[290,69,244,63],[290,70,244,64],[291,12,245,6],[291,19,245,13],[291,21,245,15],[292,10,246,4],[293,8,247,2],[293,9,247,3],[294,8,247,3],[294,17,232,8,"getAvailableRegions"],[294,36,232,27,"getAvailableRegions"],[294,37,232,27],[295,10,232,27],[295,17,232,27,"_getAvailableRegions"],[295,37,232,27],[295,38,232,27,"apply"],[295,43,232,27],[295,50,232,27,"arguments"],[295,59,232,27],[296,8,232,27],[297,8,232,27],[297,15,232,8,"getAvailableRegions"],[297,34,232,27],[298,6,232,27],[298,10,249,2],[299,4,249,2],[300,6,249,2,"key"],[300,9,249,2],[301,6,249,2,"value"],[301,11,249,2],[302,8,249,2],[302,12,249,2,"_saveOfflineSensorData"],[302,34,249,2],[302,41,249,2,"_asyncToGenerator"],[302,58,249,2],[302,59,249,2,"default"],[302,66,249,2],[302,68,250,2],[302,79,251,4,"latitude"],[302,87,251,20],[302,89,252,4,"longitude"],[302,98,252,21],[302,100,253,4,"speed"],[302,105,253,17],[302,107,254,4,"accuracy"],[302,115,254,20],[302,117,255,4,"accelerometer"],[302,130,255,54],[302,132,256,4,"roadQuality"],[302,143,256,23],[302,145,257,21],[303,10,258,4],[303,14,258,10,"sensorData"],[303,24,258,63],[303,27,258,66],[304,12,259,6,"latitude"],[304,20,259,14],[305,12,260,6,"longitude"],[305,21,260,15],[306,12,261,6,"timestamp"],[306,21,261,15],[306,23,261,17],[306,27,261,21,"Date"],[306,31,261,25],[306,32,261,26],[306,33,261,27],[306,34,261,28,"toISOString"],[306,45,261,39],[306,46,261,40],[306,47,261,41],[307,12,262,6,"speed"],[307,17,262,11],[308,12,263,6,"accuracy"],[308,20,263,14],[309,12,264,6,"accelerometer"],[309,25,264,19],[310,12,265,6,"roadQuality"],[310,23,265,17],[311,12,266,6,"isSynced"],[311,20,266,14],[311,22,266,16],[312,10,267,4],[312,11,267,5],[313,10,269,4],[313,23,269,17,"localDB"],[313,37,269,24],[313,38,269,24,"localDB"],[313,45,269,24],[313,46,269,25,"saveSensorData"],[313,60,269,39],[313,61,269,40,"sensorData"],[313,71,269,50],[313,72,269,51],[314,8,270,2],[314,9,270,3],[315,8,270,3],[315,17,250,8,"saveOfflineSensorData"],[315,38,250,29,"saveOfflineSensorData"],[315,39,250,29,"_x4"],[315,42,250,29],[315,44,250,29,"_x5"],[315,47,250,29],[315,49,250,29,"_x6"],[315,52,250,29],[315,54,250,29,"_x7"],[315,57,250,29],[315,59,250,29,"_x8"],[315,62,250,29],[315,64,250,29,"_x9"],[315,67,250,29],[316,10,250,29],[316,17,250,29,"_saveOfflineSensorData"],[316,39,250,29],[316,40,250,29,"apply"],[316,45,250,29],[316,52,250,29,"arguments"],[316,61,250,29],[317,8,250,29],[318,8,250,29],[318,15,250,8,"saveOfflineSensorData"],[318,36,250,29],[319,6,250,29],[320,4,250,29],[321,6,250,29,"key"],[321,9,250,29],[322,6,250,29,"value"],[322,11,250,29],[323,8,250,29],[323,12,250,29,"_getNearbyWarningsOffline"],[323,37,250,29],[323,44,250,29,"_asyncToGenerator"],[323,61,250,29],[323,62,250,29,"default"],[323,69,250,29],[323,71,272,2],[323,82,273,4,"latitude"],[323,90,273,20],[323,92,274,4,"longitude"],[323,101,274,21],[323,103,276,29],[324,10,276,29],[324,14,275,4,"radiusKm"],[324,22,275,20],[324,25,275,20,"arguments"],[324,34,275,20],[324,35,275,20,"length"],[324,41,275,20],[324,49,275,20,"arguments"],[324,58,275,20],[324,66,275,20,"undefined"],[324,75,275,20],[324,78,275,20,"arguments"],[324,87,275,20],[324,93,275,23],[324,94,275,24],[325,10,277,4],[325,23,277,17,"localDB"],[325,37,277,24],[325,38,277,24,"localDB"],[325,45,277,24],[325,46,277,25,"getNearbyWarnings"],[325,63,277,42],[325,64,277,43,"latitude"],[325,72,277,51],[325,74,277,53,"longitude"],[325,83,277,62],[325,85,277,64,"radiusKm"],[325,93,277,72],[325,94,277,73],[326,8,278,2],[326,9,278,3],[327,8,278,3],[327,17,272,8,"getNearbyWarningsOffline"],[327,41,272,32,"getNearbyWarningsOffline"],[327,42,272,32,"_x0"],[327,45,272,32],[327,47,272,32,"_x1"],[327,50,272,32],[328,10,272,32],[328,17,272,32,"_getNearbyWarningsOffline"],[328,42,272,32],[328,43,272,32,"apply"],[328,48,272,32],[328,55,272,32,"arguments"],[328,64,272,32],[329,8,272,32],[330,8,272,32],[330,15,272,8,"getNearbyWarningsOffline"],[330,39,272,32],[331,6,272,32],[331,10,280,2],[332,4,280,2],[333,6,280,2,"key"],[333,9,280,2],[334,6,280,2,"value"],[334,11,280,2],[335,8,280,2],[335,12,280,2,"_getSyncStatus"],[335,26,280,2],[335,33,280,2,"_asyncToGenerator"],[335,50,280,2],[335,51,280,2,"default"],[335,58,280,2],[335,60,281,2],[335,73,281,45],[336,10,282,4],[336,23,282,17,"localDB"],[336,37,282,24],[336,38,282,24,"localDB"],[336,45,282,24],[336,46,282,25,"getSyncStatus"],[336,59,282,38],[336,60,282,39],[336,61,282,40],[337,8,283,2],[337,9,283,3],[338,8,283,3],[338,17,281,8,"getSyncStatus"],[338,30,281,21,"getSyncStatus"],[338,31,281,21],[339,10,281,21],[339,17,281,21,"_getSyncStatus"],[339,31,281,21],[339,32,281,21,"apply"],[339,37,281,21],[339,44,281,21,"arguments"],[339,53,281,21],[340,8,281,21],[341,8,281,21],[341,15,281,8,"getSyncStatus"],[341,28,281,21],[342,6,281,21],[343,4,281,21],[344,6,281,21,"key"],[344,9,281,21],[345,6,281,21,"value"],[345,11,281,21],[346,8,281,21],[346,12,281,21,"_getDatabaseStats"],[346,29,281,21],[346,36,281,21,"_asyncToGenerator"],[346,53,281,21],[346,54,281,21,"default"],[346,61,281,21],[346,63,285,2],[346,76,285,27],[347,10,286,4],[347,23,286,17,"localDB"],[347,37,286,24],[347,38,286,24,"localDB"],[347,45,286,24],[347,46,286,25,"getDatabaseStats"],[347,62,286,41],[347,63,286,42],[347,64,286,43],[348,8,287,2],[348,9,287,3],[349,8,287,3],[349,17,285,8,"getDatabaseStats"],[349,33,285,24,"getDatabaseStats"],[349,34,285,24],[350,10,285,24],[350,17,285,24,"_getDatabaseStats"],[350,34,285,24],[350,35,285,24,"apply"],[350,40,285,24],[350,47,285,24,"arguments"],[350,56,285,24],[351,8,285,24],[352,8,285,24],[352,15,285,8,"getDatabaseStats"],[352,31,285,24],[353,6,285,24],[354,4,285,24],[355,6,285,24,"key"],[355,9,285,24],[356,6,285,24,"value"],[356,11,285,24],[357,8,285,24],[357,12,285,24,"_forceFullSync"],[357,26,285,24],[357,33,285,24,"_asyncToGenerator"],[357,50,285,24],[357,51,285,24,"default"],[357,58,285,24],[357,60,289,2],[357,73,289,42],[358,10,290,4,"console"],[358,17,290,11],[358,18,290,12,"log"],[358,21,290,15],[358,22,290,16],[358,47,290,41],[358,48,290,42],[359,10,291,4],[359,23,291,17],[359,27,291,21],[359,28,291,22,"syncWithServer"],[359,42,291,36],[359,43,291,37],[359,44,291,38],[360,8,292,2],[360,9,292,3],[361,8,292,3],[361,17,289,8,"forceFullSync"],[361,30,289,21,"forceFullSync"],[361,31,289,21],[362,10,289,21],[362,17,289,21,"_forceFullSync"],[362,31,289,21],[362,32,289,21,"apply"],[362,37,289,21],[362,44,289,21,"arguments"],[362,53,289,21],[363,8,289,21],[364,8,289,21],[364,15,289,8,"forceFullSync"],[364,28,289,21],[365,6,289,21],[365,10,294,2],[366,4,294,2],[367,6,294,2,"key"],[367,9,294,2],[368,6,294,2,"value"],[368,11,294,2],[369,8,294,2],[369,12,294,2,"_clearLocalData"],[369,27,294,2],[369,34,294,2,"_asyncToGenerator"],[369,51,294,2],[369,52,294,2,"default"],[369,59,294,2],[369,61,295,2],[369,74,295,25],[370,10,296,4],[371,10,297,4,"console"],[371,17,297,11],[371,18,297,12,"log"],[371,21,297,15],[371,22,297,16],[371,54,297,48],[371,55,297,49],[372,10,298,4],[373,8,299,2],[373,9,299,3],[374,8,299,3],[374,17,295,8,"clearLocalData"],[374,31,295,22,"clearLocalData"],[374,32,295,22],[375,10,295,22],[375,17,295,22,"_clearLocalData"],[375,32,295,22],[375,33,295,22,"apply"],[375,38,295,22],[375,45,295,22,"arguments"],[375,54,295,22],[376,8,295,22],[377,8,295,22],[377,15,295,8,"clearLocalData"],[377,29,295,22],[378,6,295,22],[379,4,295,22],[380,2,295,22],[381,2,302,7],[381,6,302,13,"syncService"],[381,17,302,24],[381,20,302,27],[381,24,302,31,"SyncService"],[381,35,302,42],[381,36,302,43],[381,37,302,44],[382,0,302,45],[382,3]],"functionMap":{"names":["<global>","SyncService","constructor","initialize","startPeriodicSync","setInterval$argument_0","stopPeriodicSync","syncWithServer","uploadSensorData","batch.map$argument_0","downloadUpdatedWarnings","warnings.map$argument_0","downloadRegionData","getAvailableRegions","saveOfflineSensorData","getNearbyWarningsOffline","getSyncStatus","getDatabaseStats","forceFullSync","clearLocalData"],"mappings":"AAA;OCgB;ECK;GDE;EEE;GFa;EGG;oCCE;KDK;GHC;EKE;GLK;EMG;GN4B;EOG;4BCqB;cDQ;qCCM,gBD;GPc;ESG;+DCa;cDY;GTgB;EWG;yDDoB;QCY;GXW;EYE;GZe;EaG;GboB;EcE;GdM;EeG;GfE;EgBE;GhBE;EiBE;GjBG;EkBG;GlBI;CDC"},"hasCjsExports":false},"type":"js/module"}]}