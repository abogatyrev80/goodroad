{"dependencies":[{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"YisBBiy2Xm9DEVdFebZ2nbgAHBo=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"yg7e6laZwmpbIvId5jovq9ugXp8=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30=","exportNames":["*"],"imports":1}},{"name":"expo-sqlite","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":38,"index":38}}],"key":"QiSBWdXsWfNLYLVy2O3EksR8vJg=","exportNames":["*"],"imports":1}},{"name":"expo-network","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":39},"end":{"line":2,"column":40,"index":79}}],"key":"1uj8I4G/JNBf3YRANaksFTH4dPs=","exportNames":["*"],"imports":1}},{"name":"@react-native-async-storage/async-storage","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":80},"end":{"line":3,"column":69,"index":149}}],"key":"0kSRlooyBOaYM9tlTtK91nq+uds=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  function _interopNamespace(e) {\n    if (e && e.__esModule) return e;\n    var n = {};\n    if (e) Object.keys(e).forEach(function (k) {\n      var d = Object.getOwnPropertyDescriptor(e, k);\n      Object.defineProperty(n, k, d.get ? d : {\n        enumerable: true,\n        get: function () {\n          return e[k];\n        }\n      });\n    });\n    n.default = e;\n    return n;\n  }\n  Object.defineProperty(exports, \"localDB\", {\n    enumerable: true,\n    get: function () {\n      return localDB;\n    }\n  });\n  var _babelRuntimeHelpersAsyncToGenerator = require(_dependencyMap[0], \"@babel/runtime/helpers/asyncToGenerator\");\n  var _asyncToGenerator = _interopDefault(_babelRuntimeHelpersAsyncToGenerator);\n  var _babelRuntimeHelpersClassCallCheck = require(_dependencyMap[1], \"@babel/runtime/helpers/classCallCheck\");\n  var _classCallCheck = _interopDefault(_babelRuntimeHelpersClassCallCheck);\n  var _babelRuntimeHelpersCreateClass = require(_dependencyMap[2], \"@babel/runtime/helpers/createClass\");\n  var _createClass = _interopDefault(_babelRuntimeHelpersCreateClass);\n  var _expoSqlite = require(_dependencyMap[3], \"expo-sqlite\");\n  var SQLite = _interopNamespace(_expoSqlite);\n  var _expoNetwork = require(_dependencyMap[4], \"expo-network\");\n  var Network = _interopNamespace(_expoNetwork);\n  var _reactNativeAsyncStorageAsyncStorage = require(_dependencyMap[5], \"@react-native-async-storage/async-storage\");\n  var AsyncStorage = _interopDefault(_reactNativeAsyncStorageAsyncStorage);\n  // Типы для локальных данных\n  var LocalDatabaseManager = /*#__PURE__*/function () {\n    function LocalDatabaseManager() {\n      (0, _classCallCheck.default)(this, LocalDatabaseManager);\n      this.db = null;\n      this.syncInProgress = false;\n    }\n    return (0, _createClass.default)(LocalDatabaseManager, [{\n      key: \"initialize\",\n      value: function () {\n        var _initialize = (0, _asyncToGenerator.default)(function* () {\n          try {\n            this.db = yield SQLite.openDatabaseAsync('good_road.db');\n            yield this.createTables();\n            console.log('✅ Local database initialized');\n          } catch (error) {\n            console.error('❌ Database initialization error:', error);\n            throw error;\n          }\n        });\n        function initialize() {\n          return _initialize.apply(this, arguments);\n        }\n        return initialize;\n      }()\n    }, {\n      key: \"createTables\",\n      value: function () {\n        var _createTables = (0, _asyncToGenerator.default)(function* () {\n          if (!this.db) throw new Error('Database not initialized');\n\n          // Таблица для данных датчиков (собранных пользователем)\n          yield this.db.execAsync(`\n      CREATE TABLE IF NOT EXISTS sensor_data (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        server_id TEXT,\n        latitude REAL NOT NULL,\n        longitude REAL NOT NULL,\n        timestamp TEXT NOT NULL,\n        speed REAL DEFAULT 0,\n        accuracy REAL DEFAULT 0,\n        accelerometer_x REAL DEFAULT 0,\n        accelerometer_y REAL DEFAULT 0,\n        accelerometer_z REAL DEFAULT 0,\n        road_quality REAL DEFAULT 50,\n        is_synced INTEGER DEFAULT 0,\n        created_at TEXT NOT NULL\n      );\n    `);\n\n          // Таблица для предупреждений (скачанных с сервера)\n          yield this.db.execAsync(`\n      CREATE TABLE IF NOT EXISTS warnings (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        server_id TEXT UNIQUE,\n        latitude REAL NOT NULL,\n        longitude REAL NOT NULL,\n        hazard_type TEXT NOT NULL,\n        severity TEXT NOT NULL,\n        description TEXT,\n        is_verified INTEGER DEFAULT 0,\n        region TEXT,\n        city TEXT,\n        country TEXT,\n        last_updated TEXT NOT NULL\n      );\n    `);\n\n          // Таблица для статуса синхронизации регионов\n          yield this.db.execAsync(`\n      CREATE TABLE IF NOT EXISTS sync_regions (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        region_code TEXT UNIQUE,\n        region_name TEXT,\n        last_sync TEXT,\n        warning_count INTEGER DEFAULT 0\n      );\n    `);\n\n          // Индексы для быстрого поиска по координатам\n          yield this.db.execAsync(`\n      CREATE INDEX IF NOT EXISTS idx_sensor_location \n      ON sensor_data(latitude, longitude);\n    `);\n          yield this.db.execAsync(`\n      CREATE INDEX IF NOT EXISTS idx_warnings_location \n      ON warnings(latitude, longitude);\n    `);\n          console.log('✅ Database tables created');\n        });\n        function createTables() {\n          return _createTables.apply(this, arguments);\n        }\n        return createTables;\n      }() // === SENSOR DATA MANAGEMENT ===\n    }, {\n      key: \"saveSensorData\",\n      value: function () {\n        var _saveSensorData = (0, _asyncToGenerator.default)(function* (data) {\n          if (!this.db) throw new Error('Database not initialized');\n          var result = yield this.db.runAsync(`\n      INSERT INTO sensor_data (\n        server_id, latitude, longitude, timestamp, speed, accuracy,\n        accelerometer_x, accelerometer_y, accelerometer_z, \n        road_quality, is_synced, created_at\n      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n    `, [data.serverId || null, data.latitude, data.longitude, data.timestamp, data.speed, data.accuracy, data.accelerometer.x, data.accelerometer.y, data.accelerometer.z, data.roadQuality, data.isSynced ? 1 : 0, new Date().toISOString()]);\n          console.log(`💾 Saved sensor data locally (ID: ${result.lastInsertRowId})`);\n          return result.lastInsertRowId;\n        });\n        function saveSensorData(_x) {\n          return _saveSensorData.apply(this, arguments);\n        }\n        return saveSensorData;\n      }()\n    }, {\n      key: \"getUnsyncedSensorData\",\n      value: function () {\n        var _getUnsyncedSensorData = (0, _asyncToGenerator.default)(function* () {\n          if (!this.db) throw new Error('Database not initialized');\n          var result = yield this.db.getAllAsync(`\n      SELECT * FROM sensor_data WHERE is_synced = 0 ORDER BY created_at\n    `);\n          return result.map(row => ({\n            id: row.id,\n            serverId: row.server_id,\n            latitude: row.latitude,\n            longitude: row.longitude,\n            timestamp: row.timestamp,\n            speed: row.speed,\n            accuracy: row.accuracy,\n            accelerometer: {\n              x: row.accelerometer_x,\n              y: row.accelerometer_y,\n              z: row.accelerometer_z\n            },\n            roadQuality: row.road_quality,\n            isSynced: row.is_synced === 1,\n            createdAt: row.created_at\n          }));\n        });\n        function getUnsyncedSensorData() {\n          return _getUnsyncedSensorData.apply(this, arguments);\n        }\n        return getUnsyncedSensorData;\n      }()\n    }, {\n      key: \"markSensorDataSynced\",\n      value: function () {\n        var _markSensorDataSynced = (0, _asyncToGenerator.default)(function* (localIds, serverIds) {\n          if (!this.db || localIds.length === 0) return;\n          var placeholders = localIds.map(() => '?').join(',');\n          yield this.db.runAsync(`\n      UPDATE sensor_data \n      SET is_synced = 1 ${serverIds ? ', server_id = ?' : ''}\n      WHERE id IN (${placeholders})\n    `, serverIds ? [...localIds, ...serverIds] : localIds);\n          console.log(`✅ Marked ${localIds.length} sensor data records as synced`);\n        });\n        function markSensorDataSynced(_x2, _x3) {\n          return _markSensorDataSynced.apply(this, arguments);\n        }\n        return markSensorDataSynced;\n      }() // === WARNINGS MANAGEMENT ===\n    }, {\n      key: \"saveWarnings\",\n      value: function () {\n        var _saveWarnings = (0, _asyncToGenerator.default)(function* (warnings) {\n          if (!this.db || warnings.length === 0) return;\n          var statement = yield this.db.prepareAsync(`\n      INSERT OR REPLACE INTO warnings (\n        server_id, latitude, longitude, hazard_type, severity,\n        description, is_verified, region, city, country, last_updated\n      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n    `);\n          try {\n            for (var warning of warnings) {\n              yield statement.executeAsync([warning.serverId || `local_${Date.now()}_${Math.random()}`, warning.latitude, warning.longitude, warning.hazardType, warning.severity, warning.description || '', warning.isVerified ? 1 : 0, warning.region || '', warning.city || '', warning.country || '', warning.lastUpdated]);\n            }\n            console.log(`💾 Saved ${warnings.length} warnings locally`);\n          } finally {\n            yield statement.finalizeAsync();\n          }\n        });\n        function saveWarnings(_x4) {\n          return _saveWarnings.apply(this, arguments);\n        }\n        return saveWarnings;\n      }()\n    }, {\n      key: \"getNearbyWarnings\",\n      value: function () {\n        var _getNearbyWarnings = (0, _asyncToGenerator.default)(function* (latitude, longitude) {\n          var radiusKm = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n          if (!this.db) throw new Error('Database not initialized');\n\n          // Простое приближение для поиска в радиусе\n          var latRange = radiusKm / 111; // ~1 градус = 111 км\n          var lonRange = radiusKm / (111 * Math.cos(latitude * Math.PI / 180));\n          var result = yield this.db.getAllAsync(`\n      SELECT * FROM warnings \n      WHERE latitude BETWEEN ? AND ? \n      AND longitude BETWEEN ? AND ?\n      AND is_verified = 1\n      ORDER BY \n        (latitude - ?) * (latitude - ?) + \n        (longitude - ?) * (longitude - ?)\n      LIMIT 50\n    `, [latitude - latRange, latitude + latRange, longitude - lonRange, longitude + lonRange, latitude, latitude, longitude, longitude]);\n          return result.map(row => ({\n            id: row.id,\n            serverId: row.server_id,\n            latitude: row.latitude,\n            longitude: row.longitude,\n            hazardType: row.hazard_type,\n            severity: row.severity,\n            description: row.description,\n            isVerified: row.is_verified === 1,\n            region: row.region,\n            city: row.city,\n            country: row.country,\n            lastUpdated: row.last_updated\n          }));\n        });\n        function getNearbyWarnings(_x5, _x6) {\n          return _getNearbyWarnings.apply(this, arguments);\n        }\n        return getNearbyWarnings;\n      }() // === REGION MANAGEMENT ===\n    }, {\n      key: \"updateRegionSyncStatus\",\n      value: function () {\n        var _updateRegionSyncStatus = (0, _asyncToGenerator.default)(function* (regionCode, regionName, warningCount) {\n          if (!this.db) throw new Error('Database not initialized');\n          yield this.db.runAsync(`\n      INSERT OR REPLACE INTO sync_regions (region_code, region_name, last_sync, warning_count)\n      VALUES (?, ?, ?, ?)\n    `, [regionCode, regionName, new Date().toISOString(), warningCount]);\n          console.log(`📍 Updated sync status for region: ${regionName} (${warningCount} warnings)`);\n        });\n        function updateRegionSyncStatus(_x7, _x8, _x9) {\n          return _updateRegionSyncStatus.apply(this, arguments);\n        }\n        return updateRegionSyncStatus;\n      }()\n    }, {\n      key: \"getDownloadedRegions\",\n      value: function () {\n        var _getDownloadedRegions = (0, _asyncToGenerator.default)(function* () {\n          if (!this.db) throw new Error('Database not initialized');\n          var result = yield this.db.getAllAsync(`\n      SELECT * FROM sync_regions ORDER BY region_name\n    `);\n          return result.map(row => ({\n            code: row.region_code,\n            name: row.region_name,\n            lastSync: row.last_sync,\n            warningCount: row.warning_count\n          }));\n        });\n        function getDownloadedRegions() {\n          return _getDownloadedRegions.apply(this, arguments);\n        }\n        return getDownloadedRegions;\n      }() // === SYNC STATUS ===\n    }, {\n      key: \"getSyncStatus\",\n      value: function () {\n        var _getSyncStatus = (0, _asyncToGenerator.default)(function* () {\n          var lastSyncTime = (yield AsyncStorage.default.getItem('last_sync_time')) || 'Never';\n          var downloadedRegions = yield this.getDownloadedRegions();\n          var unsyncedData = yield this.getUnsyncedSensorData();\n          var networkState = yield Network.getNetworkStateAsync();\n          return {\n            lastSyncTime,\n            pendingSensorData: unsyncedData.length,\n            downloadedRegions: downloadedRegions.map(r => r.name),\n            isOnline: networkState.isConnected || false\n          };\n        });\n        function getSyncStatus() {\n          return _getSyncStatus.apply(this, arguments);\n        }\n        return getSyncStatus;\n      }() // === DATA CLEANUP ===\n    }, {\n      key: \"cleanupOldData\",\n      value: function () {\n        var _cleanupOldData = (0, _asyncToGenerator.default)(function* () {\n          var daysOld = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 30;\n          if (!this.db) return;\n          var cutoffDate = new Date();\n          cutoffDate.setDate(cutoffDate.getDate() - daysOld);\n          var cutoffISO = cutoffDate.toISOString();\n\n          // Удаляем старые синхронизированные данные датчиков\n          var sensorResult = yield this.db.runAsync(`\n      DELETE FROM sensor_data \n      WHERE is_synced = 1 AND created_at < ?\n    `, [cutoffISO]);\n\n          // Удаляем старые неверифицированные предупреждения\n          var warningResult = yield this.db.runAsync(`\n      DELETE FROM warnings \n      WHERE is_verified = 0 AND last_updated < ?\n    `, [cutoffISO]);\n          console.log(`🧹 Cleanup: removed ${sensorResult.changes} old sensor records, ${warningResult.changes} old warnings`);\n        });\n        function cleanupOldData() {\n          return _cleanupOldData.apply(this, arguments);\n        }\n        return cleanupOldData;\n      }()\n    }, {\n      key: \"getDatabaseStats\",\n      value: function () {\n        var _getDatabaseStats = (0, _asyncToGenerator.default)(function* () {\n          if (!this.db) return null;\n          var sensorCount = yield this.db.getFirstAsync(`SELECT COUNT(*) as count FROM sensor_data`);\n          var warningCount = yield this.db.getFirstAsync(`SELECT COUNT(*) as count FROM warnings`);\n          var unsyncedCount = yield this.db.getFirstAsync(`SELECT COUNT(*) as count FROM sensor_data WHERE is_synced = 0`);\n          return {\n            totalSensorData: sensorCount.count,\n            totalWarnings: warningCount.count,\n            unsyncedData: unsyncedCount.count\n          };\n        });\n        function getDatabaseStats() {\n          return _getDatabaseStats.apply(this, arguments);\n        }\n        return getDatabaseStats;\n      }()\n    }]);\n  }();\n  var localDB = new LocalDatabaseManager();\n});","lineCount":380,"map":[[27,2,350,0,"Object"],[27,8,350,0],[27,9,350,0,"defineProperty"],[27,23,350,0],[27,24,350,0,"exports"],[27,31,350,0],[28,4,350,0,"enumerable"],[28,14,350,0],[29,4,350,0,"get"],[29,7,350,0],[29,18,350,0,"get"],[29,19,350,0],[30,6,350,0],[30,13,350,0,"localDB"],[30,20,350,0],[31,4,350,0],[32,2,350,0],[33,2,350,50],[33,6,350,50,"_babelRuntimeHelpersAsyncToGenerator"],[33,42,350,50],[33,45,350,50,"require"],[33,52,350,50],[33,53,350,50,"_dependencyMap"],[33,67,350,50],[34,2,350,50],[34,6,350,50,"_asyncToGenerator"],[34,23,350,50],[34,26,350,50,"_interopDefault"],[34,41,350,50],[34,42,350,50,"_babelRuntimeHelpersAsyncToGenerator"],[34,78,350,50],[35,2,350,50],[35,6,350,50,"_babelRuntimeHelpersClassCallCheck"],[35,40,350,50],[35,43,350,50,"require"],[35,50,350,50],[35,51,350,50,"_dependencyMap"],[35,65,350,50],[36,2,350,50],[36,6,350,50,"_classCallCheck"],[36,21,350,50],[36,24,350,50,"_interopDefault"],[36,39,350,50],[36,40,350,50,"_babelRuntimeHelpersClassCallCheck"],[36,74,350,50],[37,2,350,50],[37,6,350,50,"_babelRuntimeHelpersCreateClass"],[37,37,350,50],[37,40,350,50,"require"],[37,47,350,50],[37,48,350,50,"_dependencyMap"],[37,62,350,50],[38,2,350,50],[38,6,350,50,"_createClass"],[38,18,350,50],[38,21,350,50,"_interopDefault"],[38,36,350,50],[38,37,350,50,"_babelRuntimeHelpersCreateClass"],[38,68,350,50],[39,2,1,0],[39,6,1,0,"_expoSqlite"],[39,17,1,0],[39,20,1,0,"require"],[39,27,1,0],[39,28,1,0,"_dependencyMap"],[39,42,1,0],[40,2,1,0],[40,6,1,0,"SQLite"],[40,12,1,0],[40,15,1,0,"_interopNamespace"],[40,32,1,0],[40,33,1,0,"_expoSqlite"],[40,44,1,0],[41,2,2,0],[41,6,2,0,"_expoNetwork"],[41,18,2,0],[41,21,2,0,"require"],[41,28,2,0],[41,29,2,0,"_dependencyMap"],[41,43,2,0],[42,2,2,0],[42,6,2,0,"Network"],[42,13,2,0],[42,16,2,0,"_interopNamespace"],[42,33,2,0],[42,34,2,0,"_expoNetwork"],[42,46,2,0],[43,2,3,0],[43,6,3,0,"_reactNativeAsyncStorageAsyncStorage"],[43,42,3,0],[43,45,3,0,"require"],[43,52,3,0],[43,53,3,0,"_dependencyMap"],[43,67,3,0],[44,2,3,0],[44,6,3,0,"AsyncStorage"],[44,18,3,0],[44,21,3,0,"_interopDefault"],[44,36,3,0],[44,37,3,0,"_reactNativeAsyncStorageAsyncStorage"],[44,73,3,0],[45,2,5,0],[46,2,5,0],[46,6,46,6,"LocalDatabaseManager"],[46,26,46,26],[47,4,46,26],[47,13,46,26,"LocalDatabaseManager"],[47,34,46,26],[48,6,46,26],[48,10,46,26,"_classCallCheck"],[48,25,46,26],[48,26,46,26,"default"],[48,33,46,26],[48,41,46,26,"LocalDatabaseManager"],[48,61,46,26],[49,6,46,26],[49,11,47,10,"db"],[49,13,47,12],[49,16,47,45],[49,20,47,49],[50,6,47,49],[50,11,48,10,"syncInProgress"],[50,25,48,24],[50,28,48,27],[50,33,48,32],[51,4,48,32],[52,4,48,32],[52,15,48,32,"_createClass"],[52,27,48,32],[52,28,48,32,"default"],[52,35,48,32],[52,37,48,32,"LocalDatabaseManager"],[52,57,48,32],[53,6,48,32,"key"],[53,9,48,32],[54,6,48,32,"value"],[54,11,48,32],[55,8,48,32],[55,12,48,32,"_initialize"],[55,23,48,32],[55,30,48,32,"_asyncToGenerator"],[55,47,48,32],[55,48,48,32,"default"],[55,55,48,32],[55,57,50,2],[55,70,50,21],[56,10,51,4],[56,14,51,8],[57,12,52,6],[57,16,52,10],[57,17,52,11,"db"],[57,19,52,13],[57,28,52,22,"SQLite"],[57,34,52,28],[57,35,52,29,"openDatabaseAsync"],[57,52,52,46],[57,53,52,47],[57,67,52,61],[57,68,52,62],[58,12,53,6],[58,18,53,12],[58,22,53,16],[58,23,53,17,"createTables"],[58,35,53,29],[58,36,53,30],[58,37,53,31],[59,12,54,6,"console"],[59,19,54,13],[59,20,54,14,"log"],[59,23,54,17],[59,24,54,18],[59,54,54,48],[59,55,54,49],[60,10,55,4],[60,11,55,5],[60,12,55,6],[60,19,55,13,"error"],[60,24,55,18],[60,26,55,20],[61,12,56,6,"console"],[61,19,56,13],[61,20,56,14,"error"],[61,25,56,19],[61,26,56,20],[61,60,56,54],[61,62,56,56,"error"],[61,67,56,61],[61,68,56,62],[62,12,57,6],[62,18,57,12,"error"],[62,23,57,17],[63,10,58,4],[64,8,59,2],[64,9,59,3],[65,8,59,3],[65,17,50,8,"initialize"],[65,27,50,18,"initialize"],[65,28,50,18],[66,10,50,18],[66,17,50,18,"_initialize"],[66,28,50,18],[66,29,50,18,"apply"],[66,34,50,18],[66,41,50,18,"arguments"],[66,50,50,18],[67,8,50,18],[68,8,50,18],[68,15,50,8,"initialize"],[68,25,50,18],[69,6,50,18],[70,4,50,18],[71,6,50,18,"key"],[71,9,50,18],[72,6,50,18,"value"],[72,11,50,18],[73,8,50,18],[73,12,50,18,"_createTables"],[73,25,50,18],[73,32,50,18,"_asyncToGenerator"],[73,49,50,18],[73,50,50,18,"default"],[73,57,50,18],[73,59,61,2],[73,72,61,31],[74,10,62,4],[74,14,62,8],[74,15,62,9],[74,19,62,13],[74,20,62,14,"db"],[74,22,62,16],[74,24,62,18],[74,30,62,24],[74,34,62,28,"Error"],[74,39,62,33],[74,40,62,34],[74,66,62,60],[74,67,62,61],[76,10,64,4],[77,10,65,4],[77,16,65,10],[77,20,65,14],[77,21,65,15,"db"],[77,23,65,17],[77,24,65,18,"execAsync"],[77,33,65,27],[77,34,65,28],[78,0,66,0],[79,0,67,0],[80,0,68,0],[81,0,69,0],[82,0,70,0],[83,0,71,0],[84,0,72,0],[85,0,73,0],[86,0,74,0],[87,0,75,0],[88,0,76,0],[89,0,77,0],[90,0,78,0],[91,0,79,0],[92,0,80,0],[93,0,81,0],[93,5,81,5],[93,6,81,6],[95,10,83,4],[96,10,84,4],[96,16,84,10],[96,20,84,14],[96,21,84,15,"db"],[96,23,84,17],[96,24,84,18,"execAsync"],[96,33,84,27],[96,34,84,28],[97,0,85,0],[98,0,86,0],[99,0,87,0],[100,0,88,0],[101,0,89,0],[102,0,90,0],[103,0,91,0],[104,0,92,0],[105,0,93,0],[106,0,94,0],[107,0,95,0],[108,0,96,0],[109,0,97,0],[110,0,98,0],[111,0,99,0],[111,5,99,5],[111,6,99,6],[113,10,101,4],[114,10,102,4],[114,16,102,10],[114,20,102,14],[114,21,102,15,"db"],[114,23,102,17],[114,24,102,18,"execAsync"],[114,33,102,27],[114,34,102,28],[115,0,103,0],[116,0,104,0],[117,0,105,0],[118,0,106,0],[119,0,107,0],[120,0,108,0],[121,0,109,0],[122,0,110,0],[122,5,110,5],[122,6,110,6],[124,10,112,4],[125,10,113,4],[125,16,113,10],[125,20,113,14],[125,21,113,15,"db"],[125,23,113,17],[125,24,113,18,"execAsync"],[125,33,113,27],[125,34,113,28],[126,0,114,0],[127,0,115,0],[128,0,116,0],[128,5,116,5],[128,6,116,6],[129,10,118,4],[129,16,118,10],[129,20,118,14],[129,21,118,15,"db"],[129,23,118,17],[129,24,118,18,"execAsync"],[129,33,118,27],[129,34,118,28],[130,0,119,0],[131,0,120,0],[132,0,121,0],[132,5,121,5],[132,6,121,6],[133,10,123,4,"console"],[133,17,123,11],[133,18,123,12,"log"],[133,21,123,15],[133,22,123,16],[133,49,123,43],[133,50,123,44],[134,8,124,2],[134,9,124,3],[135,8,124,3],[135,17,61,16,"createTables"],[135,29,61,28,"createTables"],[135,30,61,28],[136,10,61,28],[136,17,61,28,"_createTables"],[136,30,61,28],[136,31,61,28,"apply"],[136,36,61,28],[136,43,61,28,"arguments"],[136,52,61,28],[137,8,61,28],[138,8,61,28],[138,15,61,16,"createTables"],[138,27,61,28],[139,6,61,28],[139,10,126,2],[140,4,126,2],[141,6,126,2,"key"],[141,9,126,2],[142,6,126,2,"value"],[142,11,126,2],[143,8,126,2],[143,12,126,2,"_saveSensorData"],[143,27,126,2],[143,34,126,2,"_asyncToGenerator"],[143,51,126,2],[143,52,126,2,"default"],[143,59,126,2],[143,61,127,2],[143,72,127,23,"data"],[143,76,127,70],[143,78,127,89],[144,10,128,4],[144,14,128,8],[144,15,128,9],[144,19,128,13],[144,20,128,14,"db"],[144,22,128,16],[144,24,128,18],[144,30,128,24],[144,34,128,28,"Error"],[144,39,128,33],[144,40,128,34],[144,66,128,60],[144,67,128,61],[145,10,130,4],[145,14,130,10,"result"],[145,20,130,16],[145,29,130,25],[145,33,130,29],[145,34,130,30,"db"],[145,36,130,32],[145,37,130,33,"runAsync"],[145,45,130,41],[145,46,130,42],[146,0,131,0],[147,0,132,0],[148,0,133,0],[149,0,134,0],[150,0,135,0],[151,0,136,0],[151,5,136,5],[151,7,136,7],[151,8,137,6,"data"],[151,12,137,10],[151,13,137,11,"serverId"],[151,21,137,19],[151,25,137,23],[151,29,137,27],[151,31,138,6,"data"],[151,35,138,10],[151,36,138,11,"latitude"],[151,44,138,19],[151,46,139,6,"data"],[151,50,139,10],[151,51,139,11,"longitude"],[151,60,139,20],[151,62,140,6,"data"],[151,66,140,10],[151,67,140,11,"timestamp"],[151,76,140,20],[151,78,141,6,"data"],[151,82,141,10],[151,83,141,11,"speed"],[151,88,141,16],[151,90,142,6,"data"],[151,94,142,10],[151,95,142,11,"accuracy"],[151,103,142,19],[151,105,143,6,"data"],[151,109,143,10],[151,110,143,11,"accelerometer"],[151,123,143,24],[151,124,143,25,"x"],[151,125,143,26],[151,127,144,6,"data"],[151,131,144,10],[151,132,144,11,"accelerometer"],[151,145,144,24],[151,146,144,25,"y"],[151,147,144,26],[151,149,145,6,"data"],[151,153,145,10],[151,154,145,11,"accelerometer"],[151,167,145,24],[151,168,145,25,"z"],[151,169,145,26],[151,171,146,6,"data"],[151,175,146,10],[151,176,146,11,"roadQuality"],[151,187,146,22],[151,189,147,6,"data"],[151,193,147,10],[151,194,147,11,"isSynced"],[151,202,147,19],[151,205,147,22],[151,206,147,23],[151,209,147,26],[151,210,147,27],[151,212,148,6],[151,216,148,10,"Date"],[151,220,148,14],[151,221,148,15],[151,222,148,16],[151,223,148,17,"toISOString"],[151,234,148,28],[151,235,148,29],[151,236,148,30],[151,237,149,5],[151,238,149,6],[152,10,151,4,"console"],[152,17,151,11],[152,18,151,12,"log"],[152,21,151,15],[152,22,151,16],[152,59,151,53,"result"],[152,65,151,59],[152,66,151,60,"lastInsertRowId"],[152,81,151,75],[152,84,151,78],[152,85,151,79],[153,10,152,4],[153,17,152,11,"result"],[153,23,152,17],[153,24,152,18,"lastInsertRowId"],[153,39,152,33],[154,8,153,2],[154,9,153,3],[155,8,153,3],[155,17,127,8,"saveSensorData"],[155,31,127,22,"saveSensorData"],[155,32,127,22,"_x"],[155,34,127,22],[156,10,127,22],[156,17,127,22,"_saveSensorData"],[156,32,127,22],[156,33,127,22,"apply"],[156,38,127,22],[156,45,127,22,"arguments"],[156,54,127,22],[157,8,127,22],[158,8,127,22],[158,15,127,8,"saveSensorData"],[158,29,127,22],[159,6,127,22],[160,4,127,22],[161,6,127,22,"key"],[161,9,127,22],[162,6,127,22,"value"],[162,11,127,22],[163,8,127,22],[163,12,127,22,"_getUnsyncedSensorData"],[163,34,127,22],[163,41,127,22,"_asyncToGenerator"],[163,58,127,22],[163,59,127,22,"default"],[163,66,127,22],[163,68,155,2],[163,81,155,60],[164,10,156,4],[164,14,156,8],[164,15,156,9],[164,19,156,13],[164,20,156,14,"db"],[164,22,156,16],[164,24,156,18],[164,30,156,24],[164,34,156,28,"Error"],[164,39,156,33],[164,40,156,34],[164,66,156,60],[164,67,156,61],[165,10,158,4],[165,14,158,10,"result"],[165,20,158,16],[165,29,158,25],[165,33,158,29],[165,34,158,30,"db"],[165,36,158,32],[165,37,158,33,"getAllAsync"],[165,48,158,44],[165,49,158,45],[166,0,159,0],[167,0,160,0],[167,5,160,5],[167,6,160,15],[168,10,162,4],[168,17,162,11,"result"],[168,23,162,17],[168,24,162,18,"map"],[168,27,162,21],[168,28,162,22,"row"],[168,31,162,25],[168,36,162,30],[169,12,163,6,"id"],[169,14,163,8],[169,16,163,10,"row"],[169,19,163,13],[169,20,163,14,"id"],[169,22,163,16],[170,12,164,6,"serverId"],[170,20,164,14],[170,22,164,16,"row"],[170,25,164,19],[170,26,164,20,"server_id"],[170,35,164,29],[171,12,165,6,"latitude"],[171,20,165,14],[171,22,165,16,"row"],[171,25,165,19],[171,26,165,20,"latitude"],[171,34,165,28],[172,12,166,6,"longitude"],[172,21,166,15],[172,23,166,17,"row"],[172,26,166,20],[172,27,166,21,"longitude"],[172,36,166,30],[173,12,167,6,"timestamp"],[173,21,167,15],[173,23,167,17,"row"],[173,26,167,20],[173,27,167,21,"timestamp"],[173,36,167,30],[174,12,168,6,"speed"],[174,17,168,11],[174,19,168,13,"row"],[174,22,168,16],[174,23,168,17,"speed"],[174,28,168,22],[175,12,169,6,"accuracy"],[175,20,169,14],[175,22,169,16,"row"],[175,25,169,19],[175,26,169,20,"accuracy"],[175,34,169,28],[176,12,170,6,"accelerometer"],[176,25,170,19],[176,27,170,21],[177,14,171,8,"x"],[177,15,171,9],[177,17,171,11,"row"],[177,20,171,14],[177,21,171,15,"accelerometer_x"],[177,36,171,30],[178,14,172,8,"y"],[178,15,172,9],[178,17,172,11,"row"],[178,20,172,14],[178,21,172,15,"accelerometer_y"],[178,36,172,30],[179,14,173,8,"z"],[179,15,173,9],[179,17,173,11,"row"],[179,20,173,14],[179,21,173,15,"accelerometer_z"],[180,12,174,6],[180,13,174,7],[181,12,175,6,"roadQuality"],[181,23,175,17],[181,25,175,19,"row"],[181,28,175,22],[181,29,175,23,"road_quality"],[181,41,175,35],[182,12,176,6,"isSynced"],[182,20,176,14],[182,22,176,16,"row"],[182,25,176,19],[182,26,176,20,"is_synced"],[182,35,176,29],[182,40,176,34],[182,41,176,35],[183,12,177,6,"createdAt"],[183,21,177,15],[183,23,177,17,"row"],[183,26,177,20],[183,27,177,21,"created_at"],[184,10,178,4],[184,11,178,5],[184,12,178,6],[184,13,178,7],[185,8,179,2],[185,9,179,3],[186,8,179,3],[186,17,155,8,"getUnsyncedSensorData"],[186,38,155,29,"getUnsyncedSensorData"],[186,39,155,29],[187,10,155,29],[187,17,155,29,"_getUnsyncedSensorData"],[187,39,155,29],[187,40,155,29,"apply"],[187,45,155,29],[187,52,155,29,"arguments"],[187,61,155,29],[188,8,155,29],[189,8,155,29],[189,15,155,8,"getUnsyncedSensorData"],[189,36,155,29],[190,6,155,29],[191,4,155,29],[192,6,155,29,"key"],[192,9,155,29],[193,6,155,29,"value"],[193,11,155,29],[194,8,155,29],[194,12,155,29,"_markSensorDataSynced"],[194,33,155,29],[194,40,155,29,"_asyncToGenerator"],[194,57,155,29],[194,58,155,29,"default"],[194,65,155,29],[194,67,181,2],[194,78,181,29,"localIds"],[194,86,181,47],[194,88,181,49,"serverIds"],[194,97,181,69],[194,99,181,71],[195,10,182,4],[195,14,182,8],[195,15,182,9],[195,19,182,13],[195,20,182,14,"db"],[195,22,182,16],[195,26,182,20,"localIds"],[195,34,182,28],[195,35,182,29,"length"],[195,41,182,35],[195,46,182,40],[195,47,182,41],[195,49,182,43],[196,10,184,4],[196,14,184,10,"placeholders"],[196,26,184,22],[196,29,184,25,"localIds"],[196,37,184,33],[196,38,184,34,"map"],[196,41,184,37],[196,42,184,38],[196,48,184,44],[196,51,184,47],[196,52,184,48],[196,53,184,49,"join"],[196,57,184,53],[196,58,184,54],[196,61,184,57],[196,62,184,58],[197,10,186,4],[197,16,186,10],[197,20,186,14],[197,21,186,15,"db"],[197,23,186,17],[197,24,186,18,"runAsync"],[197,32,186,26],[197,33,186,27],[198,0,187,0],[199,0,188,0],[199,26,188,26,"serverIds"],[199,35,188,35],[199,38,188,38],[199,55,188,55],[199,58,188,58],[199,60,188,60],[200,0,189,0],[200,21,189,21,"placeholders"],[200,33,189,33],[201,0,190,0],[201,5,190,5],[201,7,190,7,"serverIds"],[201,16,190,16],[201,19,190,19],[201,20,190,20],[201,23,190,23,"localIds"],[201,31,190,31],[201,33,190,33],[201,36,190,36,"serverIds"],[201,45,190,45],[201,46,190,46],[201,49,190,49,"localIds"],[201,57,190,57],[201,58,190,58],[202,10,192,4,"console"],[202,17,192,11],[202,18,192,12,"log"],[202,21,192,15],[202,22,192,16],[202,34,192,28,"localIds"],[202,42,192,36],[202,43,192,37,"length"],[202,49,192,43],[202,81,192,75],[202,82,192,76],[203,8,193,2],[203,9,193,3],[204,8,193,3],[204,17,181,8,"markSensorDataSynced"],[204,37,181,28,"markSensorDataSynced"],[204,38,181,28,"_x2"],[204,41,181,28],[204,43,181,28,"_x3"],[204,46,181,28],[205,10,181,28],[205,17,181,28,"_markSensorDataSynced"],[205,38,181,28],[205,39,181,28,"apply"],[205,44,181,28],[205,51,181,28,"arguments"],[205,60,181,28],[206,8,181,28],[207,8,181,28],[207,15,181,8,"markSensorDataSynced"],[207,35,181,28],[208,6,181,28],[208,10,195,2],[209,4,195,2],[210,6,195,2,"key"],[210,9,195,2],[211,6,195,2,"value"],[211,11,195,2],[212,8,195,2],[212,12,195,2,"_saveWarnings"],[212,25,195,2],[212,32,195,2,"_asyncToGenerator"],[212,49,195,2],[212,50,195,2,"default"],[212,57,195,2],[212,59,196,2],[212,70,196,21,"warnings"],[212,78,196,45],[212,80,196,47],[213,10,197,4],[213,14,197,8],[213,15,197,9],[213,19,197,13],[213,20,197,14,"db"],[213,22,197,16],[213,26,197,20,"warnings"],[213,34,197,28],[213,35,197,29,"length"],[213,41,197,35],[213,46,197,40],[213,47,197,41],[213,49,197,43],[214,10,199,4],[214,14,199,10,"statement"],[214,23,199,19],[214,32,199,28],[214,36,199,32],[214,37,199,33,"db"],[214,39,199,35],[214,40,199,36,"prepareAsync"],[214,52,199,48],[214,53,199,49],[215,0,200,0],[216,0,201,0],[217,0,202,0],[218,0,203,0],[219,0,204,0],[219,5,204,5],[219,6,204,6],[220,10,206,4],[220,14,206,8],[221,12,207,6],[221,17,207,11],[221,21,207,17,"warning"],[221,28,207,24],[221,32,207,28,"warnings"],[221,40,207,36],[221,42,207,38],[222,14,208,8],[222,20,208,14,"statement"],[222,29,208,23],[222,30,208,24,"executeAsync"],[222,42,208,36],[222,43,208,37],[222,44,209,10,"warning"],[222,51,209,17],[222,52,209,18,"serverId"],[222,60,209,26],[222,64,209,30],[222,73,209,39,"Date"],[222,77,209,43],[222,78,209,44,"now"],[222,81,209,47],[222,82,209,48],[222,83,209,49],[222,87,209,53,"Math"],[222,91,209,57],[222,92,209,58,"random"],[222,98,209,64],[222,99,209,65],[222,100,209,66],[222,102,209,68],[222,104,210,10,"warning"],[222,111,210,17],[222,112,210,18,"latitude"],[222,120,210,26],[222,122,211,10,"warning"],[222,129,211,17],[222,130,211,18,"longitude"],[222,139,211,27],[222,141,212,10,"warning"],[222,148,212,17],[222,149,212,18,"hazardType"],[222,159,212,28],[222,161,213,10,"warning"],[222,168,213,17],[222,169,213,18,"severity"],[222,177,213,26],[222,179,214,10,"warning"],[222,186,214,17],[222,187,214,18,"description"],[222,198,214,29],[222,202,214,33],[222,204,214,35],[222,206,215,10,"warning"],[222,213,215,17],[222,214,215,18,"isVerified"],[222,224,215,28],[222,227,215,31],[222,228,215,32],[222,231,215,35],[222,232,215,36],[222,234,216,10,"warning"],[222,241,216,17],[222,242,216,18,"region"],[222,248,216,24],[222,252,216,28],[222,254,216,30],[222,256,217,10,"warning"],[222,263,217,17],[222,264,217,18,"city"],[222,268,217,22],[222,272,217,26],[222,274,217,28],[222,276,218,10,"warning"],[222,283,218,17],[222,284,218,18,"country"],[222,291,218,25],[222,295,218,29],[222,297,218,31],[222,299,219,10,"warning"],[222,306,219,17],[222,307,219,18,"lastUpdated"],[222,318,219,29],[222,319,220,9],[222,320,220,10],[223,12,221,6],[224,12,223,6,"console"],[224,19,223,13],[224,20,223,14,"log"],[224,23,223,17],[224,24,223,18],[224,36,223,30,"warnings"],[224,44,223,38],[224,45,223,39,"length"],[224,51,223,45],[224,70,223,64],[224,71,223,65],[225,10,224,4],[225,11,224,5],[225,20,224,14],[226,12,225,6],[226,18,225,12,"statement"],[226,27,225,21],[226,28,225,22,"finalizeAsync"],[226,41,225,35],[226,42,225,36],[226,43,225,37],[227,10,226,4],[228,8,227,2],[228,9,227,3],[229,8,227,3],[229,17,196,8,"saveWarnings"],[229,29,196,20,"saveWarnings"],[229,30,196,20,"_x4"],[229,33,196,20],[230,10,196,20],[230,17,196,20,"_saveWarnings"],[230,30,196,20],[230,31,196,20,"apply"],[230,36,196,20],[230,43,196,20,"arguments"],[230,52,196,20],[231,8,196,20],[232,8,196,20],[232,15,196,8,"saveWarnings"],[232,27,196,20],[233,6,196,20],[234,4,196,20],[235,6,196,20,"key"],[235,9,196,20],[236,6,196,20,"value"],[236,11,196,20],[237,8,196,20],[237,12,196,20,"_getNearbyWarnings"],[237,30,196,20],[237,37,196,20,"_asyncToGenerator"],[237,54,196,20],[237,55,196,20,"default"],[237,62,196,20],[237,64,229,2],[237,75,229,26,"latitude"],[237,83,229,42],[237,85,229,44,"longitude"],[237,94,229,61],[237,96,229,110],[238,10,229,110],[238,14,229,63,"radiusKm"],[238,22,229,79],[238,25,229,79,"arguments"],[238,34,229,79],[238,35,229,79,"length"],[238,41,229,79],[238,49,229,79,"arguments"],[238,58,229,79],[238,66,229,79,"undefined"],[238,75,229,79],[238,78,229,79,"arguments"],[238,87,229,79],[238,93,229,82],[238,94,229,83],[239,10,230,4],[239,14,230,8],[239,15,230,9],[239,19,230,13],[239,20,230,14,"db"],[239,22,230,16],[239,24,230,18],[239,30,230,24],[239,34,230,28,"Error"],[239,39,230,33],[239,40,230,34],[239,66,230,60],[239,67,230,61],[241,10,232,4],[242,10,233,4],[242,14,233,10,"latRange"],[242,22,233,18],[242,25,233,21,"radiusKm"],[242,33,233,29],[242,36,233,32],[242,39,233,35],[242,40,233,36],[242,41,233,37],[243,10,234,4],[243,14,234,10,"lonRange"],[243,22,234,18],[243,25,234,21,"radiusKm"],[243,33,234,29],[243,37,234,33],[243,40,234,36],[243,43,234,39,"Math"],[243,47,234,43],[243,48,234,44,"cos"],[243,51,234,47],[243,52,234,48,"latitude"],[243,60,234,56],[243,63,234,59,"Math"],[243,67,234,63],[243,68,234,64,"PI"],[243,70,234,66],[243,73,234,69],[243,76,234,72],[243,77,234,73],[243,78,234,74],[244,10,236,4],[244,14,236,10,"result"],[244,20,236,16],[244,29,236,25],[244,33,236,29],[244,34,236,30,"db"],[244,36,236,32],[244,37,236,33,"getAllAsync"],[244,48,236,44],[244,49,236,45],[245,0,237,0],[246,0,238,0],[247,0,239,0],[248,0,240,0],[249,0,241,0],[250,0,242,0],[251,0,243,0],[252,0,244,0],[253,0,245,0],[253,5,245,5],[253,7,245,7],[253,8,246,6,"latitude"],[253,16,246,14],[253,19,246,17,"latRange"],[253,27,246,25],[253,29,247,6,"latitude"],[253,37,247,14],[253,40,247,17,"latRange"],[253,48,247,25],[253,50,248,6,"longitude"],[253,59,248,15],[253,62,248,18,"lonRange"],[253,70,248,26],[253,72,249,6,"longitude"],[253,81,249,15],[253,84,249,18,"lonRange"],[253,92,249,26],[253,94,250,6,"latitude"],[253,102,250,14],[253,104,250,16,"latitude"],[253,112,250,24],[253,114,251,6,"longitude"],[253,123,251,15],[253,125,251,17,"longitude"],[253,134,251,26],[253,135,252,5],[253,136,252,15],[254,10,254,4],[254,17,254,11,"result"],[254,23,254,17],[254,24,254,18,"map"],[254,27,254,21],[254,28,254,22,"row"],[254,31,254,25],[254,36,254,30],[255,12,255,6,"id"],[255,14,255,8],[255,16,255,10,"row"],[255,19,255,13],[255,20,255,14,"id"],[255,22,255,16],[256,12,256,6,"serverId"],[256,20,256,14],[256,22,256,16,"row"],[256,25,256,19],[256,26,256,20,"server_id"],[256,35,256,29],[257,12,257,6,"latitude"],[257,20,257,14],[257,22,257,16,"row"],[257,25,257,19],[257,26,257,20,"latitude"],[257,34,257,28],[258,12,258,6,"longitude"],[258,21,258,15],[258,23,258,17,"row"],[258,26,258,20],[258,27,258,21,"longitude"],[258,36,258,30],[259,12,259,6,"hazardType"],[259,22,259,16],[259,24,259,18,"row"],[259,27,259,21],[259,28,259,22,"hazard_type"],[259,39,259,33],[260,12,260,6,"severity"],[260,20,260,14],[260,22,260,16,"row"],[260,25,260,19],[260,26,260,20,"severity"],[260,34,260,70],[261,12,261,6,"description"],[261,23,261,17],[261,25,261,19,"row"],[261,28,261,22],[261,29,261,23,"description"],[261,40,261,34],[262,12,262,6,"isVerified"],[262,22,262,16],[262,24,262,18,"row"],[262,27,262,21],[262,28,262,22,"is_verified"],[262,39,262,33],[262,44,262,38],[262,45,262,39],[263,12,263,6,"region"],[263,18,263,12],[263,20,263,14,"row"],[263,23,263,17],[263,24,263,18,"region"],[263,30,263,24],[264,12,264,6,"city"],[264,16,264,10],[264,18,264,12,"row"],[264,21,264,15],[264,22,264,16,"city"],[264,26,264,20],[265,12,265,6,"country"],[265,19,265,13],[265,21,265,15,"row"],[265,24,265,18],[265,25,265,19,"country"],[265,32,265,26],[266,12,266,6,"lastUpdated"],[266,23,266,17],[266,25,266,19,"row"],[266,28,266,22],[266,29,266,23,"last_updated"],[267,10,267,4],[267,11,267,5],[267,12,267,6],[267,13,267,7],[268,8,268,2],[268,9,268,3],[269,8,268,3],[269,17,229,8,"getNearbyWarnings"],[269,34,229,25,"getNearbyWarnings"],[269,35,229,25,"_x5"],[269,38,229,25],[269,40,229,25,"_x6"],[269,43,229,25],[270,10,229,25],[270,17,229,25,"_getNearbyWarnings"],[270,35,229,25],[270,36,229,25,"apply"],[270,41,229,25],[270,48,229,25,"arguments"],[270,57,229,25],[271,8,229,25],[272,8,229,25],[272,15,229,8,"getNearbyWarnings"],[272,32,229,25],[273,6,229,25],[273,10,270,2],[274,4,270,2],[275,6,270,2,"key"],[275,9,270,2],[276,6,270,2,"value"],[276,11,270,2],[277,8,270,2],[277,12,270,2,"_updateRegionSyncStatus"],[277,35,270,2],[277,42,270,2,"_asyncToGenerator"],[277,59,270,2],[277,60,270,2,"default"],[277,67,270,2],[277,69,271,2],[277,80,271,31,"regionCode"],[277,90,271,49],[277,92,271,51,"regionName"],[277,102,271,69],[277,104,271,71,"warningCount"],[277,116,271,91],[277,118,271,93],[278,10,272,4],[278,14,272,8],[278,15,272,9],[278,19,272,13],[278,20,272,14,"db"],[278,22,272,16],[278,24,272,18],[278,30,272,24],[278,34,272,28,"Error"],[278,39,272,33],[278,40,272,34],[278,66,272,60],[278,67,272,61],[279,10,274,4],[279,16,274,10],[279,20,274,14],[279,21,274,15,"db"],[279,23,274,17],[279,24,274,18,"runAsync"],[279,32,274,26],[279,33,274,27],[280,0,275,0],[281,0,276,0],[282,0,277,0],[282,5,277,5],[282,7,277,7],[282,8,277,8,"regionCode"],[282,18,277,18],[282,20,277,20,"regionName"],[282,30,277,30],[282,32,277,32],[282,36,277,36,"Date"],[282,40,277,40],[282,41,277,41],[282,42,277,42],[282,43,277,43,"toISOString"],[282,54,277,54],[282,55,277,55],[282,56,277,56],[282,58,277,58,"warningCount"],[282,70,277,70],[282,71,277,71],[282,72,277,72],[283,10,279,4,"console"],[283,17,279,11],[283,18,279,12,"log"],[283,21,279,15],[283,22,279,16],[283,60,279,54,"regionName"],[283,70,279,64],[283,75,279,69,"warningCount"],[283,87,279,81],[283,99,279,93],[283,100,279,94],[284,8,280,2],[284,9,280,3],[285,8,280,3],[285,17,271,8,"updateRegionSyncStatus"],[285,39,271,30,"updateRegionSyncStatus"],[285,40,271,30,"_x7"],[285,43,271,30],[285,45,271,30,"_x8"],[285,48,271,30],[285,50,271,30,"_x9"],[285,53,271,30],[286,10,271,30],[286,17,271,30,"_updateRegionSyncStatus"],[286,40,271,30],[286,41,271,30,"apply"],[286,46,271,30],[286,53,271,30,"arguments"],[286,62,271,30],[287,8,271,30],[288,8,271,30],[288,15,271,8,"updateRegionSyncStatus"],[288,37,271,30],[289,6,271,30],[290,4,271,30],[291,6,271,30,"key"],[291,9,271,30],[292,6,271,30,"value"],[292,11,271,30],[293,8,271,30],[293,12,271,30,"_getDownloadedRegions"],[293,33,271,30],[293,40,271,30,"_asyncToGenerator"],[293,57,271,30],[293,58,271,30,"default"],[293,65,271,30],[293,67,282,2],[293,80,282,117],[294,10,283,4],[294,14,283,8],[294,15,283,9],[294,19,283,13],[294,20,283,14,"db"],[294,22,283,16],[294,24,283,18],[294,30,283,24],[294,34,283,28,"Error"],[294,39,283,33],[294,40,283,34],[294,66,283,60],[294,67,283,61],[295,10,285,4],[295,14,285,10,"result"],[295,20,285,16],[295,29,285,25],[295,33,285,29],[295,34,285,30,"db"],[295,36,285,32],[295,37,285,33,"getAllAsync"],[295,48,285,44],[295,49,285,45],[296,0,286,0],[297,0,287,0],[297,5,287,5],[297,6,287,15],[298,10,289,4],[298,17,289,11,"result"],[298,23,289,17],[298,24,289,18,"map"],[298,27,289,21],[298,28,289,22,"row"],[298,31,289,25],[298,36,289,30],[299,12,290,6,"code"],[299,16,290,10],[299,18,290,12,"row"],[299,21,290,15],[299,22,290,16,"region_code"],[299,33,290,27],[300,12,291,6,"name"],[300,16,291,10],[300,18,291,12,"row"],[300,21,291,15],[300,22,291,16,"region_name"],[300,33,291,27],[301,12,292,6,"lastSync"],[301,20,292,14],[301,22,292,16,"row"],[301,25,292,19],[301,26,292,20,"last_sync"],[301,35,292,29],[302,12,293,6,"warningCount"],[302,24,293,18],[302,26,293,20,"row"],[302,29,293,23],[302,30,293,24,"warning_count"],[303,10,294,4],[303,11,294,5],[303,12,294,6],[303,13,294,7],[304,8,295,2],[304,9,295,3],[305,8,295,3],[305,17,282,8,"getDownloadedRegions"],[305,37,282,28,"getDownloadedRegions"],[305,38,282,28],[306,10,282,28],[306,17,282,28,"_getDownloadedRegions"],[306,38,282,28],[306,39,282,28,"apply"],[306,44,282,28],[306,51,282,28,"arguments"],[306,60,282,28],[307,8,282,28],[308,8,282,28],[308,15,282,8,"getDownloadedRegions"],[308,35,282,28],[309,6,282,28],[309,10,297,2],[310,4,297,2],[311,6,297,2,"key"],[311,9,297,2],[312,6,297,2,"value"],[312,11,297,2],[313,8,297,2],[313,12,297,2,"_getSyncStatus"],[313,26,297,2],[313,33,297,2,"_asyncToGenerator"],[313,50,297,2],[313,51,297,2,"default"],[313,58,297,2],[313,60,298,2],[313,73,298,45],[314,10,299,4],[314,14,299,10,"lastSyncTime"],[314,26,299,22],[314,29,299,25],[314,36,299,31,"AsyncStorage"],[314,48,299,43],[314,49,299,43,"default"],[314,56,299,43],[314,57,299,44,"getItem"],[314,64,299,51],[314,65,299,52],[314,81,299,68],[314,82,299,69],[314,87,299,73],[314,94,299,80],[315,10,300,4],[315,14,300,10,"downloadedRegions"],[315,31,300,27],[315,40,300,36],[315,44,300,40],[315,45,300,41,"getDownloadedRegions"],[315,65,300,61],[315,66,300,62],[315,67,300,63],[316,10,301,4],[316,14,301,10,"unsyncedData"],[316,26,301,22],[316,35,301,31],[316,39,301,35],[316,40,301,36,"getUnsyncedSensorData"],[316,61,301,57],[316,62,301,58],[316,63,301,59],[317,10,302,4],[317,14,302,10,"networkState"],[317,26,302,22],[317,35,302,31,"Network"],[317,42,302,38],[317,43,302,39,"getNetworkStateAsync"],[317,63,302,59],[317,64,302,60],[317,65,302,61],[318,10,304,4],[318,17,304,11],[319,12,305,6,"lastSyncTime"],[319,24,305,18],[320,12,306,6,"pendingSensorData"],[320,29,306,23],[320,31,306,25,"unsyncedData"],[320,43,306,37],[320,44,306,38,"length"],[320,50,306,44],[321,12,307,6,"downloadedRegions"],[321,29,307,23],[321,31,307,25,"downloadedRegions"],[321,48,307,42],[321,49,307,43,"map"],[321,52,307,46],[321,53,307,47,"r"],[321,54,307,48],[321,58,307,52,"r"],[321,59,307,53],[321,60,307,54,"name"],[321,64,307,58],[321,65,307,59],[322,12,308,6,"isOnline"],[322,20,308,14],[322,22,308,16,"networkState"],[322,34,308,28],[322,35,308,29,"isConnected"],[322,46,308,40],[322,50,308,44],[323,10,309,4],[323,11,309,5],[324,8,310,2],[324,9,310,3],[325,8,310,3],[325,17,298,8,"getSyncStatus"],[325,30,298,21,"getSyncStatus"],[325,31,298,21],[326,10,298,21],[326,17,298,21,"_getSyncStatus"],[326,31,298,21],[326,32,298,21,"apply"],[326,37,298,21],[326,44,298,21,"arguments"],[326,53,298,21],[327,8,298,21],[328,8,298,21],[328,15,298,8,"getSyncStatus"],[328,28,298,21],[329,6,298,21],[329,10,312,2],[330,4,312,2],[331,6,312,2,"key"],[331,9,312,2],[332,6,312,2,"value"],[332,11,312,2],[333,8,312,2],[333,12,312,2,"_cleanupOldData"],[333,27,312,2],[333,34,312,2,"_asyncToGenerator"],[333,51,312,2],[333,52,312,2,"default"],[333,59,312,2],[333,61,313,2],[333,74,313,45],[334,10,313,45],[334,14,313,23,"daysOld"],[334,21,313,38],[334,24,313,38,"arguments"],[334,33,313,38],[334,34,313,38,"length"],[334,40,313,38],[334,48,313,38,"arguments"],[334,57,313,38],[334,65,313,38,"undefined"],[334,74,313,38],[334,77,313,38,"arguments"],[334,86,313,38],[334,92,313,41],[334,94,313,43],[335,10,314,4],[335,14,314,8],[335,15,314,9],[335,19,314,13],[335,20,314,14,"db"],[335,22,314,16],[335,24,314,18],[336,10,316,4],[336,14,316,10,"cutoffDate"],[336,24,316,20],[336,27,316,23],[336,31,316,27,"Date"],[336,35,316,31],[336,36,316,32],[336,37,316,33],[337,10,317,4,"cutoffDate"],[337,20,317,14],[337,21,317,15,"setDate"],[337,28,317,22],[337,29,317,23,"cutoffDate"],[337,39,317,33],[337,40,317,34,"getDate"],[337,47,317,41],[337,48,317,42],[337,49,317,43],[337,52,317,46,"daysOld"],[337,59,317,53],[337,60,317,54],[338,10,318,4],[338,14,318,10,"cutoffISO"],[338,23,318,19],[338,26,318,22,"cutoffDate"],[338,36,318,32],[338,37,318,33,"toISOString"],[338,48,318,44],[338,49,318,45],[338,50,318,46],[340,10,320,4],[341,10,321,4],[341,14,321,10,"sensorResult"],[341,26,321,22],[341,35,321,31],[341,39,321,35],[341,40,321,36,"db"],[341,42,321,38],[341,43,321,39,"runAsync"],[341,51,321,47],[341,52,321,48],[342,0,322,0],[343,0,323,0],[344,0,324,0],[344,5,324,5],[344,7,324,7],[344,8,324,8,"cutoffISO"],[344,17,324,17],[344,18,324,18],[344,19,324,19],[346,10,326,4],[347,10,327,4],[347,14,327,10,"warningResult"],[347,27,327,23],[347,36,327,32],[347,40,327,36],[347,41,327,37,"db"],[347,43,327,39],[347,44,327,40,"runAsync"],[347,52,327,48],[347,53,327,49],[348,0,328,0],[349,0,329,0],[350,0,330,0],[350,5,330,5],[350,7,330,7],[350,8,330,8,"cutoffISO"],[350,17,330,17],[350,18,330,18],[350,19,330,19],[351,10,332,4,"console"],[351,17,332,11],[351,18,332,12,"log"],[351,21,332,15],[351,22,332,16],[351,45,332,39,"sensorResult"],[351,57,332,51],[351,58,332,52,"changes"],[351,65,332,59],[351,89,332,83,"warningResult"],[351,102,332,96],[351,103,332,97,"changes"],[351,110,332,104],[351,125,332,119],[351,126,332,120],[352,8,333,2],[352,9,333,3],[353,8,333,3],[353,17,313,8,"cleanupOldData"],[353,31,313,22,"cleanupOldData"],[353,32,313,22],[354,10,313,22],[354,17,313,22,"_cleanupOldData"],[354,32,313,22],[354,33,313,22,"apply"],[354,38,313,22],[354,45,313,22,"arguments"],[354,54,313,22],[355,8,313,22],[356,8,313,22],[356,15,313,8,"cleanupOldData"],[356,29,313,22],[357,6,313,22],[358,4,313,22],[359,6,313,22,"key"],[359,9,313,22],[360,6,313,22,"value"],[360,11,313,22],[361,8,313,22],[361,12,313,22,"_getDatabaseStats"],[361,29,313,22],[361,36,313,22,"_asyncToGenerator"],[361,53,313,22],[361,54,313,22,"default"],[361,61,313,22],[361,63,335,2],[361,76,335,27],[362,10,336,4],[362,14,336,8],[362,15,336,9],[362,19,336,13],[362,20,336,14,"db"],[362,22,336,16],[362,24,336,18],[362,31,336,25],[362,35,336,29],[363,10,338,4],[363,14,338,10,"sensorCount"],[363,25,338,21],[363,34,338,30],[363,38,338,34],[363,39,338,35,"db"],[363,41,338,37],[363,42,338,38,"getFirstAsync"],[363,55,338,51],[363,56,338,52],[363,99,338,95],[363,100,338,115],[364,10,339,4],[364,14,339,10,"warningCount"],[364,26,339,22],[364,35,339,31],[364,39,339,35],[364,40,339,36,"db"],[364,42,339,38],[364,43,339,39,"getFirstAsync"],[364,56,339,52],[364,57,339,53],[364,97,339,93],[364,98,339,113],[365,10,340,4],[365,14,340,10,"unsyncedCount"],[365,27,340,23],[365,36,340,32],[365,40,340,36],[365,41,340,37,"db"],[365,43,340,39],[365,44,340,40,"getFirstAsync"],[365,57,340,53],[365,58,340,54],[365,121,340,117],[365,122,340,137],[366,10,342,4],[366,17,342,11],[367,12,343,6,"totalSensorData"],[367,27,343,21],[367,29,343,23,"sensorCount"],[367,40,343,34],[367,41,343,35,"count"],[367,46,343,40],[368,12,344,6,"totalWarnings"],[368,25,344,19],[368,27,344,21,"warningCount"],[368,39,344,33],[368,40,344,34,"count"],[368,45,344,39],[369,12,345,6,"unsyncedData"],[369,24,345,18],[369,26,345,20,"unsyncedCount"],[369,39,345,33],[369,40,345,34,"count"],[370,10,346,4],[370,11,346,5],[371,8,347,2],[371,9,347,3],[372,8,347,3],[372,17,335,8,"getDatabaseStats"],[372,33,335,24,"getDatabaseStats"],[372,34,335,24],[373,10,335,24],[373,17,335,24,"_getDatabaseStats"],[373,34,335,24],[373,35,335,24,"apply"],[373,40,335,24],[373,47,335,24,"arguments"],[373,56,335,24],[374,8,335,24],[375,8,335,24],[375,15,335,8,"getDatabaseStats"],[375,31,335,24],[376,6,335,24],[377,4,335,24],[378,2,335,24],[379,2,350,7],[379,6,350,13,"localDB"],[379,13,350,20],[379,16,350,23],[379,20,350,27,"LocalDatabaseManager"],[379,40,350,47],[379,41,350,48],[379,42,350,49],[380,0,350,50],[380,3]],"functionMap":{"names":["<global>","LocalDatabaseManager","LocalDatabaseManager#initialize","LocalDatabaseManager#createTables","LocalDatabaseManager#saveSensorData","LocalDatabaseManager#getUnsyncedSensorData","result.map$argument_0","LocalDatabaseManager#markSensorDataSynced","localIds.map$argument_0","LocalDatabaseManager#saveWarnings","LocalDatabaseManager#getNearbyWarnings","LocalDatabaseManager#updateRegionSyncStatus","LocalDatabaseManager#getDownloadedRegions","LocalDatabaseManager#getSyncStatus","downloadedRegions.map$argument_0","LocalDatabaseManager#cleanupOldData","LocalDatabaseManager#getDatabaseStats"],"mappings":"AAA;AC6C;ECI;GDS;EEE;GF+D;EGG;GH0B;EIE;sBCO;MDgB;GJC;EME;sCCG,SD;GNS;EQG;GR+B;ESE;sBJyB;MIa;GTC;EUG;GVS;EWE;sBNO;MMK;GXC;EYG;+CCS,WD;GZG;EcG;GdoB;EeE;GfY;CDC"},"hasCjsExports":false},"type":"js/module"}]}