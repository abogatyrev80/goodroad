{"dependencies":[{"name":"expo-network","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":40,"index":40}}],"key":"1uj8I4G/JNBf3YRANaksFTH4dPs=","exportNames":["*"],"imports":1}},{"name":"@react-native-async-storage/async-storage","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":41},"end":{"line":2,"column":69,"index":110}}],"key":"0kSRlooyBOaYM9tlTtK91nq+uds=","exportNames":["*"],"imports":1}},{"name":"react-native-web/dist/exports/Platform","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"dV3bI3NOD8bfMzaIniMaFGy/nn8=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function(g,_r,i,a,m,_e,_d){\"use strict\";Object.defineProperty(_e,'__esModule',{value:!0}),Object.defineProperty(_e,\"localDB\",{enumerable:!0,get:function(){return r}});var e,n=(function(e){if(e&&e.__esModule)return e;var n={};return e&&Object.keys(e).forEach(function(t){var s=Object.getOwnPropertyDescriptor(e,t);Object.defineProperty(n,t,s.get?s:{enumerable:!0,get:function(){return e[t]}})}),n.default=e,n})(_r(_d[0])),t=_r(_d[1]),s=(e=t)&&e.__esModule?e:{default:e};_r(_d[2]);const r=new class{db=null;syncInProgress=!1;async initialize(){console.warn('\\u26a0\\ufe0f SQLite not available on this platform - database features disabled')}async createTables(){if(!this.db)throw new Error('Database not initialized');await this.db.execAsync(\"\\n      CREATE TABLE IF NOT EXISTS sensor_data (\\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\\n        server_id TEXT,\\n        latitude REAL NOT NULL,\\n        longitude REAL NOT NULL,\\n        timestamp TEXT NOT NULL,\\n        speed REAL DEFAULT 0,\\n        accuracy REAL DEFAULT 0,\\n        accelerometer_x REAL DEFAULT 0,\\n        accelerometer_y REAL DEFAULT 0,\\n        accelerometer_z REAL DEFAULT 0,\\n        road_quality REAL DEFAULT 50,\\n        is_synced INTEGER DEFAULT 0,\\n        created_at TEXT NOT NULL\\n      );\\n    \"),await this.db.execAsync(\"\\n      CREATE TABLE IF NOT EXISTS warnings (\\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\\n        server_id TEXT UNIQUE,\\n        latitude REAL NOT NULL,\\n        longitude REAL NOT NULL,\\n        hazard_type TEXT NOT NULL,\\n        severity TEXT NOT NULL,\\n        description TEXT,\\n        is_verified INTEGER DEFAULT 0,\\n        region TEXT,\\n        city TEXT,\\n        country TEXT,\\n        last_updated TEXT NOT NULL\\n      );\\n    \"),await this.db.execAsync(\"\\n      CREATE TABLE IF NOT EXISTS sync_regions (\\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\\n        region_code TEXT UNIQUE,\\n        region_name TEXT,\\n        last_sync TEXT,\\n        warning_count INTEGER DEFAULT 0\\n      );\\n    \"),await this.db.execAsync(\"\\n      CREATE INDEX IF NOT EXISTS idx_sensor_location \\n      ON sensor_data(latitude, longitude);\\n    \"),await this.db.execAsync(\"\\n      CREATE INDEX IF NOT EXISTS idx_warnings_location \\n      ON warnings(latitude, longitude);\\n    \"),console.log('\\u2705 Database tables created')}async saveSensorData(e){if(!this.db)throw new Error('Database not initialized');const n=await this.db.runAsync(\"\\n      INSERT INTO sensor_data (\\n        server_id, latitude, longitude, timestamp, speed, accuracy,\\n        accelerometer_x, accelerometer_y, accelerometer_z, \\n        road_quality, is_synced, created_at\\n      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\\n    \",[e.serverId||null,e.latitude,e.longitude,e.timestamp,e.speed,e.accuracy,e.accelerometer.x,e.accelerometer.y,e.accelerometer.z,e.roadQuality,e.isSynced?1:0,(new Date).toISOString()]);return console.log(`\\ud83d\\udcbe Saved sensor data locally (ID: ${n.lastInsertRowId})`),n.lastInsertRowId}async getUnsyncedSensorData(){if(!this.db)throw new Error('Database not initialized');return(await this.db.getAllAsync(\"\\n      SELECT * FROM sensor_data WHERE is_synced = 0 ORDER BY created_at\\n    \")).map(e=>({id:e.id,serverId:e.server_id,latitude:e.latitude,longitude:e.longitude,timestamp:e.timestamp,speed:e.speed,accuracy:e.accuracy,accelerometer:{x:e.accelerometer_x,y:e.accelerometer_y,z:e.accelerometer_z},roadQuality:e.road_quality,isSynced:1===e.is_synced,createdAt:e.created_at}))}async markSensorDataSynced(e,n){if(!this.db||0===e.length)return;const t=e.map(()=>'?').join(',');await this.db.runAsync(`\\n      UPDATE sensor_data \\n      SET is_synced = 1 ${n?', server_id = ?':''}\\n      WHERE id IN (${t})\\n    `,n?[...e,...n]:e),console.log(`\\u2705 Marked ${e.length} sensor data records as synced`)}async saveWarnings(e){if(!this.db||0===e.length)return;const n=await this.db.prepareAsync(\"\\n      INSERT OR REPLACE INTO warnings (\\n        server_id, latitude, longitude, hazard_type, severity,\\n        description, is_verified, region, city, country, last_updated\\n      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\\n    \");try{for(const t of e)await n.executeAsync([t.serverId||`local_${Date.now()}_${Math.random()}`,t.latitude,t.longitude,t.hazardType,t.severity,t.description||'',t.isVerified?1:0,t.region||'',t.city||'',t.country||'',t.lastUpdated]);console.log(`\\ud83d\\udcbe Saved ${e.length} warnings locally`)}finally{await n.finalizeAsync()}}async getNearbyWarnings(e,n,t=1){if(!this.db)throw new Error('Database not initialized');const s=t/111,r=t/(111*Math.cos(e*Math.PI/180));return(await this.db.getAllAsync(\"\\n      SELECT * FROM warnings \\n      WHERE latitude BETWEEN ? AND ? \\n      AND longitude BETWEEN ? AND ?\\n      AND is_verified = 1\\n      ORDER BY \\n        (latitude - ?) * (latitude - ?) + \\n        (longitude - ?) * (longitude - ?)\\n      LIMIT 50\\n    \",[e-s,e+s,n-r,n+r,e,e,n,n])).map(e=>({id:e.id,serverId:e.server_id,latitude:e.latitude,longitude:e.longitude,hazardType:e.hazard_type,severity:e.severity,description:e.description,isVerified:1===e.is_verified,region:e.region,city:e.city,country:e.country,lastUpdated:e.last_updated}))}async updateRegionSyncStatus(e,n,t){if(!this.db)throw new Error('Database not initialized');await this.db.runAsync(\"\\n      INSERT OR REPLACE INTO sync_regions (region_code, region_name, last_sync, warning_count)\\n      VALUES (?, ?, ?, ?)\\n    \",[e,n,(new Date).toISOString(),t]),console.log(`\\ud83d\\udccd Updated sync status for region: ${n} (${t} warnings)`)}async getDownloadedRegions(){if(!this.db)throw new Error('Database not initialized');return(await this.db.getAllAsync(\"\\n      SELECT * FROM sync_regions ORDER BY region_name\\n    \")).map(e=>({code:e.region_code,name:e.region_name,lastSync:e.last_sync,warningCount:e.warning_count}))}async getSyncStatus(){const e=await s.default.getItem('last_sync_time')||'Never',t=await this.getDownloadedRegions(),r=await this.getUnsyncedSensorData(),d=await n.getNetworkStateAsync();return{lastSyncTime:e,pendingSensorData:r.length,downloadedRegions:t.map(e=>e.name),isOnline:d.isConnected||!1}}async cleanupOldData(e=30){if(!this.db)return;const n=new Date;n.setDate(n.getDate()-e);const t=n.toISOString(),s=await this.db.runAsync(\"\\n      DELETE FROM sensor_data \\n      WHERE is_synced = 1 AND created_at < ?\\n    \",[t]),r=await this.db.runAsync(\"\\n      DELETE FROM warnings \\n      WHERE is_verified = 0 AND last_updated < ?\\n    \",[t]);console.log(`\\ud83e\\uddf9 Cleanup: removed ${s.changes} old sensor records, ${r.changes} old warnings`)}async getDatabaseStats(){if(!this.db)return null;const e=await this.db.getFirstAsync(\"SELECT COUNT(*) as count FROM sensor_data\"),n=await this.db.getFirstAsync(\"SELECT COUNT(*) as count FROM warnings\"),t=await this.db.getFirstAsync(\"SELECT COUNT(*) as count FROM sensor_data WHERE is_synced = 0\");return{totalSensorData:e.count,totalWarnings:n.count,unsyncedData:t.count}}}});","lineCount":1,"map":[[1,94,365,0,"Object"],[1,101,365,0,"defineProperty"],[1,116,365,0,"_e"],[1,119,365,0],[1,130,365,0,"enumerable"],[1,142,365,0],[1,144,365,0,"get"],[1,148,365,0],[1,166,365,0,"localDB"],[1,167,365,0],[1,171,1,0],[1,175],[1,177,1,0,"Network"],[1,180],[1,413,1,0,"_interopNamespace"],[1,414,1,0,"_r"],[1,417,1,0,"_d"],[1,420,1,0],[1,425,2,0,"_reactNativeAsyncStorageAsyncStorage"],[1,427,2,0,"_r"],[1,430,2,0,"_d"],[1,433,2,0],[1,437,2,0,"AsyncStorage"],[1,440],[1,442,2,0,"_reactNativeAsyncStorageAsyncStorage"],[1,446],[1,473,2,69,"_r"],[1,476,2,69,"_d"],[1,479,2,69],[1,483,365,7],[1,489,365,13,"localDB"],[1,491,365,23],[1,495,56,0],[1,501,57,10,"db"],[1,504,57,45],[1,509,58,10,"syncInProgress"],[1,525,58,27],[1,527,60,2],[1,543,60,8,"initialize"],[1,546,62,6,"console"],[1,554,62,14,"warn"],[1,559,62,19],[1,641,74,2],[1,642,76,2],[1,660,76,16,"createTables"],[1,663,77,4],[1,667,77,9,"this"],[1,672,77,14,"db"],[1,675,77,18],[1,681,77,24],[1,685,77,28,"Error"],[1,691,77,34],[1,725,80,10,"this"],[1,730,80,15,"db"],[1,733,80,18,"execAsync"],[1,743,80,28],[1,1289,99,10,"this"],[1,1294,99,15,"db"],[1,1297,99,18,"execAsync"],[1,1307,99,28],[1,1761,117,10,"this"],[1,1766,117,15,"db"],[1,1769,117,18,"execAsync"],[1,1779,117,28],[1,2028,128,10,"this"],[1,2033,128,15,"db"],[1,2036,128,18,"execAsync"],[1,2046,128,28],[1,2161,133,10,"this"],[1,2166,133,15,"db"],[1,2169,133,18,"execAsync"],[1,2179,133,28],[1,2287,138,4,"console"],[1,2295,138,12,"log"],[1,2299,138,16],[1,2332,139,2],[1,2333,142,2],[1,2353,142,8,"saveSensorData"],[1,2354,142,23,"data"],[1,2357,143,4],[1,2361,143,9,"this"],[1,2366,143,14,"db"],[1,2369,143,18],[1,2375,143,24],[1,2379,143,28,"Error"],[1,2385,143,34],[1,2413,145,4],[1,2419,145,10,"result"],[1,2427,145,25,"this"],[1,2432,145,30,"db"],[1,2435,145,33,"runAsync"],[1,2444,145,42],[1,2714,151,7],[1,2715,152,6,"data"],[1,2717,152,11,"serverId"],[1,2727,152,23],[1,2732,153,6,"data"],[1,2734,153,11,"latitude"],[1,2743,154,6,"data"],[1,2745,154,11,"longitude"],[1,2755,155,6,"data"],[1,2757,155,11,"timestamp"],[1,2767,156,6,"data"],[1,2769,156,11,"speed"],[1,2775,157,6,"data"],[1,2777,157,11,"accuracy"],[1,2786,158,6,"data"],[1,2788,158,11,"accelerometer"],[1,2802,158,25,"x"],[1,2804,159,6,"data"],[1,2806,159,11,"accelerometer"],[1,2820,159,25,"y"],[1,2822,160,6,"data"],[1,2824,160,11,"accelerometer"],[1,2838,160,25,"z"],[1,2840,161,6,"data"],[1,2842,161,11,"roadQuality"],[1,2854,162,6,"data"],[1,2856,162,11,"isSynced"],[1,2865,162,22],[1,2867,162,26],[1,2870,163,6],[1,2874,163,10,"Date"],[1,2880,163,17,"toISOString"],[1,2896,167,4],[1,2903,166,4,"console"],[1,2911,166,12,"log"],[1,2915,166,16],[1,2962,166,53,"result"],[1,2964,166,60,"lastInsertRowId"],[1,2984,167,11,"result"],[1,2986,167,18,"lastInsertRowId"],[1,3001,168,2],[1,3002,170,2],[1,3029,170,8,"getUnsyncedSensorData"],[1,3032,171,4],[1,3036,171,9,"this"],[1,3041,171,14,"db"],[1,3044,171,18],[1,3050,171,24],[1,3054,171,28,"Error"],[1,3060,171,34],[1,3088,177,4],[1,3101,173,25,"this"],[1,3106,173,30,"db"],[1,3109,173,33,"getAllAsync"],[1,3121,173,45],[1,3205,177,18,"map"],[1,3209,177,22,"row"],[1,3213,177,25],[1,3214,178,6,"id"],[1,3217,178,10,"row"],[1,3219,178,14,"id"],[1,3222,179,6,"serverId"],[1,3231,179,16,"row"],[1,3233,179,20,"server_id"],[1,3243,180,6,"latitude"],[1,3252,180,16,"row"],[1,3254,180,20,"latitude"],[1,3263,181,6,"longitude"],[1,3273,181,17,"row"],[1,3275,181,21,"longitude"],[1,3285,182,6,"timestamp"],[1,3295,182,17,"row"],[1,3297,182,21,"timestamp"],[1,3307,183,6,"speed"],[1,3313,183,13,"row"],[1,3315,183,17,"speed"],[1,3321,184,6,"accuracy"],[1,3330,184,16,"row"],[1,3332,184,20,"accuracy"],[1,3341,185,6,"accelerometer"],[1,3355,185,21],[1,3356,186,8,"x"],[1,3358,186,11,"row"],[1,3360,186,15,"accelerometer_x"],[1,3376,187,8,"y"],[1,3378,187,11,"row"],[1,3380,187,15,"accelerometer_y"],[1,3396,188,8,"z"],[1,3398,188,11,"row"],[1,3400,188,15,"accelerometer_z"],[1,3417,190,6,"roadQuality"],[1,3429,190,19,"row"],[1,3431,190,23,"road_quality"],[1,3444,191,6,"isSynced"],[1,3453,191,34],[1,3457,191,16,"row"],[1,3459,191,20,"is_synced"],[1,3469,192,6,"createdAt"],[1,3479,192,17,"row"],[1,3481,192,21,"created_at"],[1,3494,194,2],[1,3495,196,2],[1,3521,196,8,"markSensorDataSynced"],[1,3522,196,29,"localIds"],[1,3524,196,49,"serverIds"],[1,3527,197,4],[1,3531,197,9,"this"],[1,3536,197,14,"db"],[1,3540,197,40],[1,3544,197,20,"localIds"],[1,3546,197,29,"length"],[1,3553,197,43],[1,3560,199,4],[1,3566,199,10,"placeholders"],[1,3568,199,25,"localIds"],[1,3570,199,34,"map"],[1,3574,199,38],[1,3578,199,44],[1,3583,199,49,"join"],[1,3588,199,54],[1,3599,201,10,"this"],[1,3604,201,15,"db"],[1,3607,201,18,"runAsync"],[1,3616,201,27],[1,3672,203,26,"serverIds"],[1,3674,203,38],[1,3692,203,58],[1,3718,204,21,"placeholders"],[1,3729,205,7,"serverIds"],[1,3731,205,19],[1,3735,205,23,"localIds"],[1,3740,205,36,"serverIds"],[1,3743,205,49,"localIds"],[1,3746,207,4,"console"],[1,3754,207,12,"log"],[1,3758,207,16],[1,3775,207,28,"localIds"],[1,3777,207,37,"length"],[1,3816,208,2],[1,3817,211,2],[1,3835,211,8,"saveWarnings"],[1,3836,211,21,"warnings"],[1,3839,212,4],[1,3843,212,9,"this"],[1,3848,212,14,"db"],[1,3852,212,40],[1,3856,212,20,"warnings"],[1,3858,212,29,"length"],[1,3865,212,43],[1,3872,214,4],[1,3878,214,10,"statement"],[1,3886,214,28,"this"],[1,3891,214,33,"db"],[1,3894,214,36,"prepareAsync"],[1,3907,214,49],[1,4143,221,4],[1,4147,222,6],[1,4151,222,11],[1,4157,222,17,"warning"],[1,4162,222,28,"warnings"],[1,4170,223,14,"statement"],[1,4172,223,24,"executeAsync"],[1,4185,223,37],[1,4186,224,10,"warning"],[1,4188,224,18,"serverId"],[1,4198,224,30],[1,4207,224,39,"Date"],[1,4212,224,44,"now"],[1,4221,224,53,"Math"],[1,4226,224,58,"random"],[1,4237,225,10,"warning"],[1,4239,225,18,"latitude"],[1,4248,226,10,"warning"],[1,4250,226,18,"longitude"],[1,4260,227,10,"warning"],[1,4262,227,18,"hazardType"],[1,4273,228,10,"warning"],[1,4275,228,18,"severity"],[1,4284,229,10,"warning"],[1,4286,229,18,"description"],[1,4299,229,33],[1,4302,230,10,"warning"],[1,4304,230,18,"isVerified"],[1,4315,230,31],[1,4317,230,35],[1,4319,231,10,"warning"],[1,4321,231,18,"region"],[1,4329,231,28],[1,4332,232,10,"warning"],[1,4334,232,18,"city"],[1,4340,232,26],[1,4343,233,10,"warning"],[1,4345,233,18,"country"],[1,4354,233,29],[1,4357,234,10,"warning"],[1,4359,234,18,"lastUpdated"],[1,4373,238,6,"console"],[1,4381,238,14,"log"],[1,4385,238,18],[1,4407,238,30,"warnings"],[1,4409,238,39,"length"],[1,4435,239,4],[1,4436,239,5],[1,4450,240,12,"statement"],[1,4452,240,22,"finalizeAsync"],[1,4467,241,4],[1,4468,242,2],[1,4469,244,2],[1,4492,244,8,"getNearbyWarnings"],[1,4493,244,26,"latitude"],[1,4495,244,44,"longitude"],[1,4497,244,63,"radiusKm"],[1,4499,244,82],[1,4502,245,4],[1,4506,245,9,"this"],[1,4511,245,14,"db"],[1,4514,245,18],[1,4520,245,24],[1,4524,245,28,"Error"],[1,4530,245,34],[1,4558,248,4],[1,4564,248,10,"latRange"],[1,4566,248,21,"radiusKm"],[1,4568,248,32],[1,4572,249,10,"lonRange"],[1,4574,249,21,"radiusKm"],[1,4577,249,33],[1,4581,249,39,"Math"],[1,4586,249,44,"cos"],[1,4590,249,48,"latitude"],[1,4592,249,59,"Math"],[1,4597,249,64,"PI"],[1,4600,249,69],[1,4606,269,4],[1,4619,251,25,"this"],[1,4624,251,30,"db"],[1,4627,251,33,"getAllAsync"],[1,4639,251,45],[1,4902,260,7],[1,4903,261,6,"latitude"],[1,4905,261,17,"latRange"],[1,4907,262,6,"latitude"],[1,4909,262,17,"latRange"],[1,4911,263,6,"longitude"],[1,4913,263,18,"lonRange"],[1,4915,264,6,"longitude"],[1,4917,264,18,"lonRange"],[1,4919,265,6,"latitude"],[1,4921,265,16,"latitude"],[1,4923,266,6,"longitude"],[1,4925,266,17,"longitude"],[1,4930,269,18,"map"],[1,4934,269,22,"row"],[1,4938,269,25],[1,4939,270,6,"id"],[1,4942,270,10,"row"],[1,4944,270,14,"id"],[1,4947,271,6,"serverId"],[1,4956,271,16,"row"],[1,4958,271,20,"server_id"],[1,4968,272,6,"latitude"],[1,4977,272,16,"row"],[1,4979,272,20,"latitude"],[1,4988,273,6,"longitude"],[1,4998,273,17,"row"],[1,5000,273,21,"longitude"],[1,5010,274,6,"hazardType"],[1,5021,274,18,"row"],[1,5023,274,22,"hazard_type"],[1,5035,275,6,"severity"],[1,5044,275,16,"row"],[1,5046,275,20,"severity"],[1,5055,276,6,"description"],[1,5067,276,19,"row"],[1,5069,276,23,"description"],[1,5081,277,6,"isVerified"],[1,5092,277,38],[1,5096,277,18,"row"],[1,5098,277,22,"is_verified"],[1,5110,278,6,"region"],[1,5117,278,14,"row"],[1,5119,278,18,"region"],[1,5126,279,6,"city"],[1,5131,279,12,"row"],[1,5133,279,16,"city"],[1,5138,280,6,"country"],[1,5146,280,15,"row"],[1,5148,280,19,"country"],[1,5156,281,6,"lastUpdated"],[1,5168,281,19,"row"],[1,5170,281,23,"last_updated"],[1,5185,283,2],[1,5186,286,2],[1,5214,286,8,"updateRegionSyncStatus"],[1,5215,286,31,"regionCode"],[1,5217,286,51,"regionName"],[1,5219,286,71,"warningCount"],[1,5222,287,4],[1,5226,287,9,"this"],[1,5231,287,14,"db"],[1,5234,287,18],[1,5240,287,24],[1,5244,287,28,"Error"],[1,5250,287,34],[1,5284,289,10,"this"],[1,5289,289,15,"db"],[1,5292,289,18,"runAsync"],[1,5301,289,27],[1,5433,292,7],[1,5434,292,8,"regionCode"],[1,5436,292,20,"regionName"],[1,5439,292,32],[1,5443,292,36,"Date"],[1,5449,292,43,"toISOString"],[1,5463,292,58,"warningCount"],[1,5467,294,4,"console"],[1,5475,294,12,"log"],[1,5479,294,16],[1,5527,294,54,"regionName"],[1,5533,294,69,"warningCount"],[1,5547,295,2],[1,5548,297,2],[1,5574,297,8,"getDownloadedRegions"],[1,5577,298,4],[1,5581,298,9,"this"],[1,5586,298,14,"db"],[1,5589,298,18],[1,5595,298,24],[1,5599,298,28,"Error"],[1,5605,298,34],[1,5633,304,4],[1,5646,300,25,"this"],[1,5651,300,30,"db"],[1,5654,300,33,"getAllAsync"],[1,5666,300,45],[1,5732,304,18,"map"],[1,5736,304,22,"row"],[1,5740,304,25],[1,5741,305,6,"code"],[1,5746,305,12,"row"],[1,5748,305,16,"region_code"],[1,5760,306,6,"name"],[1,5765,306,12,"row"],[1,5767,306,16,"region_name"],[1,5779,307,6,"lastSync"],[1,5788,307,16,"row"],[1,5790,307,20,"last_sync"],[1,5800,308,6,"warningCount"],[1,5813,308,20,"row"],[1,5815,308,24,"warning_count"],[1,5831,310,2],[1,5832,313,2],[1,5851,313,8,"getSyncStatus"],[1,5854,314,4],[1,5860,314,10,"lastSyncTime"],[1,5868,314,31,"AsyncStorage"],[1,5870,314,43,"default"],[1,5878,314,44,"getItem"],[1,5886,314,52],[1,5905,314,73],[1,5913,315,10,"downloadedRegions"],[1,5921,315,36,"this"],[1,5926,315,41,"getDownloadedRegions"],[1,5949,316,10,"unsyncedData"],[1,5957,316,31,"this"],[1,5962,316,36,"getUnsyncedSensorData"],[1,5986,317,10,"networkState"],[1,5994,317,31,"Network"],[1,5996,317,39,"getNetworkStateAsync"],[1,6019,319,4],[1,6025,319,11],[1,6026,320,6,"lastSyncTime"],[1,6041,321,6,"pendingSensorData"],[1,6059,321,25,"unsyncedData"],[1,6061,321,38,"length"],[1,6068,322,6,"downloadedRegions"],[1,6086,322,25,"downloadedRegions"],[1,6088,322,43,"map"],[1,6092,322,47,"r"],[1,6095,322,52,"r"],[1,6097,322,54,"name"],[1,6103,323,6,"isOnline"],[1,6112,323,16,"networkState"],[1,6114,323,29,"isConnected"],[1,6128,323,44],[1,6130,325,2],[1,6131,328,2],[1,6151,328,8,"cleanupOldData"],[1,6152,328,23,"daysOld"],[1,6154,328,41],[1,6158,329,4],[1,6162,329,9,"this"],[1,6167,329,14,"db"],[1,6170,329,18],[1,6177,331,4],[1,6183,331,10,"cutoffDate"],[1,6185,331,23],[1,6189,331,27,"Date"],[1,6194,332,4,"cutoffDate"],[1,6196,332,15,"setDate"],[1,6204,332,23,"cutoffDate"],[1,6206,332,34,"getDate"],[1,6216,332,46,"daysOld"],[1,6219,333,4],[1,6225,333,10,"cutoffISO"],[1,6227,333,22,"cutoffDate"],[1,6229,333,33,"toISOString"],[1,6243,336,10,"sensorResult"],[1,6251,336,31,"this"],[1,6256,336,36,"db"],[1,6259,336,39,"runAsync"],[1,6268,336,48],[1,6355,339,7],[1,6356,339,8,"cutoffISO"],[1,6360,342,10,"warningResult"],[1,6368,342,32,"this"],[1,6373,342,37,"db"],[1,6376,342,40,"runAsync"],[1,6385,342,49],[1,6473,345,7],[1,6474,345,8,"cutoffISO"],[1,6478,347,4,"console"],[1,6486,347,12,"log"],[1,6490,347,16],[1,6523,347,39,"sensorResult"],[1,6525,347,52,"changes"],[1,6556,347,83,"warningResult"],[1,6558,347,97,"changes"],[1,6581,348,2],[1,6582,350,2],[1,6604,350,8,"getDatabaseStats"],[1,6607,351,4],[1,6611,351,9,"this"],[1,6616,351,14,"db"],[1,6619,351,18],[1,6626,351,25],[1,6631,353,4],[1,6637,353,10,"sensorCount"],[1,6645,353,30,"this"],[1,6650,353,35,"db"],[1,6653,353,38,"getFirstAsync"],[1,6667,353,52],[1,6712,354,10,"warningCount"],[1,6720,354,31,"this"],[1,6725,354,36,"db"],[1,6728,354,39,"getFirstAsync"],[1,6742,354,53],[1,6784,355,10,"unsyncedCount"],[1,6792,355,32,"this"],[1,6797,355,37,"db"],[1,6800,355,40,"getFirstAsync"],[1,6814,355,54],[1,6879,357,4],[1,6885,357,11],[1,6886,358,6,"totalSensorData"],[1,6902,358,23,"sensorCount"],[1,6904,358,35,"count"],[1,6910,359,6,"totalWarnings"],[1,6924,359,21,"warningCount"],[1,6926,359,34,"count"],[1,6932,360,6,"unsyncedData"],[1,6945,360,20,"unsyncedCount"],[1,6947,360,34,"count"],[1,6953,362,2],[1,6955,365,50],[1,6958]],"functionMap":{"names":["<global>","LocalDatabaseManager","LocalDatabaseManager#initialize","LocalDatabaseManager#createTables","LocalDatabaseManager#saveSensorData","LocalDatabaseManager#getUnsyncedSensorData","result.map$argument_0","LocalDatabaseManager#markSensorDataSynced","localIds.map$argument_0","LocalDatabaseManager#saveWarnings","LocalDatabaseManager#getNearbyWarnings","LocalDatabaseManager#updateRegionSyncStatus","LocalDatabaseManager#getDownloadedRegions","LocalDatabaseManager#getSyncStatus","downloadedRegions.map$argument_0","LocalDatabaseManager#cleanupOldData","LocalDatabaseManager#getDatabaseStats"],"mappings":"AAA;ACuD;ECI;GDc;EEE;GF+D;EGG;GH0B;EIE;sBCO;MDgB;GJC;EME;sCCG,SD;GNS;EQG;GR+B;ESE;sBJyB;MIa;GTC;EUG;GVS;EWE;sBNO;MMK;GXC;EYG;+CCS,WD;GZG;EcG;GdoB;EeE;GfY;CDC"},"hasCjsExports":false},"type":"js/module"}]}