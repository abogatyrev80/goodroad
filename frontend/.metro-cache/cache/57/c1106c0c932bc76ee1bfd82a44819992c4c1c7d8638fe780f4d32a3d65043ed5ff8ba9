{"dependencies":[{"name":"expo-network","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":40,"index":40}}],"key":"1uj8I4G/JNBf3YRANaksFTH4dPs=","exportNames":["*"],"imports":1}},{"name":"@react-native-async-storage/async-storage","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":41},"end":{"line":2,"column":69,"index":110}}],"key":"0kSRlooyBOaYM9tlTtK91nq+uds=","exportNames":["*"],"imports":1}},{"name":"react-native-web/dist/exports/Platform","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"dV3bI3NOD8bfMzaIniMaFGy/nn8=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function(g,_r,i,a,m,_e,_d){\"use strict\";Object.defineProperty(_e,'__esModule',{value:!0}),Object.defineProperty(_e,\"localDB\",{enumerable:!0,get:function(){return r}});var n,e=(function(n){if(n&&n.__esModule)return n;var e={};return n&&Object.keys(n).forEach(function(t){var s=Object.getOwnPropertyDescriptor(n,t);Object.defineProperty(e,t,s.get?s:{enumerable:!0,get:function(){return n[t]}})}),e.default=n,e})(_r(_d[0])),t=_r(_d[1]),s=(n=t)&&n.__esModule?n:{default:n};_r(_d[2]);const r=new class{db=null;syncInProgress=!1;async initialize(){console.warn('\\u26a0\\ufe0f SQLite not available on this platform - database features disabled')}async createTables(){if(!this.db)throw new Error('Database not initialized');await this.db.execAsync(\"\\n      CREATE TABLE IF NOT EXISTS sensor_data (\\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\\n        server_id TEXT,\\n        latitude REAL NOT NULL,\\n        longitude REAL NOT NULL,\\n        timestamp TEXT NOT NULL,\\n        speed REAL DEFAULT 0,\\n        accuracy REAL DEFAULT 0,\\n        accelerometer_x REAL DEFAULT 0,\\n        accelerometer_y REAL DEFAULT 0,\\n        accelerometer_z REAL DEFAULT 0,\\n        road_quality REAL DEFAULT 50,\\n        is_synced INTEGER DEFAULT 0,\\n        created_at TEXT NOT NULL\\n      );\\n    \"),await this.db.execAsync(\"\\n      CREATE TABLE IF NOT EXISTS warnings (\\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\\n        server_id TEXT UNIQUE,\\n        latitude REAL NOT NULL,\\n        longitude REAL NOT NULL,\\n        hazard_type TEXT NOT NULL,\\n        severity TEXT NOT NULL,\\n        description TEXT,\\n        is_verified INTEGER DEFAULT 0,\\n        region TEXT,\\n        city TEXT,\\n        country TEXT,\\n        last_updated TEXT NOT NULL\\n      );\\n    \"),await this.db.execAsync(\"\\n      CREATE TABLE IF NOT EXISTS sync_regions (\\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\\n        region_code TEXT UNIQUE,\\n        region_name TEXT,\\n        last_sync TEXT,\\n        warning_count INTEGER DEFAULT 0\\n      );\\n    \"),await this.db.execAsync(\"\\n      CREATE INDEX IF NOT EXISTS idx_sensor_location \\n      ON sensor_data(latitude, longitude);\\n    \"),await this.db.execAsync(\"\\n      CREATE INDEX IF NOT EXISTS idx_warnings_location \\n      ON warnings(latitude, longitude);\\n    \"),console.log('\\u2705 Database tables created')}async saveSensorData(n){return this.db,console.warn('Database not available - sensor data not stored locally'),-1}async getUnsyncedSensorData(){return this.db,console.warn('Database not available - returning empty unsynced data'),[]}async markSensorDataSynced(n,e){return this.db,this.db,void console.warn('Database not available - sensor data sync status not updated')}async saveWarnings(n){return this.db,this.db,void console.warn('Database not available - warnings not saved locally')}async getNearbyWarnings(n,e,t=1){return this.db,console.warn('Database not available - returning empty warnings'),[]}async updateRegionSyncStatus(n,e,t){return this.db,void console.warn('Database not available - region sync status not updated')}async getDownloadedRegions(){return this.db,console.warn('Database not available - returning empty regions'),[]}async getSyncStatus(){const n=await s.default.getItem('last_sync_time')||'Never',t=await this.getDownloadedRegions(),r=await this.getUnsyncedSensorData(),o=await e.getNetworkStateAsync();return{lastSyncTime:n,pendingSensorData:r.length,downloadedRegions:t.map(n=>n.name),isOnline:o.isConnected||!1}}async cleanupOldData(n=30){if(!this.db)return;const e=new Date;e.setDate(e.getDate()-n);const t=e.toISOString(),s=await this.db.runAsync(\"\\n      DELETE FROM sensor_data \\n      WHERE is_synced = 1 AND created_at < ?\\n    \",[t]),r=await this.db.runAsync(\"\\n      DELETE FROM warnings \\n      WHERE is_verified = 0 AND last_updated < ?\\n    \",[t]);console.log(`\\ud83e\\uddf9 Cleanup: removed ${s.changes} old sensor records, ${r.changes} old warnings`)}async getDatabaseStats(){return this.db,console.warn('Database not available - returning null stats'),null}}});","lineCount":1,"map":[[1,94,393,0,"Object"],[1,101,393,0,"defineProperty"],[1,116,393,0,"_e"],[1,119,393,0],[1,130,393,0,"enumerable"],[1,142,393,0],[1,144,393,0,"get"],[1,148,393,0],[1,166,393,0,"localDB"],[1,167,393,0],[1,171,1,0],[1,175],[1,177,1,0,"Network"],[1,180],[1,413,1,0,"_interopNamespace"],[1,414,1,0,"_r"],[1,417,1,0,"_d"],[1,420,1,0],[1,425,2,0,"_reactNativeAsyncStorageAsyncStorage"],[1,427,2,0,"_r"],[1,430,2,0,"_d"],[1,433,2,0],[1,437,2,0,"AsyncStorage"],[1,440],[1,442,2,0,"_reactNativeAsyncStorageAsyncStorage"],[1,446],[1,473,2,69,"_r"],[1,476,2,69,"_d"],[1,479,2,69],[1,483,393,7],[1,489,393,13,"localDB"],[1,491,393,23],[1,495,56,0],[1,501,57,10,"db"],[1,504,57,45],[1,509,58,10,"syncInProgress"],[1,525,58,27],[1,527,60,2],[1,543,60,8,"initialize"],[1,546,62,6,"console"],[1,554,62,14,"warn"],[1,559,62,19],[1,641,74,2],[1,642,76,2],[1,660,76,16,"createTables"],[1,663,77,4],[1,667,77,9,"this"],[1,672,77,14,"db"],[1,675,77,18],[1,681,77,24],[1,685,77,28,"Error"],[1,691,77,34],[1,725,80,10,"this"],[1,730,80,15,"db"],[1,733,80,18,"execAsync"],[1,743,80,28],[1,1289,99,10,"this"],[1,1294,99,15,"db"],[1,1297,99,18,"execAsync"],[1,1307,99,28],[1,1761,117,10,"this"],[1,1766,117,15,"db"],[1,1769,117,18,"execAsync"],[1,1779,117,28],[1,2028,128,10,"this"],[1,2033,128,15,"db"],[1,2036,128,18,"execAsync"],[1,2046,128,28],[1,2161,133,10,"this"],[1,2166,133,15,"db"],[1,2169,133,18,"execAsync"],[1,2179,133,28],[1,2287,138,4,"console"],[1,2295,138,12,"log"],[1,2299,138,16],[1,2332,139,2],[1,2333,142,2],[1,2353,142,8,"saveSensorData"],[1,2354,142,23,"data"],[1,2357,145,6],[1,2364,143,9,"this"],[1,2369,143,14,"db"],[1,2372,144,6,"console"],[1,2380,144,14,"warn"],[1,2385,144,19],[1,2445,145,6],[1,2446,171,2],[1,2447,173,2],[1,2474,173,8,"getUnsyncedSensorData"],[1,2477,176,6],[1,2484,174,9,"this"],[1,2489,174,14,"db"],[1,2492,175,6,"console"],[1,2500,175,14,"warn"],[1,2505,175,19],[1,2563,176,13],[1,2565,200,2],[1,2566,202,2],[1,2592,202,8,"markSensorDataSynced"],[1,2593,202,29,"localIds"],[1,2595,202,49,"serverIds"],[1,2598,207,6],[1,2605,203,9,"this"],[1,2610,203,14,"db"],[1,2613,204,11,"this"],[1,2618,204,16,"db"],[1,2626,205,8,"console"],[1,2634,205,16,"warn"],[1,2639,205,21],[1,2702,219,2],[1,2703,222,2],[1,2721,222,8,"saveWarnings"],[1,2722,222,21,"warnings"],[1,2725,227,6],[1,2732,223,9,"this"],[1,2737,223,14,"db"],[1,2740,224,11,"this"],[1,2745,224,16,"db"],[1,2753,225,8,"console"],[1,2761,225,16,"warn"],[1,2766,225,21],[1,2820,258,2],[1,2821,260,2],[1,2844,260,8,"getNearbyWarnings"],[1,2845,260,26,"latitude"],[1,2847,260,44,"longitude"],[1,2849,260,63,"radiusKm"],[1,2851,260,82],[1,2854,263,6],[1,2861,261,9,"this"],[1,2866,261,14,"db"],[1,2869,262,6,"console"],[1,2877,262,14,"warn"],[1,2882,262,19],[1,2935,263,13],[1,2937,302,2],[1,2938,305,2],[1,2966,305,8,"updateRegionSyncStatus"],[1,2967,305,31,"regionCode"],[1,2969,305,51,"regionName"],[1,2971,305,71,"warningCount"],[1,2974,308,6],[1,2981,306,9,"this"],[1,2986,306,14,"db"],[1,2994,307,6,"console"],[1,3002,307,14,"warn"],[1,3007,307,19],[1,3065,317,2],[1,3066,319,2],[1,3092,319,8,"getDownloadedRegions"],[1,3095,322,6],[1,3102,320,9,"this"],[1,3107,320,14,"db"],[1,3110,321,6,"console"],[1,3118,321,14,"warn"],[1,3123,321,19],[1,3175,322,13],[1,3177,335,2],[1,3178,338,2],[1,3197,338,8,"getSyncStatus"],[1,3200,339,4],[1,3206,339,10,"lastSyncTime"],[1,3214,339,31,"AsyncStorage"],[1,3216,339,43,"default"],[1,3224,339,44,"getItem"],[1,3232,339,52],[1,3251,339,73],[1,3259,340,10,"downloadedRegions"],[1,3267,340,36,"this"],[1,3272,340,41,"getDownloadedRegions"],[1,3295,341,10,"unsyncedData"],[1,3303,341,31,"this"],[1,3308,341,36,"getUnsyncedSensorData"],[1,3332,342,10,"networkState"],[1,3340,342,31,"Network"],[1,3342,342,39,"getNetworkStateAsync"],[1,3365,344,4],[1,3371,344,11],[1,3372,345,6,"lastSyncTime"],[1,3387,346,6,"pendingSensorData"],[1,3405,346,25,"unsyncedData"],[1,3407,346,38,"length"],[1,3414,347,6,"downloadedRegions"],[1,3432,347,25,"downloadedRegions"],[1,3434,347,43,"map"],[1,3438,347,47,"r"],[1,3441,347,52,"r"],[1,3443,347,54,"name"],[1,3449,348,6,"isOnline"],[1,3458,348,16,"networkState"],[1,3460,348,29,"isConnected"],[1,3474,348,44],[1,3476,350,2],[1,3477,353,2],[1,3497,353,8,"cleanupOldData"],[1,3498,353,23,"daysOld"],[1,3500,353,41],[1,3504,354,4],[1,3508,354,9,"this"],[1,3513,354,14,"db"],[1,3516,354,18],[1,3523,356,4],[1,3529,356,10,"cutoffDate"],[1,3531,356,23],[1,3535,356,27,"Date"],[1,3540,357,4,"cutoffDate"],[1,3542,357,15,"setDate"],[1,3550,357,23,"cutoffDate"],[1,3552,357,34,"getDate"],[1,3562,357,46,"daysOld"],[1,3565,358,4],[1,3571,358,10,"cutoffISO"],[1,3573,358,22,"cutoffDate"],[1,3575,358,33,"toISOString"],[1,3589,361,10,"sensorResult"],[1,3597,361,31,"this"],[1,3602,361,36,"db"],[1,3605,361,39,"runAsync"],[1,3614,361,48],[1,3701,364,7],[1,3702,364,8,"cutoffISO"],[1,3706,367,10,"warningResult"],[1,3714,367,32,"this"],[1,3719,367,37,"db"],[1,3722,367,40,"runAsync"],[1,3731,367,49],[1,3819,370,7],[1,3820,370,8,"cutoffISO"],[1,3824,372,4,"console"],[1,3832,372,12,"log"],[1,3836,372,16],[1,3869,372,39,"sensorResult"],[1,3871,372,52,"changes"],[1,3902,372,83,"warningResult"],[1,3904,372,97,"changes"],[1,3927,373,2],[1,3928,375,2],[1,3950,375,8,"getDatabaseStats"],[1,3953,378,6],[1,3960,376,9,"this"],[1,3965,376,14,"db"],[1,3968,377,6,"console"],[1,3976,377,14,"warn"],[1,3981,377,19],[1,4030,378,13],[1,4034,390,2],[1,4036,393,50],[1,4039]],"functionMap":{"names":["<global>","LocalDatabaseManager","LocalDatabaseManager#initialize","LocalDatabaseManager#createTables","LocalDatabaseManager#saveSensorData","LocalDatabaseManager#getUnsyncedSensorData","result.map$argument_0","LocalDatabaseManager#markSensorDataSynced","localIds.map$argument_0","LocalDatabaseManager#saveWarnings","LocalDatabaseManager#getNearbyWarnings","LocalDatabaseManager#updateRegionSyncStatus","LocalDatabaseManager#getDownloadedRegions","LocalDatabaseManager#getSyncStatus","downloadedRegions.map$argument_0","LocalDatabaseManager#cleanupOldData","LocalDatabaseManager#getDatabaseStats"],"mappings":"AAA;ACuD;ECI;GDc;EEE;GF+D;EGG;GH6B;EIE;sBCU;MDgB;GJC;EME;sCCQ,SD;GNS;EQG;GRoC;ESE;sBJ4B;MIa;GTC;EUG;GVY;EWE;sBNU;MMK;GXC;EYG;+CCS,WD;GZG;EcG;GdoB;EeE;Gfe;CDC"},"hasCjsExports":false},"type":"js/module"}]}