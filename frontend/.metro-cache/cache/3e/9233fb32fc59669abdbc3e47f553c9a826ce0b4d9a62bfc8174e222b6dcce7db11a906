{"dependencies":[{"name":"./Deferred","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":64},"end":{"line":3,"column":38,"index":102}}],"key":"W5mz9aShv6cXedI3s5w1CmONCgo=","exportNames":["*"],"imports":1}},{"name":"./SyncSerializer","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":103},"end":{"line":4,"column":58,"index":161}}],"key":"xKiieI8rcezAFONAfhe7G4QZR7o=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  exports.sendWorkerResult = sendWorkerResult;\n  exports.workerMessageHandler = workerMessageHandler;\n  exports.invokeWorkerAsync = invokeWorkerAsync;\n  exports.invokeWorkerSync = invokeWorkerSync;\n  var _Deferred = require(_dependencyMap[0], \"./Deferred\");\n  var _SyncSerializer = require(_dependencyMap[1], \"./SyncSerializer\");\n  // Copyright 2015-present 650 Industries. All rights reserved.\n\n  let messageId = 0;\n  const deferredMap = new Map();\n  const PENDING = 1;\n  const RESOLVED = 2;\n  let hasWarnedSync = false;\n\n  /**\n   * For worker to send result to the main thread.\n   */\n  function sendWorkerResult({\n    id,\n    result,\n    error,\n    syncTrait\n  }) {\n    if (syncTrait) {\n      const {\n        lockBuffer,\n        resultBuffer\n      } = syncTrait;\n      const lock = new Int32Array(lockBuffer);\n      const resultArray = new Uint8Array(resultBuffer);\n      const resultJson = error != null ? (0, _SyncSerializer.serialize)({\n        error\n      }) : (0, _SyncSerializer.serialize)({\n        result\n      });\n      const resultBytes = new TextEncoder().encode(resultJson);\n      const length = resultBytes.length;\n      resultArray.set(new Uint32Array([length]), 0);\n      resultArray.set(resultBytes, 4);\n      Atomics.store(lock, 0, RESOLVED);\n    } else {\n      if (result) {\n        self.postMessage({\n          id,\n          result\n        });\n      } else {\n        self.postMessage({\n          id,\n          error\n        });\n      }\n    }\n  }\n\n  /**\n   * For main thread to handle worker messages.\n   */\n  function workerMessageHandler(event) {\n    const {\n      id,\n      result,\n      error,\n      isSync\n    } = event.data;\n    if (!isSync) {\n      const deferred = deferredMap.get(id);\n      if (deferred) {\n        if (error) {\n          deferred.reject(new Error(error));\n        } else {\n          deferred.resolve(result);\n        }\n        deferredMap.delete(id);\n      }\n    }\n  }\n\n  /**\n   * For main thread to invoke worker function asynchronously.\n   */\n  async function invokeWorkerAsync(worker, type, data) {\n    const id = messageId++;\n    const deferred = new _Deferred.Deferred();\n    deferredMap.set(id, deferred);\n    worker.postMessage({\n      type,\n      id,\n      data,\n      isSync: false\n    });\n    return deferred.getPromise();\n  }\n\n  /**\n   * For main thread to invoke worker function synchronously.\n   */\n  function invokeWorkerSync(worker, type, data) {\n    if (__DEV__ && !hasWarnedSync) {\n      console.warn('Using synchronous SQLite operations can cause significant performance impact. Consider using async operations instead.');\n      hasWarnedSync = true;\n    }\n    const id = messageId++;\n    const lockBuffer = new SharedArrayBuffer(4);\n    const lock = new Int32Array(lockBuffer);\n    const resultBuffer = new SharedArrayBuffer(1024 * 1024);\n    const resultArray = new Uint8Array(resultBuffer);\n    Atomics.store(lock, 0, PENDING);\n    worker.postMessage({\n      type,\n      id,\n      data,\n      isSync: true,\n      lockBuffer,\n      resultBuffer\n    });\n    let i = 0;\n    // @ts-expect-error: Remove this when TypeScript supports Atomics.pause\n    const useAtomicsPause = typeof Atomics.pause === 'function';\n    while (Atomics.load(lock, 0) === PENDING) {\n      ++i;\n      if (useAtomicsPause) {\n        if (i > 1_000_000) {\n          throw new Error('Sync operation timeout');\n        }\n        // @ts-expect-error: Remove this when TypeScript supports Atomics.pause\n        Atomics.pause();\n      } else {\n        // NOTE(kudo): Unfortunate for the busy loop,\n        // because we don't have a way for main thread to yield its execution to other callbacks.\n        if (i > 1000_000_000) {\n          throw new Error('Sync operation timeout');\n        }\n      }\n    }\n    const length = new Uint32Array(resultArray.buffer, 0, 1)[0];\n    const resultCopy = new Uint8Array(length);\n    resultCopy.set(new Uint8Array(resultArray.buffer, 4, length));\n    const resultJson = new TextDecoder().decode(resultCopy);\n    const {\n      result,\n      error\n    } = (0, _SyncSerializer.deserialize)(resultJson);\n    if (error) throw new Error(error);\n    return result;\n  }\n});","lineCount":153,"map":[[7,2,22,0,"exports"],[7,9,22,0],[7,10,22,0,"sendWorkerResult"],[7,26,22,0],[7,29,22,0,"sendWorkerResult"],[7,45,22,0],[8,2,58,0,"exports"],[8,9,58,0],[8,10,58,0,"workerMessageHandler"],[8,30,58,0],[8,33,58,0,"workerMessageHandler"],[8,53,58,0],[9,2,76,0,"exports"],[9,9,76,0],[9,10,76,0,"invokeWorkerAsync"],[9,27,76,0],[9,30,76,0,"invokeWorkerAsync"],[9,47,76,0],[10,2,91,0,"exports"],[10,9,91,0],[10,10,91,0,"invokeWorkerSync"],[10,26,91,0],[10,29,91,0,"invokeWorkerSync"],[10,45,91,0],[11,2,3,0],[11,6,3,0,"_Deferred"],[11,15,3,0],[11,18,3,0,"require"],[11,25,3,0],[11,26,3,0,"_dependencyMap"],[11,40,3,0],[12,2,4,0],[12,6,4,0,"_SyncSerializer"],[12,21,4,0],[12,24,4,0,"require"],[12,31,4,0],[12,32,4,0,"_dependencyMap"],[12,46,4,0],[13,2,1,0],[15,2,12,0],[15,6,12,4,"messageId"],[15,15,12,13],[15,18,12,16],[15,19,12,17],[16,2,13,0],[16,8,13,6,"deferredMap"],[16,19,13,17],[16,22,13,20],[16,26,13,24,"Map"],[16,29,13,27],[16,30,13,46],[16,31,13,47],[17,2,14,0],[17,8,14,6,"PENDING"],[17,15,14,13],[17,18,14,16],[17,19,14,17],[18,2,15,0],[18,8,15,6,"RESOLVED"],[18,16,15,14],[18,19,15,17],[18,20,15,18],[19,2,17,0],[19,6,17,4,"hasWarnedSync"],[19,19,17,17],[19,22,17,20],[19,27,17,25],[21,2,19,0],[22,0,20,0],[23,0,21,0],[24,2,22,7],[24,11,22,16,"sendWorkerResult"],[24,27,22,32,"sendWorkerResult"],[24,28,22,33],[25,4,23,2,"id"],[25,6,23,4],[26,4,24,2,"result"],[26,10,24,8],[27,4,25,2,"error"],[27,9,25,7],[28,4,26,2,"syncTrait"],[29,2,35,0],[29,3,35,1],[29,5,35,3],[30,4,36,2],[30,8,36,6,"syncTrait"],[30,17,36,15],[30,19,36,17],[31,6,37,4],[31,12,37,10],[32,8,37,12,"lockBuffer"],[32,18,37,22],[33,8,37,24,"resultBuffer"],[34,6,37,37],[34,7,37,38],[34,10,37,41,"syncTrait"],[34,19,37,50],[35,6,38,4],[35,12,38,10,"lock"],[35,16,38,14],[35,19,38,17],[35,23,38,21,"Int32Array"],[35,33,38,31],[35,34,38,32,"lockBuffer"],[35,44,38,42],[35,45,38,43],[36,6,39,4],[36,12,39,10,"resultArray"],[36,23,39,21],[36,26,39,24],[36,30,39,28,"Uint8Array"],[36,40,39,38],[36,41,39,39,"resultBuffer"],[36,53,39,51],[36,54,39,52],[37,6,40,4],[37,12,40,10,"resultJson"],[37,22,40,20],[37,25,40,23,"error"],[37,30,40,28],[37,34,40,32],[37,38,40,36],[37,41,40,39],[37,45,40,39,"serialize"],[37,60,40,48],[37,61,40,48,"serialize"],[37,70,40,48],[37,72,40,49],[38,8,40,51,"error"],[39,6,40,57],[39,7,40,58],[39,8,40,59],[39,11,40,62],[39,15,40,62,"serialize"],[39,30,40,71],[39,31,40,71,"serialize"],[39,40,40,71],[39,42,40,72],[40,8,40,74,"result"],[41,6,40,81],[41,7,40,82],[41,8,40,83],[42,6,41,4],[42,12,41,10,"resultBytes"],[42,23,41,21],[42,26,41,24],[42,30,41,28,"TextEncoder"],[42,41,41,39],[42,42,41,40],[42,43,41,41],[42,44,41,42,"encode"],[42,50,41,48],[42,51,41,49,"resultJson"],[42,61,41,59],[42,62,41,60],[43,6,42,4],[43,12,42,10,"length"],[43,18,42,16],[43,21,42,19,"resultBytes"],[43,32,42,30],[43,33,42,31,"length"],[43,39,42,37],[44,6,43,4,"resultArray"],[44,17,43,15],[44,18,43,16,"set"],[44,21,43,19],[44,22,43,20],[44,26,43,24,"Uint32Array"],[44,37,43,35],[44,38,43,36],[44,39,43,37,"length"],[44,45,43,43],[44,46,43,44],[44,47,43,45],[44,49,43,47],[44,50,43,48],[44,51,43,49],[45,6,44,4,"resultArray"],[45,17,44,15],[45,18,44,16,"set"],[45,21,44,19],[45,22,44,20,"resultBytes"],[45,33,44,31],[45,35,44,33],[45,36,44,34],[45,37,44,35],[46,6,45,4,"Atomics"],[46,13,45,11],[46,14,45,12,"store"],[46,19,45,17],[46,20,45,18,"lock"],[46,24,45,22],[46,26,45,24],[46,27,45,25],[46,29,45,27,"RESOLVED"],[46,37,45,35],[46,38,45,36],[47,4,46,2],[47,5,46,3],[47,11,46,9],[48,6,47,4],[48,10,47,8,"result"],[48,16,47,14],[48,18,47,16],[49,8,48,6,"self"],[49,12,48,10],[49,13,48,11,"postMessage"],[49,24,48,22],[49,25,48,23],[50,10,48,25,"id"],[50,12,48,27],[51,10,48,29,"result"],[52,8,48,36],[52,9,48,37],[52,10,48,38],[53,6,49,4],[53,7,49,5],[53,13,49,11],[54,8,50,6,"self"],[54,12,50,10],[54,13,50,11,"postMessage"],[54,24,50,22],[54,25,50,23],[55,10,50,25,"id"],[55,12,50,27],[56,10,50,29,"error"],[57,8,50,35],[57,9,50,36],[57,10,50,37],[58,6,51,4],[59,4,52,2],[60,2,53,0],[62,2,55,0],[63,0,56,0],[64,0,57,0],[65,2,58,7],[65,11,58,16,"workerMessageHandler"],[65,31,58,36,"workerMessageHandler"],[65,32,58,37,"event"],[65,37,58,56],[65,39,58,58],[66,4,59,2],[66,10,59,8],[67,6,59,10,"id"],[67,8,59,12],[68,6,59,14,"result"],[68,12,59,20],[69,6,59,22,"error"],[69,11,59,27],[70,6,59,29,"isSync"],[71,4,59,36],[71,5,59,37],[71,8,59,40,"event"],[71,13,59,45],[71,14,59,46,"data"],[71,18,59,50],[72,4,60,2],[72,8,60,6],[72,9,60,7,"isSync"],[72,15,60,13],[72,17,60,15],[73,6,61,4],[73,12,61,10,"deferred"],[73,20,61,18],[73,23,61,21,"deferredMap"],[73,34,61,32],[73,35,61,33,"get"],[73,38,61,36],[73,39,61,37,"id"],[73,41,61,39],[73,42,61,40],[74,6,62,4],[74,10,62,8,"deferred"],[74,18,62,16],[74,20,62,18],[75,8,63,6],[75,12,63,10,"error"],[75,17,63,15],[75,19,63,17],[76,10,64,8,"deferred"],[76,18,64,16],[76,19,64,17,"reject"],[76,25,64,23],[76,26,64,24],[76,30,64,28,"Error"],[76,35,64,33],[76,36,64,34,"error"],[76,41,64,39],[76,42,64,40],[76,43,64,41],[77,8,65,6],[77,9,65,7],[77,15,65,13],[78,10,66,8,"deferred"],[78,18,66,16],[78,19,66,17,"resolve"],[78,26,66,24],[78,27,66,25,"result"],[78,33,66,31],[78,34,66,32],[79,8,67,6],[80,8,68,6,"deferredMap"],[80,19,68,17],[80,20,68,18,"delete"],[80,26,68,24],[80,27,68,25,"id"],[80,29,68,27],[80,30,68,28],[81,6,69,4],[82,4,70,2],[83,2,71,0],[85,2,73,0],[86,0,74,0],[87,0,75,0],[88,2,76,7],[88,17,76,22,"invokeWorkerAsync"],[88,34,76,39,"invokeWorkerAsync"],[88,35,77,2,"worker"],[88,41,77,16],[88,43,78,2,"type"],[88,47,78,9],[88,49,79,2,"data"],[88,53,79,33],[88,55,80,29],[89,4,81,2],[89,10,81,8,"id"],[89,12,81,10],[89,15,81,13,"messageId"],[89,24,81,22],[89,26,81,24],[90,4,82,2],[90,10,82,8,"deferred"],[90,18,82,16],[90,21,82,19],[90,25,82,23,"Deferred"],[90,34,82,31],[90,35,82,31,"Deferred"],[90,43,82,31],[90,44,82,50],[90,45,82,51],[91,4,83,2,"deferredMap"],[91,15,83,13],[91,16,83,14,"set"],[91,19,83,17],[91,20,83,18,"id"],[91,22,83,20],[91,24,83,22,"deferred"],[91,32,83,30],[91,33,83,31],[92,4,84,2,"worker"],[92,10,84,8],[92,11,84,9,"postMessage"],[92,22,84,20],[92,23,84,21],[93,6,84,23,"type"],[93,10,84,27],[94,6,84,29,"id"],[94,8,84,31],[95,6,84,33,"data"],[95,10,84,37],[96,6,84,39,"isSync"],[96,12,84,45],[96,14,84,47],[97,4,84,53],[97,5,84,54],[97,6,84,55],[98,4,85,2],[98,11,85,9,"deferred"],[98,19,85,17],[98,20,85,18,"getPromise"],[98,30,85,28],[98,31,85,29],[98,32,85,30],[99,2,86,0],[101,2,88,0],[102,0,89,0],[103,0,90,0],[104,2,91,7],[104,11,91,16,"invokeWorkerSync"],[104,27,91,32,"invokeWorkerSync"],[104,28,92,2,"worker"],[104,34,92,16],[104,36,93,2,"type"],[104,40,93,9],[104,42,94,2,"data"],[104,46,94,33],[104,48,95,20],[105,4,96,2],[105,8,96,6,"__DEV__"],[105,15,96,13],[105,19,96,17],[105,20,96,18,"hasWarnedSync"],[105,33,96,31],[105,35,96,33],[106,6,97,4,"console"],[106,13,97,11],[106,14,97,12,"warn"],[106,18,97,16],[106,19,98,6],[106,139,99,4],[106,140,99,5],[107,6,100,4,"hasWarnedSync"],[107,19,100,17],[107,22,100,20],[107,26,100,24],[108,4,101,2],[109,4,103,2],[109,10,103,8,"id"],[109,12,103,10],[109,15,103,13,"messageId"],[109,24,103,22],[109,26,103,24],[110,4,104,2],[110,10,104,8,"lockBuffer"],[110,20,104,18],[110,23,104,21],[110,27,104,25,"SharedArrayBuffer"],[110,44,104,42],[110,45,104,43],[110,46,104,44],[110,47,104,45],[111,4,105,2],[111,10,105,8,"lock"],[111,14,105,12],[111,17,105,15],[111,21,105,19,"Int32Array"],[111,31,105,29],[111,32,105,30,"lockBuffer"],[111,42,105,40],[111,43,105,41],[112,4,106,2],[112,10,106,8,"resultBuffer"],[112,22,106,20],[112,25,106,23],[112,29,106,27,"SharedArrayBuffer"],[112,46,106,44],[112,47,106,45],[112,51,106,49],[112,54,106,52],[112,58,106,56],[112,59,106,57],[113,4,107,2],[113,10,107,8,"resultArray"],[113,21,107,19],[113,24,107,22],[113,28,107,26,"Uint8Array"],[113,38,107,36],[113,39,107,37,"resultBuffer"],[113,51,107,49],[113,52,107,50],[114,4,109,2,"Atomics"],[114,11,109,9],[114,12,109,10,"store"],[114,17,109,15],[114,18,109,16,"lock"],[114,22,109,20],[114,24,109,22],[114,25,109,23],[114,27,109,25,"PENDING"],[114,34,109,32],[114,35,109,33],[115,4,110,2,"worker"],[115,10,110,8],[115,11,110,9,"postMessage"],[115,22,110,20],[115,23,110,21],[116,6,111,4,"type"],[116,10,111,8],[117,6,112,4,"id"],[117,8,112,6],[118,6,113,4,"data"],[118,10,113,8],[119,6,114,4,"isSync"],[119,12,114,10],[119,14,114,12],[119,18,114,16],[120,6,115,4,"lockBuffer"],[120,16,115,14],[121,6,116,4,"resultBuffer"],[122,4,117,2],[122,5,117,3],[122,6,117,4],[123,4,119,2],[123,8,119,6,"i"],[123,9,119,7],[123,12,119,10],[123,13,119,11],[124,4,120,2],[125,4,121,2],[125,10,121,8,"useAtomicsPause"],[125,25,121,23],[125,28,121,26],[125,35,121,33,"Atomics"],[125,42,121,40],[125,43,121,41,"pause"],[125,48,121,46],[125,53,121,51],[125,63,121,61],[126,4,122,2],[126,11,122,9,"Atomics"],[126,18,122,16],[126,19,122,17,"load"],[126,23,122,21],[126,24,122,22,"lock"],[126,28,122,26],[126,30,122,28],[126,31,122,29],[126,32,122,30],[126,37,122,35,"PENDING"],[126,44,122,42],[126,46,122,44],[127,6,123,4],[127,8,123,6,"i"],[127,9,123,7],[128,6,125,4],[128,10,125,8,"useAtomicsPause"],[128,25,125,23],[128,27,125,25],[129,8,126,6],[129,12,126,10,"i"],[129,13,126,11],[129,16,126,14],[129,25,126,23],[129,27,126,25],[130,10,127,8],[130,16,127,14],[130,20,127,18,"Error"],[130,25,127,23],[130,26,127,24],[130,50,127,48],[130,51,127,49],[131,8,128,6],[132,8,129,6],[133,8,130,6,"Atomics"],[133,15,130,13],[133,16,130,14,"pause"],[133,21,130,19],[133,22,130,20],[133,23,130,21],[134,6,131,4],[134,7,131,5],[134,13,131,11],[135,8,132,6],[136,8,133,6],[137,8,134,6],[137,12,134,10,"i"],[137,13,134,11],[137,16,134,14],[137,28,134,26],[137,30,134,28],[138,10,135,8],[138,16,135,14],[138,20,135,18,"Error"],[138,25,135,23],[138,26,135,24],[138,50,135,48],[138,51,135,49],[139,8,136,6],[140,6,137,4],[141,4,138,2],[142,4,140,2],[142,10,140,8,"length"],[142,16,140,14],[142,19,140,17],[142,23,140,21,"Uint32Array"],[142,34,140,32],[142,35,140,33,"resultArray"],[142,46,140,44],[142,47,140,45,"buffer"],[142,53,140,51],[142,55,140,53],[142,56,140,54],[142,58,140,56],[142,59,140,57],[142,60,140,58],[142,61,140,59],[142,62,140,60],[142,63,140,61],[143,4,141,2],[143,10,141,8,"resultCopy"],[143,20,141,18],[143,23,141,21],[143,27,141,25,"Uint8Array"],[143,37,141,35],[143,38,141,36,"length"],[143,44,141,42],[143,45,141,43],[144,4,142,2,"resultCopy"],[144,14,142,12],[144,15,142,13,"set"],[144,18,142,16],[144,19,142,17],[144,23,142,21,"Uint8Array"],[144,33,142,31],[144,34,142,32,"resultArray"],[144,45,142,43],[144,46,142,44,"buffer"],[144,52,142,50],[144,54,142,52],[144,55,142,53],[144,57,142,55,"length"],[144,63,142,61],[144,64,142,62],[144,65,142,63],[145,4,143,2],[145,10,143,8,"resultJson"],[145,20,143,18],[145,23,143,21],[145,27,143,25,"TextDecoder"],[145,38,143,36],[145,39,143,37],[145,40,143,38],[145,41,143,39,"decode"],[145,47,143,45],[145,48,143,46,"resultCopy"],[145,58,143,56],[145,59,143,57],[146,4,144,2],[146,10,144,8],[147,6,144,10,"result"],[147,12,144,16],[148,6,144,18,"error"],[149,4,144,24],[149,5,144,25],[149,8,144,28],[149,12,144,28,"deserialize"],[149,27,144,39],[149,28,144,39,"deserialize"],[149,39,144,39],[149,41,144,86,"resultJson"],[149,51,144,96],[149,52,144,97],[150,4,145,2],[150,8,145,6,"error"],[150,13,145,11],[150,15,145,13],[150,21,145,19],[150,25,145,23,"Error"],[150,30,145,28],[150,31,145,29,"error"],[150,36,145,34],[150,37,145,35],[151,4,146,2],[151,11,146,9,"result"],[151,17,146,15],[152,2,147,0],[153,0,147,1],[153,3]],"functionMap":{"names":["<global>","sendWorkerResult","workerMessageHandler","invokeWorkerAsync","invokeWorkerSync"],"mappings":"AAA;OCqB;CD+B;OEK;CFa;OGK;CHU;OIK;CJwD"},"hasCjsExports":false},"type":"js/module"}]}