{"dependencies":[{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"5y7e5+zC7teYEEC6niD9f5zII1M=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"YisBBiy2Xm9DEVdFebZ2nbgAHBo=","exportNames":["*"],"imports":1}},{"name":"expo-modules-core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":56,"index":56}}],"key":"fU8WLIPqoAGygnPbZ/QJiQQfXEY=","exportNames":["*"],"imports":1}},{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":57},"end":{"line":2,"column":44,"index":101}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8=","exportNames":["*"],"imports":1}},{"name":"./ExpoNetwork","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":102},"end":{"line":3,"column":40,"index":142}}],"key":"Yqddhm5j9b01inHghA+b7Za0zms=","exportNames":["*"],"imports":1}},{"name":"./Network.types","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":143},"end":{"line":4,"column":51,"index":194}}],"key":"GiPLcUg9tZbd6VOtWB0JLN4tfy8=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"NetworkStateType\", {\n    enumerable: true,\n    get: function () {\n      return _NetworkTypes.NetworkStateType;\n    }\n  });\n  exports.getNetworkStateAsync = getNetworkStateAsync;\n  exports.getIpAddressAsync = getIpAddressAsync;\n  exports.isAirplaneModeEnabledAsync = isAirplaneModeEnabledAsync;\n  exports.addNetworkStateListener = addNetworkStateListener;\n  exports.useNetworkState = useNetworkState;\n  var _babelRuntimeHelpersSlicedToArray = require(_dependencyMap[0], \"@babel/runtime/helpers/slicedToArray\");\n  var _slicedToArray = _interopDefault(_babelRuntimeHelpersSlicedToArray);\n  var _babelRuntimeHelpersAsyncToGenerator = require(_dependencyMap[1], \"@babel/runtime/helpers/asyncToGenerator\");\n  var _asyncToGenerator = _interopDefault(_babelRuntimeHelpersAsyncToGenerator);\n  var _expoModulesCore = require(_dependencyMap[2], \"expo-modules-core\");\n  var _react = require(_dependencyMap[3], \"react\");\n  var _ExpoNetwork = require(_dependencyMap[4], \"./ExpoNetwork\");\n  var ExpoNetwork = _interopDefault(_ExpoNetwork);\n  var _NetworkTypes = require(_dependencyMap[5], \"./Network.types\");\n  var onNetworkStateEventName = 'onNetworkStateChanged';\n  // @needsAudit\n  /**\n   * Gets the device's current network connection state.\n   *\n   * On web, `navigator.connection.type` is not available on browsers. So if there is an active\n   * network connection, the field `type` returns `NetworkStateType.UNKNOWN`. Otherwise, it returns\n   * `NetworkStateType.NONE`.\n   * @return A `Promise` that fulfils with a `NetworkState` object.\n   *\n   * @example\n   * ```ts\n   * await Network.getNetworkStateAsync();\n   * // {\n   * //   type: NetworkStateType.CELLULAR,\n   * //   isConnected: true,\n   * //   isInternetReachable: true,\n   * // }\n   * ```\n   */\n  function getNetworkStateAsync() {\n    return _getNetworkStateAsync.apply(this, arguments);\n  } // @needsAudit\n  /**\n   * Gets the device's current IPv4 address. Returns `0.0.0.0` if the IP address could not be retrieved.\n   *\n   * On web, this method uses the third-party [`ipify service`](https://www.ipify.org/) to get the\n   * public IP address of the current device.\n   * @return A `Promise` that fulfils with a `string` of the current IP address of the device's main\n   * network interface. Can only be IPv4 address.\n   *\n   * @example\n   * ```ts\n   * await Network.getIpAddressAsync();\n   * // \"92.168.32.44\"\n   * ```\n   */\n  function _getNetworkStateAsync() {\n    _getNetworkStateAsync = (0, _asyncToGenerator.default)(function* () {\n      if (!ExpoNetwork.default.getNetworkStateAsync) {\n        throw new _expoModulesCore.UnavailabilityError('expo-network', 'getNetworkStateAsync');\n      }\n      return yield ExpoNetwork.default.getNetworkStateAsync();\n    });\n    return _getNetworkStateAsync.apply(this, arguments);\n  }\n  function getIpAddressAsync() {\n    return _getIpAddressAsync.apply(this, arguments);\n  } // @needsAudit\n  /**\n   * Tells if the device is in airplane mode.\n   * @return Returns a `Promise` that fulfils with a `boolean` value for whether the device is in\n   * airplane mode or not.\n   * @platform android\n   *\n   * @example\n   * ```ts\n   * await Network.isAirplaneModeEnabledAsync();\n   * // false\n   * ```\n   */\n  function _getIpAddressAsync() {\n    _getIpAddressAsync = (0, _asyncToGenerator.default)(function* () {\n      if (!ExpoNetwork.default.getIpAddressAsync) {\n        throw new _expoModulesCore.UnavailabilityError('expo-network', 'getIpAddressAsync');\n      }\n      return yield ExpoNetwork.default.getIpAddressAsync();\n    });\n    return _getIpAddressAsync.apply(this, arguments);\n  }\n  function isAirplaneModeEnabledAsync() {\n    return _isAirplaneModeEnabledAsync.apply(this, arguments);\n  }\n  /**\n   * Adds a listener that will fire whenever the network state changes.\n   *\n   * @param listener Callback to execute when the network state changes. The callback is provided with\n   * a single argument that is an object containing information about the network state.\n   *\n   * @example\n   * ```ts\n   * const subscription = addNetworkStateListener(({ type, isConnected, isInternetReachable }) => {\n   *   console.log(`Network type: ${type}, Connected: ${isConnected}, Internet Reachable: ${isInternetReachable}`);\n   * });\n   * ```\n   *\n   * @returns A subscription object with a remove function to unregister the listener.\n   */\n  function _isAirplaneModeEnabledAsync() {\n    _isAirplaneModeEnabledAsync = (0, _asyncToGenerator.default)(function* () {\n      if (!ExpoNetwork.default.isAirplaneModeEnabledAsync) {\n        throw new _expoModulesCore.UnavailabilityError('expo-network', 'isAirplaneModeEnabledAsync');\n      }\n      return yield ExpoNetwork.default.isAirplaneModeEnabledAsync();\n    });\n    return _isAirplaneModeEnabledAsync.apply(this, arguments);\n  }\n  function addNetworkStateListener(listener) {\n    return ExpoNetwork.default.addListener(onNetworkStateEventName, listener);\n  }\n  // @needsAudit\n  /**\n   * Returns the current network state of the device. This method\n   * initiates a listener for network state changes and cleans up before unmounting.\n   *\n   * @example\n   * ```ts\n   * const networkState = useNetworkState();\n   * console.log(`Current network type: ${networkState.type}`);\n   * ```\n   *\n   * @return The current network state of the device, including connectivity and type.\n   */\n  function useNetworkState() {\n    var _useState = (0, _react.useState)({}),\n      _useState2 = (0, _slicedToArray.default)(_useState, 2),\n      networkState = _useState2[0],\n      setNetworkState = _useState2[1];\n    (0, _react.useEffect)(() => {\n      getNetworkStateAsync().then(setNetworkState);\n      var listener = addNetworkStateListener(networkState => setNetworkState(networkState));\n      return () => listener.remove();\n    }, []);\n    return networkState;\n  }\n});","lineCount":157,"map":[[12,2,5,0,"Object"],[12,8,5,0],[12,9,5,0,"defineProperty"],[12,23,5,0],[12,24,5,0,"exports"],[12,31,5,0],[13,4,5,0,"enumerable"],[13,14,5,0],[14,4,5,0,"get"],[14,7,5,0],[14,18,5,0,"get"],[14,19,5,0],[15,6,5,0],[15,13,5,9,"NetworkStateType"],[15,26,5,25],[15,27,5,25,"NetworkStateType"],[15,43,5,25],[16,4,5,25],[17,2,5,25],[18,2,26,0,"exports"],[18,9,26,0],[18,10,26,0,"getNetworkStateAsync"],[18,30,26,0],[18,33,26,0,"getNetworkStateAsync"],[18,53,26,0],[19,2,47,0,"exports"],[19,9,47,0],[19,10,47,0,"getIpAddressAsync"],[19,27,47,0],[19,30,47,0,"getIpAddressAsync"],[19,47,47,0],[20,2,66,0,"exports"],[20,9,66,0],[20,10,66,0,"isAirplaneModeEnabledAsync"],[20,36,66,0],[20,39,66,0,"isAirplaneModeEnabledAsync"],[20,65,66,0],[21,2,87,0,"exports"],[21,9,87,0],[21,10,87,0,"addNetworkStateListener"],[21,33,87,0],[21,36,87,0,"addNetworkStateListener"],[21,59,87,0],[22,2,103,0,"exports"],[22,9,103,0],[22,10,103,0,"useNetworkState"],[22,25,103,0],[22,28,103,0,"useNetworkState"],[22,43,103,0],[23,2,111,1],[23,6,111,1,"_babelRuntimeHelpersSlicedToArray"],[23,39,111,1],[23,42,111,1,"require"],[23,49,111,1],[23,50,111,1,"_dependencyMap"],[23,64,111,1],[24,2,111,1],[24,6,111,1,"_slicedToArray"],[24,20,111,1],[24,23,111,1,"_interopDefault"],[24,38,111,1],[24,39,111,1,"_babelRuntimeHelpersSlicedToArray"],[24,72,111,1],[25,2,111,1],[25,6,111,1,"_babelRuntimeHelpersAsyncToGenerator"],[25,42,111,1],[25,45,111,1,"require"],[25,52,111,1],[25,53,111,1,"_dependencyMap"],[25,67,111,1],[26,2,111,1],[26,6,111,1,"_asyncToGenerator"],[26,23,111,1],[26,26,111,1,"_interopDefault"],[26,41,111,1],[26,42,111,1,"_babelRuntimeHelpersAsyncToGenerator"],[26,78,111,1],[27,2,1,0],[27,6,1,0,"_expoModulesCore"],[27,22,1,0],[27,25,1,0,"require"],[27,32,1,0],[27,33,1,0,"_dependencyMap"],[27,47,1,0],[28,2,2,0],[28,6,2,0,"_react"],[28,12,2,0],[28,15,2,0,"require"],[28,22,2,0],[28,23,2,0,"_dependencyMap"],[28,37,2,0],[29,2,3,0],[29,6,3,0,"_ExpoNetwork"],[29,18,3,0],[29,21,3,0,"require"],[29,28,3,0],[29,29,3,0,"_dependencyMap"],[29,43,3,0],[30,2,3,0],[30,6,3,0,"ExpoNetwork"],[30,17,3,0],[30,20,3,0,"_interopDefault"],[30,35,3,0],[30,36,3,0,"_ExpoNetwork"],[30,48,3,0],[31,2,4,0],[31,6,4,0,"_NetworkTypes"],[31,19,4,0],[31,22,4,0,"require"],[31,29,4,0],[31,30,4,0,"_dependencyMap"],[31,44,4,0],[32,2,6,0],[32,6,6,6,"onNetworkStateEventName"],[32,29,6,29],[32,32,6,32],[32,55,6,55],[33,2,7,0],[34,2,8,0],[35,0,9,0],[36,0,10,0],[37,0,11,0],[38,0,12,0],[39,0,13,0],[40,0,14,0],[41,0,15,0],[42,0,16,0],[43,0,17,0],[44,0,18,0],[45,0,19,0],[46,0,20,0],[47,0,21,0],[48,0,22,0],[49,0,23,0],[50,0,24,0],[51,0,25,0],[52,2,8,0],[52,11,26,22,"getNetworkStateAsync"],[52,31,26,42,"getNetworkStateAsync"],[52,32,26,42],[53,4,26,42],[53,11,26,42,"_getNetworkStateAsync"],[53,32,26,42],[53,33,26,42,"apply"],[53,38,26,42],[53,45,26,42,"arguments"],[53,54,26,42],[54,2,26,42],[54,4,32,0],[55,2,33,0],[56,0,34,0],[57,0,35,0],[58,0,36,0],[59,0,37,0],[60,0,38,0],[61,0,39,0],[62,0,40,0],[63,0,41,0],[64,0,42,0],[65,0,43,0],[66,0,44,0],[67,0,45,0],[68,0,46,0],[69,2,33,0],[69,11,33,0,"_getNetworkStateAsync"],[69,33,33,0],[70,4,33,0,"_getNetworkStateAsync"],[70,25,33,0],[70,32,33,0,"_asyncToGenerator"],[70,49,33,0],[70,50,33,0,"default"],[70,57,33,0],[70,59,26,7],[70,72,26,45],[71,6,27,4],[71,10,27,8],[71,11,27,9,"ExpoNetwork"],[71,22,27,20],[71,23,27,20,"default"],[71,30,27,20],[71,31,27,21,"getNetworkStateAsync"],[71,51,27,41],[71,53,27,43],[72,8,28,8],[72,14,28,14],[72,18,28,18,"UnavailabilityError"],[72,34,28,37],[72,35,28,37,"UnavailabilityError"],[72,54,28,37],[72,55,28,38],[72,69,28,52],[72,71,28,54],[72,93,28,76],[72,94,28,77],[73,6,29,4],[74,6,30,4],[74,19,30,17,"ExpoNetwork"],[74,30,30,28],[74,31,30,28,"default"],[74,38,30,28],[74,39,30,29,"getNetworkStateAsync"],[74,59,30,49],[74,60,30,50],[74,61,30,51],[75,4,31,0],[75,5,31,1],[76,4,31,1],[76,11,31,1,"_getNetworkStateAsync"],[76,32,31,1],[76,33,31,1,"apply"],[76,38,31,1],[76,45,31,1,"arguments"],[76,54,31,1],[77,2,31,1],[78,2,31,1],[78,11,47,22,"getIpAddressAsync"],[78,28,47,39,"getIpAddressAsync"],[78,29,47,39],[79,4,47,39],[79,11,47,39,"_getIpAddressAsync"],[79,29,47,39],[79,30,47,39,"apply"],[79,35,47,39],[79,42,47,39,"arguments"],[79,51,47,39],[80,2,47,39],[80,4,53,0],[81,2,54,0],[82,0,55,0],[83,0,56,0],[84,0,57,0],[85,0,58,0],[86,0,59,0],[87,0,60,0],[88,0,61,0],[89,0,62,0],[90,0,63,0],[91,0,64,0],[92,0,65,0],[93,2,54,0],[93,11,54,0,"_getIpAddressAsync"],[93,30,54,0],[94,4,54,0,"_getIpAddressAsync"],[94,22,54,0],[94,29,54,0,"_asyncToGenerator"],[94,46,54,0],[94,47,54,0,"default"],[94,54,54,0],[94,56,47,7],[94,69,47,42],[95,6,48,4],[95,10,48,8],[95,11,48,9,"ExpoNetwork"],[95,22,48,20],[95,23,48,20,"default"],[95,30,48,20],[95,31,48,21,"getIpAddressAsync"],[95,48,48,38],[95,50,48,40],[96,8,49,8],[96,14,49,14],[96,18,49,18,"UnavailabilityError"],[96,34,49,37],[96,35,49,37,"UnavailabilityError"],[96,54,49,37],[96,55,49,38],[96,69,49,52],[96,71,49,54],[96,90,49,73],[96,91,49,74],[97,6,50,4],[98,6,51,4],[98,19,51,17,"ExpoNetwork"],[98,30,51,28],[98,31,51,28,"default"],[98,38,51,28],[98,39,51,29,"getIpAddressAsync"],[98,56,51,46],[98,57,51,47],[98,58,51,48],[99,4,52,0],[99,5,52,1],[100,4,52,1],[100,11,52,1,"_getIpAddressAsync"],[100,29,52,1],[100,30,52,1,"apply"],[100,35,52,1],[100,42,52,1,"arguments"],[100,51,52,1],[101,2,52,1],[102,2,52,1],[102,11,66,22,"isAirplaneModeEnabledAsync"],[102,37,66,48,"isAirplaneModeEnabledAsync"],[102,38,66,48],[103,4,66,48],[103,11,66,48,"_isAirplaneModeEnabledAsync"],[103,38,66,48],[103,39,66,48,"apply"],[103,44,66,48],[103,51,66,48,"arguments"],[103,60,66,48],[104,2,66,48],[105,2,72,0],[106,0,73,0],[107,0,74,0],[108,0,75,0],[109,0,76,0],[110,0,77,0],[111,0,78,0],[112,0,79,0],[113,0,80,0],[114,0,81,0],[115,0,82,0],[116,0,83,0],[117,0,84,0],[118,0,85,0],[119,0,86,0],[120,2,72,0],[120,11,72,0,"_isAirplaneModeEnabledAsync"],[120,39,72,0],[121,4,72,0,"_isAirplaneModeEnabledAsync"],[121,31,72,0],[121,38,72,0,"_asyncToGenerator"],[121,55,72,0],[121,56,72,0,"default"],[121,63,72,0],[121,65,66,7],[121,78,66,51],[122,6,67,4],[122,10,67,8],[122,11,67,9,"ExpoNetwork"],[122,22,67,20],[122,23,67,20,"default"],[122,30,67,20],[122,31,67,21,"isAirplaneModeEnabledAsync"],[122,57,67,47],[122,59,67,49],[123,8,68,8],[123,14,68,14],[123,18,68,18,"UnavailabilityError"],[123,34,68,37],[123,35,68,37,"UnavailabilityError"],[123,54,68,37],[123,55,68,38],[123,69,68,52],[123,71,68,54],[123,99,68,82],[123,100,68,83],[124,6,69,4],[125,6,70,4],[125,19,70,17,"ExpoNetwork"],[125,30,70,28],[125,31,70,28,"default"],[125,38,70,28],[125,39,70,29,"isAirplaneModeEnabledAsync"],[125,65,70,55],[125,66,70,56],[125,67,70,57],[126,4,71,0],[126,5,71,1],[127,4,71,1],[127,11,71,1,"_isAirplaneModeEnabledAsync"],[127,38,71,1],[127,39,71,1,"apply"],[127,44,71,1],[127,51,71,1,"arguments"],[127,60,71,1],[128,2,71,1],[129,2,87,7],[129,11,87,16,"addNetworkStateListener"],[129,34,87,39,"addNetworkStateListener"],[129,35,87,40,"listener"],[129,43,87,48],[129,45,87,50],[130,4,88,4],[130,11,88,11,"ExpoNetwork"],[130,22,88,22],[130,23,88,22,"default"],[130,30,88,22],[130,31,88,23,"addListener"],[130,42,88,34],[130,43,88,35,"onNetworkStateEventName"],[130,66,88,58],[130,68,88,60,"listener"],[130,76,88,68],[130,77,88,69],[131,2,89,0],[132,2,90,0],[133,2,91,0],[134,0,92,0],[135,0,93,0],[136,0,94,0],[137,0,95,0],[138,0,96,0],[139,0,97,0],[140,0,98,0],[141,0,99,0],[142,0,100,0],[143,0,101,0],[144,0,102,0],[145,2,103,7],[145,11,103,16,"useNetworkState"],[145,26,103,31,"useNetworkState"],[145,27,103,31],[145,29,103,34],[146,4,104,4],[146,8,104,4,"_useState"],[146,17,104,4],[146,20,104,44],[146,24,104,44,"useState"],[146,30,104,52],[146,31,104,52,"useState"],[146,39,104,52],[146,41,104,53],[146,42,104,54],[146,43,104,55],[146,44,104,56],[147,6,104,56,"_useState2"],[147,16,104,56],[147,23,104,56,"_slicedToArray"],[147,37,104,56],[147,38,104,56,"default"],[147,45,104,56],[147,47,104,56,"_useState"],[147,56,104,56],[148,6,104,11,"networkState"],[148,18,104,23],[148,21,104,23,"_useState2"],[148,31,104,23],[149,6,104,25,"setNetworkState"],[149,21,104,40],[149,24,104,40,"_useState2"],[149,34,104,40],[150,4,105,4],[150,8,105,4,"useEffect"],[150,14,105,13],[150,15,105,13,"useEffect"],[150,24,105,13],[150,26,105,14],[150,32,105,20],[151,6,106,8,"getNetworkStateAsync"],[151,26,106,28],[151,27,106,29],[151,28,106,30],[151,29,106,31,"then"],[151,33,106,35],[151,34,106,36,"setNetworkState"],[151,49,106,51],[151,50,106,52],[152,6,107,8],[152,10,107,14,"listener"],[152,18,107,22],[152,21,107,25,"addNetworkStateListener"],[152,44,107,48],[152,45,107,50,"networkState"],[152,57,107,62],[152,61,107,67,"setNetworkState"],[152,76,107,82],[152,77,107,83,"networkState"],[152,89,107,95],[152,90,107,96],[152,91,107,97],[153,6,108,8],[153,13,108,15],[153,19,108,21,"listener"],[153,27,108,29],[153,28,108,30,"remove"],[153,34,108,36],[153,35,108,37],[153,36,108,38],[154,4,109,4],[154,5,109,5],[154,7,109,7],[154,9,109,9],[154,10,109,10],[155,4,110,4],[155,11,110,11,"networkState"],[155,23,110,23],[156,2,111,0],[157,0,111,1],[157,3]],"functionMap":{"names":["<global>","getNetworkStateAsync","getIpAddressAsync","isAirplaneModeEnabledAsync","addNetworkStateListener","useNetworkState","useEffect$argument_0","addNetworkStateListener$argument_0","<anonymous>"],"mappings":"AAA;OCyB;CDK;OEgB;CFK;OGc;CHK;OIgB;CJE;OKc;cCE;iDCE,+CD;eEC,uBF;KDC;CLE"},"hasCjsExports":false},"type":"js/module"}]}