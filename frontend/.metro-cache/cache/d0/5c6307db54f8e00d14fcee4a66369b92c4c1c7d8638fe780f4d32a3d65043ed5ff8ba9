{"dependencies":[{"name":"expo-network","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":40,"index":40}}],"key":"1uj8I4G/JNBf3YRANaksFTH4dPs=","exportNames":["*"],"imports":1}},{"name":"@react-native-async-storage/async-storage","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":41},"end":{"line":2,"column":69,"index":110}}],"key":"0kSRlooyBOaYM9tlTtK91nq+uds=","exportNames":["*"],"imports":1}},{"name":"react-native-web/dist/exports/Platform","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"dV3bI3NOD8bfMzaIniMaFGy/nn8=","exportNames":["*"],"imports":1}},{"name":"expo-sqlite","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":9,"column":13,"index":282},"end":{"line":9,"column":35,"index":304}}],"key":"GKiGjSrQOvcupMZQ3hr9QFZCWAc=","exportNames":["*"],"imports":1,"isOptional":true}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopNamespace(e) {\n    if (e && e.__esModule) return e;\n    var n = {};\n    if (e) Object.keys(e).forEach(function (k) {\n      var d = Object.getOwnPropertyDescriptor(e, k);\n      Object.defineProperty(n, k, d.get ? d : {\n        enumerable: true,\n        get: function () {\n          return e[k];\n        }\n      });\n    });\n    n.default = e;\n    return n;\n  }\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"localDB\", {\n    enumerable: true,\n    get: function () {\n      return localDB;\n    }\n  });\n  var _expoNetwork = require(_dependencyMap[0], \"expo-network\");\n  var Network = _interopNamespace(_expoNetwork);\n  var _reactNativeAsyncStorageAsyncStorage = require(_dependencyMap[1], \"@react-native-async-storage/async-storage\");\n  var AsyncStorage = _interopDefault(_reactNativeAsyncStorageAsyncStorage);\n  var _reactNativeWebDistExportsPlatform = require(_dependencyMap[2], \"react-native-web/dist/exports/Platform\");\n  var Platform = _interopDefault(_reactNativeWebDistExportsPlatform);\n  // Conditional SQLite import only for mobile platforms\n  let SQLite = null;\n  if (Platform.default.OS !== 'web') {\n    try {\n      SQLite = require(_dependencyMap[3], \"expo-sqlite\");\n    } catch (error) {\n      console.warn('SQLite not available on this platform');\n    }\n  }\n\n  // Типы для локальных данных\n\n  class LocalDatabaseManager {\n    db = null;\n    syncInProgress = false;\n    async initialize() {\n      if (!SQLite) {\n        console.warn('⚠️ SQLite not available on this platform - database features disabled');\n        return;\n      }\n      try {\n        this.db = await SQLite.openDatabaseAsync('good_road.db');\n        await this.createTables();\n        console.log('✅ Local database initialized');\n      } catch (error) {\n        console.error('❌ Database initialization error:', error);\n        throw error;\n      }\n    }\n    async createTables() {\n      if (!this.db) throw new Error('Database not initialized');\n\n      // Таблица для данных датчиков (собранных пользователем)\n      await this.db.execAsync(`\n      CREATE TABLE IF NOT EXISTS sensor_data (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        server_id TEXT,\n        latitude REAL NOT NULL,\n        longitude REAL NOT NULL,\n        timestamp TEXT NOT NULL,\n        speed REAL DEFAULT 0,\n        accuracy REAL DEFAULT 0,\n        accelerometer_x REAL DEFAULT 0,\n        accelerometer_y REAL DEFAULT 0,\n        accelerometer_z REAL DEFAULT 0,\n        road_quality REAL DEFAULT 50,\n        is_synced INTEGER DEFAULT 0,\n        created_at TEXT NOT NULL\n      );\n    `);\n\n      // Таблица для предупреждений (скачанных с сервера)\n      await this.db.execAsync(`\n      CREATE TABLE IF NOT EXISTS warnings (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        server_id TEXT UNIQUE,\n        latitude REAL NOT NULL,\n        longitude REAL NOT NULL,\n        hazard_type TEXT NOT NULL,\n        severity TEXT NOT NULL,\n        description TEXT,\n        is_verified INTEGER DEFAULT 0,\n        region TEXT,\n        city TEXT,\n        country TEXT,\n        last_updated TEXT NOT NULL\n      );\n    `);\n\n      // Таблица для статуса синхронизации регионов\n      await this.db.execAsync(`\n      CREATE TABLE IF NOT EXISTS sync_regions (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        region_code TEXT UNIQUE,\n        region_name TEXT,\n        last_sync TEXT,\n        warning_count INTEGER DEFAULT 0\n      );\n    `);\n\n      // Индексы для быстрого поиска по координатам\n      await this.db.execAsync(`\n      CREATE INDEX IF NOT EXISTS idx_sensor_location \n      ON sensor_data(latitude, longitude);\n    `);\n      await this.db.execAsync(`\n      CREATE INDEX IF NOT EXISTS idx_warnings_location \n      ON warnings(latitude, longitude);\n    `);\n      console.log('✅ Database tables created');\n    }\n\n    // === SENSOR DATA MANAGEMENT ===\n    async saveSensorData(data) {\n      if (!this.db || !SQLite) {\n        console.warn('Database not available - sensor data not stored locally');\n        return -1;\n      }\n      const result = await this.db.runAsync(`\n      INSERT INTO sensor_data (\n        server_id, latitude, longitude, timestamp, speed, accuracy,\n        accelerometer_x, accelerometer_y, accelerometer_z, \n        road_quality, is_synced, created_at\n      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n    `, [data.serverId || null, data.latitude, data.longitude, data.timestamp, data.speed, data.accuracy, data.accelerometer.x, data.accelerometer.y, data.accelerometer.z, data.roadQuality, data.isSynced ? 1 : 0, new Date().toISOString()]);\n      console.log(`💾 Saved sensor data locally (ID: ${result.lastInsertRowId})`);\n      return result.lastInsertRowId;\n    }\n    async getUnsyncedSensorData() {\n      if (!this.db || !SQLite) {\n        console.warn('Database not available - returning empty unsynced data');\n        return [];\n      }\n      const result = await this.db.getAllAsync(`\n      SELECT * FROM sensor_data WHERE is_synced = 0 ORDER BY created_at\n    `);\n      return result.map(row => ({\n        id: row.id,\n        serverId: row.server_id,\n        latitude: row.latitude,\n        longitude: row.longitude,\n        timestamp: row.timestamp,\n        speed: row.speed,\n        accuracy: row.accuracy,\n        accelerometer: {\n          x: row.accelerometer_x,\n          y: row.accelerometer_y,\n          z: row.accelerometer_z\n        },\n        roadQuality: row.road_quality,\n        isSynced: row.is_synced === 1,\n        createdAt: row.created_at\n      }));\n    }\n    async markSensorDataSynced(localIds, serverIds) {\n      if (!this.db || !SQLite || localIds.length === 0) {\n        if (!this.db || !SQLite) {\n          console.warn('Database not available - sensor data sync status not updated');\n        }\n        return;\n      }\n      const placeholders = localIds.map(() => '?').join(',');\n      await this.db.runAsync(`\n      UPDATE sensor_data \n      SET is_synced = 1 ${serverIds ? ', server_id = ?' : ''}\n      WHERE id IN (${placeholders})\n    `, serverIds ? [...localIds, ...serverIds] : localIds);\n      console.log(`✅ Marked ${localIds.length} sensor data records as synced`);\n    }\n\n    // === WARNINGS MANAGEMENT ===\n    async saveWarnings(warnings) {\n      if (!this.db || !SQLite || warnings.length === 0) {\n        if (!this.db || !SQLite) {\n          console.warn('Database not available - warnings not saved locally');\n        }\n        return;\n      }\n      const statement = await this.db.prepareAsync(`\n      INSERT OR REPLACE INTO warnings (\n        server_id, latitude, longitude, hazard_type, severity,\n        description, is_verified, region, city, country, last_updated\n      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n    `);\n      try {\n        for (const warning of warnings) {\n          await statement.executeAsync([warning.serverId || `local_${Date.now()}_${Math.random()}`, warning.latitude, warning.longitude, warning.hazardType, warning.severity, warning.description || '', warning.isVerified ? 1 : 0, warning.region || '', warning.city || '', warning.country || '', warning.lastUpdated]);\n        }\n        console.log(`💾 Saved ${warnings.length} warnings locally`);\n      } finally {\n        await statement.finalizeAsync();\n      }\n    }\n    async getNearbyWarnings(latitude, longitude, radiusKm = 1) {\n      if (!this.db || !SQLite) {\n        console.warn('Database not available - returning empty warnings');\n        return [];\n      }\n\n      // Простое приближение для поиска в радиусе\n      const latRange = radiusKm / 111; // ~1 градус = 111 км\n      const lonRange = radiusKm / (111 * Math.cos(latitude * Math.PI / 180));\n      const result = await this.db.getAllAsync(`\n      SELECT * FROM warnings \n      WHERE latitude BETWEEN ? AND ? \n      AND longitude BETWEEN ? AND ?\n      AND is_verified = 1\n      ORDER BY \n        (latitude - ?) * (latitude - ?) + \n        (longitude - ?) * (longitude - ?)\n      LIMIT 50\n    `, [latitude - latRange, latitude + latRange, longitude - lonRange, longitude + lonRange, latitude, latitude, longitude, longitude]);\n      return result.map(row => ({\n        id: row.id,\n        serverId: row.server_id,\n        latitude: row.latitude,\n        longitude: row.longitude,\n        hazardType: row.hazard_type,\n        severity: row.severity,\n        description: row.description,\n        isVerified: row.is_verified === 1,\n        region: row.region,\n        city: row.city,\n        country: row.country,\n        lastUpdated: row.last_updated\n      }));\n    }\n\n    // === REGION MANAGEMENT ===\n    async updateRegionSyncStatus(regionCode, regionName, warningCount) {\n      if (!this.db || !SQLite) {\n        console.warn('Database not available - region sync status not updated');\n        return;\n      }\n      await this.db.runAsync(`\n      INSERT OR REPLACE INTO sync_regions (region_code, region_name, last_sync, warning_count)\n      VALUES (?, ?, ?, ?)\n    `, [regionCode, regionName, new Date().toISOString(), warningCount]);\n      console.log(`📍 Updated sync status for region: ${regionName} (${warningCount} warnings)`);\n    }\n    async getDownloadedRegions() {\n      if (!this.db || !SQLite) {\n        console.warn('Database not available - returning empty regions');\n        return [];\n      }\n      const result = await this.db.getAllAsync(`\n      SELECT * FROM sync_regions ORDER BY region_name\n    `);\n      return result.map(row => ({\n        code: row.region_code,\n        name: row.region_name,\n        lastSync: row.last_sync,\n        warningCount: row.warning_count\n      }));\n    }\n\n    // === SYNC STATUS ===\n    async getSyncStatus() {\n      const lastSyncTime = (await AsyncStorage.default.getItem('last_sync_time')) || 'Never';\n      const downloadedRegions = await this.getDownloadedRegions();\n      const unsyncedData = await this.getUnsyncedSensorData();\n      const networkState = await Network.getNetworkStateAsync();\n      return {\n        lastSyncTime,\n        pendingSensorData: unsyncedData.length,\n        downloadedRegions: downloadedRegions.map(r => r.name),\n        isOnline: networkState.isConnected || false\n      };\n    }\n\n    // === DATA CLEANUP ===\n    async cleanupOldData(daysOld = 30) {\n      if (!this.db) return;\n      const cutoffDate = new Date();\n      cutoffDate.setDate(cutoffDate.getDate() - daysOld);\n      const cutoffISO = cutoffDate.toISOString();\n\n      // Удаляем старые синхронизированные данные датчиков\n      const sensorResult = await this.db.runAsync(`\n      DELETE FROM sensor_data \n      WHERE is_synced = 1 AND created_at < ?\n    `, [cutoffISO]);\n\n      // Удаляем старые неверифицированные предупреждения\n      const warningResult = await this.db.runAsync(`\n      DELETE FROM warnings \n      WHERE is_verified = 0 AND last_updated < ?\n    `, [cutoffISO]);\n      console.log(`🧹 Cleanup: removed ${sensorResult.changes} old sensor records, ${warningResult.changes} old warnings`);\n    }\n    async getDatabaseStats() {\n      if (!this.db || !SQLite) {\n        console.warn('Database not available - returning null stats');\n        return null;\n      }\n      const sensorCount = await this.db.getFirstAsync(`SELECT COUNT(*) as count FROM sensor_data`);\n      const warningCount = await this.db.getFirstAsync(`SELECT COUNT(*) as count FROM warnings`);\n      const unsyncedCount = await this.db.getFirstAsync(`SELECT COUNT(*) as count FROM sensor_data WHERE is_synced = 0`);\n      return {\n        totalSensorData: sensorCount.count,\n        totalWarnings: warningCount.count,\n        unsyncedData: unsyncedCount.count\n      };\n    }\n  }\n  const localDB = new LocalDatabaseManager();\n});","lineCount":325,"map":[[27,2,393,0,"Object"],[27,8,393,0],[27,9,393,0,"defineProperty"],[27,23,393,0],[27,24,393,0,"exports"],[27,31,393,0],[28,4,393,0,"enumerable"],[28,14,393,0],[29,4,393,0,"get"],[29,7,393,0],[29,18,393,0,"get"],[29,19,393,0],[30,6,393,0],[30,13,393,0,"localDB"],[30,20,393,0],[31,4,393,0],[32,2,393,0],[33,2,1,0],[33,6,1,0,"_expoNetwork"],[33,18,1,0],[33,21,1,0,"require"],[33,28,1,0],[33,29,1,0,"_dependencyMap"],[33,43,1,0],[34,2,1,0],[34,6,1,0,"Network"],[34,13,1,0],[34,16,1,0,"_interopNamespace"],[34,33,1,0],[34,34,1,0,"_expoNetwork"],[34,46,1,0],[35,2,2,0],[35,6,2,0,"_reactNativeAsyncStorageAsyncStorage"],[35,42,2,0],[35,45,2,0,"require"],[35,52,2,0],[35,53,2,0,"_dependencyMap"],[35,67,2,0],[36,2,2,0],[36,6,2,0,"AsyncStorage"],[36,18,2,0],[36,21,2,0,"_interopDefault"],[36,36,2,0],[36,37,2,0,"_reactNativeAsyncStorageAsyncStorage"],[36,73,2,0],[37,2,2,69],[37,6,2,69,"_reactNativeWebDistExportsPlatform"],[37,40,2,69],[37,43,2,69,"require"],[37,50,2,69],[37,51,2,69,"_dependencyMap"],[37,65,2,69],[38,2,2,69],[38,6,2,69,"Platform"],[38,14,2,69],[38,17,2,69,"_interopDefault"],[38,32,2,69],[38,33,2,69,"_reactNativeWebDistExportsPlatform"],[38,67,2,69],[39,2,5,0],[40,2,6,0],[40,6,6,4,"SQLite"],[40,12,6,15],[40,15,6,18],[40,19,6,22],[41,2,7,0],[41,6,7,4,"Platform"],[41,14,7,12],[41,15,7,12,"default"],[41,22,7,12],[41,23,7,13,"OS"],[41,25,7,15],[41,30,7,20],[41,35,7,25],[41,37,7,27],[42,4,8,2],[42,8,8,6],[43,6,9,4,"SQLite"],[43,12,9,10],[43,15,9,13,"require"],[43,22,9,20],[43,23,9,20,"_dependencyMap"],[43,37,9,20],[43,55,9,34],[43,56,9,35],[44,4,10,2],[44,5,10,3],[44,6,10,4],[44,13,10,11,"error"],[44,18,10,16],[44,20,10,18],[45,6,11,4,"console"],[45,13,11,11],[45,14,11,12,"warn"],[45,18,11,16],[45,19,11,17],[45,58,11,56],[45,59,11,57],[46,4,12,2],[47,2,13,0],[49,2,15,0],[51,2,56,0],[51,8,56,6,"LocalDatabaseManager"],[51,28,56,26],[51,29,56,27],[52,4,57,10,"db"],[52,6,57,12],[52,9,57,45],[52,13,57,49],[53,4,58,10,"syncInProgress"],[53,18,58,24],[53,21,58,27],[53,26,58,32],[54,4,60,2],[54,10,60,8,"initialize"],[54,20,60,18,"initialize"],[54,21,60,18],[54,23,60,21],[55,6,61,4],[55,10,61,8],[55,11,61,9,"SQLite"],[55,17,61,15],[55,19,61,17],[56,8,62,6,"console"],[56,15,62,13],[56,16,62,14,"warn"],[56,20,62,18],[56,21,62,19],[56,92,62,90],[56,93,62,91],[57,8,63,6],[58,6,64,4],[59,6,66,4],[59,10,66,8],[60,8,67,6],[60,12,67,10],[60,13,67,11,"db"],[60,15,67,13],[60,18,67,16],[60,24,67,22,"SQLite"],[60,30,67,28],[60,31,67,29,"openDatabaseAsync"],[60,48,67,46],[60,49,67,47],[60,63,67,61],[60,64,67,62],[61,8,68,6],[61,14,68,12],[61,18,68,16],[61,19,68,17,"createTables"],[61,31,68,29],[61,32,68,30],[61,33,68,31],[62,8,69,6,"console"],[62,15,69,13],[62,16,69,14,"log"],[62,19,69,17],[62,20,69,18],[62,50,69,48],[62,51,69,49],[63,6,70,4],[63,7,70,5],[63,8,70,6],[63,15,70,13,"error"],[63,20,70,18],[63,22,70,20],[64,8,71,6,"console"],[64,15,71,13],[64,16,71,14,"error"],[64,21,71,19],[64,22,71,20],[64,56,71,54],[64,58,71,56,"error"],[64,63,71,61],[64,64,71,62],[65,8,72,6],[65,14,72,12,"error"],[65,19,72,17],[66,6,73,4],[67,4,74,2],[68,4,76,2],[68,10,76,16,"createTables"],[68,22,76,28,"createTables"],[68,23,76,28],[68,25,76,31],[69,6,77,4],[69,10,77,8],[69,11,77,9],[69,15,77,13],[69,16,77,14,"db"],[69,18,77,16],[69,20,77,18],[69,26,77,24],[69,30,77,28,"Error"],[69,35,77,33],[69,36,77,34],[69,62,77,60],[69,63,77,61],[71,6,79,4],[72,6,80,4],[72,12,80,10],[72,16,80,14],[72,17,80,15,"db"],[72,19,80,17],[72,20,80,18,"execAsync"],[72,29,80,27],[72,30,80,28],[73,0,81,0],[74,0,82,0],[75,0,83,0],[76,0,84,0],[77,0,85,0],[78,0,86,0],[79,0,87,0],[80,0,88,0],[81,0,89,0],[82,0,90,0],[83,0,91,0],[84,0,92,0],[85,0,93,0],[86,0,94,0],[87,0,95,0],[88,0,96,0],[88,5,96,5],[88,6,96,6],[90,6,98,4],[91,6,99,4],[91,12,99,10],[91,16,99,14],[91,17,99,15,"db"],[91,19,99,17],[91,20,99,18,"execAsync"],[91,29,99,27],[91,30,99,28],[92,0,100,0],[93,0,101,0],[94,0,102,0],[95,0,103,0],[96,0,104,0],[97,0,105,0],[98,0,106,0],[99,0,107,0],[100,0,108,0],[101,0,109,0],[102,0,110,0],[103,0,111,0],[104,0,112,0],[105,0,113,0],[106,0,114,0],[106,5,114,5],[106,6,114,6],[108,6,116,4],[109,6,117,4],[109,12,117,10],[109,16,117,14],[109,17,117,15,"db"],[109,19,117,17],[109,20,117,18,"execAsync"],[109,29,117,27],[109,30,117,28],[110,0,118,0],[111,0,119,0],[112,0,120,0],[113,0,121,0],[114,0,122,0],[115,0,123,0],[116,0,124,0],[117,0,125,0],[117,5,125,5],[117,6,125,6],[119,6,127,4],[120,6,128,4],[120,12,128,10],[120,16,128,14],[120,17,128,15,"db"],[120,19,128,17],[120,20,128,18,"execAsync"],[120,29,128,27],[120,30,128,28],[121,0,129,0],[122,0,130,0],[123,0,131,0],[123,5,131,5],[123,6,131,6],[124,6,133,4],[124,12,133,10],[124,16,133,14],[124,17,133,15,"db"],[124,19,133,17],[124,20,133,18,"execAsync"],[124,29,133,27],[124,30,133,28],[125,0,134,0],[126,0,135,0],[127,0,136,0],[127,5,136,5],[127,6,136,6],[128,6,138,4,"console"],[128,13,138,11],[128,14,138,12,"log"],[128,17,138,15],[128,18,138,16],[128,45,138,43],[128,46,138,44],[129,4,139,2],[131,4,141,2],[132,4,142,2],[132,10,142,8,"saveSensorData"],[132,24,142,22,"saveSensorData"],[132,25,142,23,"data"],[132,29,142,70],[132,31,142,89],[133,6,143,4],[133,10,143,8],[133,11,143,9],[133,15,143,13],[133,16,143,14,"db"],[133,18,143,16],[133,22,143,20],[133,23,143,21,"SQLite"],[133,29,143,27],[133,31,143,29],[134,8,144,6,"console"],[134,15,144,13],[134,16,144,14,"warn"],[134,20,144,18],[134,21,144,19],[134,78,144,76],[134,79,144,77],[135,8,145,6],[135,15,145,13],[135,16,145,14],[135,17,145,15],[136,6,146,4],[137,6,148,4],[137,12,148,10,"result"],[137,18,148,16],[137,21,148,19],[137,27,148,25],[137,31,148,29],[137,32,148,30,"db"],[137,34,148,32],[137,35,148,33,"runAsync"],[137,43,148,41],[137,44,148,42],[138,0,149,0],[139,0,150,0],[140,0,151,0],[141,0,152,0],[142,0,153,0],[143,0,154,0],[143,5,154,5],[143,7,154,7],[143,8,155,6,"data"],[143,12,155,10],[143,13,155,11,"serverId"],[143,21,155,19],[143,25,155,23],[143,29,155,27],[143,31,156,6,"data"],[143,35,156,10],[143,36,156,11,"latitude"],[143,44,156,19],[143,46,157,6,"data"],[143,50,157,10],[143,51,157,11,"longitude"],[143,60,157,20],[143,62,158,6,"data"],[143,66,158,10],[143,67,158,11,"timestamp"],[143,76,158,20],[143,78,159,6,"data"],[143,82,159,10],[143,83,159,11,"speed"],[143,88,159,16],[143,90,160,6,"data"],[143,94,160,10],[143,95,160,11,"accuracy"],[143,103,160,19],[143,105,161,6,"data"],[143,109,161,10],[143,110,161,11,"accelerometer"],[143,123,161,24],[143,124,161,25,"x"],[143,125,161,26],[143,127,162,6,"data"],[143,131,162,10],[143,132,162,11,"accelerometer"],[143,145,162,24],[143,146,162,25,"y"],[143,147,162,26],[143,149,163,6,"data"],[143,153,163,10],[143,154,163,11,"accelerometer"],[143,167,163,24],[143,168,163,25,"z"],[143,169,163,26],[143,171,164,6,"data"],[143,175,164,10],[143,176,164,11,"roadQuality"],[143,187,164,22],[143,189,165,6,"data"],[143,193,165,10],[143,194,165,11,"isSynced"],[143,202,165,19],[143,205,165,22],[143,206,165,23],[143,209,165,26],[143,210,165,27],[143,212,166,6],[143,216,166,10,"Date"],[143,220,166,14],[143,221,166,15],[143,222,166,16],[143,223,166,17,"toISOString"],[143,234,166,28],[143,235,166,29],[143,236,166,30],[143,237,167,5],[143,238,167,6],[144,6,169,4,"console"],[144,13,169,11],[144,14,169,12,"log"],[144,17,169,15],[144,18,169,16],[144,55,169,53,"result"],[144,61,169,59],[144,62,169,60,"lastInsertRowId"],[144,77,169,75],[144,80,169,78],[144,81,169,79],[145,6,170,4],[145,13,170,11,"result"],[145,19,170,17],[145,20,170,18,"lastInsertRowId"],[145,35,170,33],[146,4,171,2],[147,4,173,2],[147,10,173,8,"getUnsyncedSensorData"],[147,31,173,29,"getUnsyncedSensorData"],[147,32,173,29],[147,34,173,60],[148,6,174,4],[148,10,174,8],[148,11,174,9],[148,15,174,13],[148,16,174,14,"db"],[148,18,174,16],[148,22,174,20],[148,23,174,21,"SQLite"],[148,29,174,27],[148,31,174,29],[149,8,175,6,"console"],[149,15,175,13],[149,16,175,14,"warn"],[149,20,175,18],[149,21,175,19],[149,77,175,75],[149,78,175,76],[150,8,176,6],[150,15,176,13],[150,17,176,15],[151,6,177,4],[152,6,179,4],[152,12,179,10,"result"],[152,18,179,16],[152,21,179,19],[152,27,179,25],[152,31,179,29],[152,32,179,30,"db"],[152,34,179,32],[152,35,179,33,"getAllAsync"],[152,46,179,44],[152,47,179,45],[153,0,180,0],[154,0,181,0],[154,5,181,5],[154,6,181,15],[155,6,183,4],[155,13,183,11,"result"],[155,19,183,17],[155,20,183,18,"map"],[155,23,183,21],[155,24,183,22,"row"],[155,27,183,25],[155,32,183,30],[156,8,184,6,"id"],[156,10,184,8],[156,12,184,10,"row"],[156,15,184,13],[156,16,184,14,"id"],[156,18,184,16],[157,8,185,6,"serverId"],[157,16,185,14],[157,18,185,16,"row"],[157,21,185,19],[157,22,185,20,"server_id"],[157,31,185,29],[158,8,186,6,"latitude"],[158,16,186,14],[158,18,186,16,"row"],[158,21,186,19],[158,22,186,20,"latitude"],[158,30,186,28],[159,8,187,6,"longitude"],[159,17,187,15],[159,19,187,17,"row"],[159,22,187,20],[159,23,187,21,"longitude"],[159,32,187,30],[160,8,188,6,"timestamp"],[160,17,188,15],[160,19,188,17,"row"],[160,22,188,20],[160,23,188,21,"timestamp"],[160,32,188,30],[161,8,189,6,"speed"],[161,13,189,11],[161,15,189,13,"row"],[161,18,189,16],[161,19,189,17,"speed"],[161,24,189,22],[162,8,190,6,"accuracy"],[162,16,190,14],[162,18,190,16,"row"],[162,21,190,19],[162,22,190,20,"accuracy"],[162,30,190,28],[163,8,191,6,"accelerometer"],[163,21,191,19],[163,23,191,21],[164,10,192,8,"x"],[164,11,192,9],[164,13,192,11,"row"],[164,16,192,14],[164,17,192,15,"accelerometer_x"],[164,32,192,30],[165,10,193,8,"y"],[165,11,193,9],[165,13,193,11,"row"],[165,16,193,14],[165,17,193,15,"accelerometer_y"],[165,32,193,30],[166,10,194,8,"z"],[166,11,194,9],[166,13,194,11,"row"],[166,16,194,14],[166,17,194,15,"accelerometer_z"],[167,8,195,6],[167,9,195,7],[168,8,196,6,"roadQuality"],[168,19,196,17],[168,21,196,19,"row"],[168,24,196,22],[168,25,196,23,"road_quality"],[168,37,196,35],[169,8,197,6,"isSynced"],[169,16,197,14],[169,18,197,16,"row"],[169,21,197,19],[169,22,197,20,"is_synced"],[169,31,197,29],[169,36,197,34],[169,37,197,35],[170,8,198,6,"createdAt"],[170,17,198,15],[170,19,198,17,"row"],[170,22,198,20],[170,23,198,21,"created_at"],[171,6,199,4],[171,7,199,5],[171,8,199,6],[171,9,199,7],[172,4,200,2],[173,4,202,2],[173,10,202,8,"markSensorDataSynced"],[173,30,202,28,"markSensorDataSynced"],[173,31,202,29,"localIds"],[173,39,202,47],[173,41,202,49,"serverIds"],[173,50,202,69],[173,52,202,71],[174,6,203,4],[174,10,203,8],[174,11,203,9],[174,15,203,13],[174,16,203,14,"db"],[174,18,203,16],[174,22,203,20],[174,23,203,21,"SQLite"],[174,29,203,27],[174,33,203,31,"localIds"],[174,41,203,39],[174,42,203,40,"length"],[174,48,203,46],[174,53,203,51],[174,54,203,52],[174,56,203,54],[175,8,204,6],[175,12,204,10],[175,13,204,11],[175,17,204,15],[175,18,204,16,"db"],[175,20,204,18],[175,24,204,22],[175,25,204,23,"SQLite"],[175,31,204,29],[175,33,204,31],[176,10,205,8,"console"],[176,17,205,15],[176,18,205,16,"warn"],[176,22,205,20],[176,23,205,21],[176,85,205,83],[176,86,205,84],[177,8,206,6],[178,8,207,6],[179,6,208,4],[180,6,210,4],[180,12,210,10,"placeholders"],[180,24,210,22],[180,27,210,25,"localIds"],[180,35,210,33],[180,36,210,34,"map"],[180,39,210,37],[180,40,210,38],[180,46,210,44],[180,49,210,47],[180,50,210,48],[180,51,210,49,"join"],[180,55,210,53],[180,56,210,54],[180,59,210,57],[180,60,210,58],[181,6,212,4],[181,12,212,10],[181,16,212,14],[181,17,212,15,"db"],[181,19,212,17],[181,20,212,18,"runAsync"],[181,28,212,26],[181,29,212,27],[182,0,213,0],[183,0,214,0],[183,26,214,26,"serverIds"],[183,35,214,35],[183,38,214,38],[183,55,214,55],[183,58,214,58],[183,60,214,60],[184,0,215,0],[184,21,215,21,"placeholders"],[184,33,215,33],[185,0,216,0],[185,5,216,5],[185,7,216,7,"serverIds"],[185,16,216,16],[185,19,216,19],[185,20,216,20],[185,23,216,23,"localIds"],[185,31,216,31],[185,33,216,33],[185,36,216,36,"serverIds"],[185,45,216,45],[185,46,216,46],[185,49,216,49,"localIds"],[185,57,216,57],[185,58,216,58],[186,6,218,4,"console"],[186,13,218,11],[186,14,218,12,"log"],[186,17,218,15],[186,18,218,16],[186,30,218,28,"localIds"],[186,38,218,36],[186,39,218,37,"length"],[186,45,218,43],[186,77,218,75],[186,78,218,76],[187,4,219,2],[189,4,221,2],[190,4,222,2],[190,10,222,8,"saveWarnings"],[190,22,222,20,"saveWarnings"],[190,23,222,21,"warnings"],[190,31,222,45],[190,33,222,47],[191,6,223,4],[191,10,223,8],[191,11,223,9],[191,15,223,13],[191,16,223,14,"db"],[191,18,223,16],[191,22,223,20],[191,23,223,21,"SQLite"],[191,29,223,27],[191,33,223,31,"warnings"],[191,41,223,39],[191,42,223,40,"length"],[191,48,223,46],[191,53,223,51],[191,54,223,52],[191,56,223,54],[192,8,224,6],[192,12,224,10],[192,13,224,11],[192,17,224,15],[192,18,224,16,"db"],[192,20,224,18],[192,24,224,22],[192,25,224,23,"SQLite"],[192,31,224,29],[192,33,224,31],[193,10,225,8,"console"],[193,17,225,15],[193,18,225,16,"warn"],[193,22,225,20],[193,23,225,21],[193,76,225,74],[193,77,225,75],[194,8,226,6],[195,8,227,6],[196,6,228,4],[197,6,230,4],[197,12,230,10,"statement"],[197,21,230,19],[197,24,230,22],[197,30,230,28],[197,34,230,32],[197,35,230,33,"db"],[197,37,230,35],[197,38,230,36,"prepareAsync"],[197,50,230,48],[197,51,230,49],[198,0,231,0],[199,0,232,0],[200,0,233,0],[201,0,234,0],[202,0,235,0],[202,5,235,5],[202,6,235,6],[203,6,237,4],[203,10,237,8],[204,8,238,6],[204,13,238,11],[204,19,238,17,"warning"],[204,26,238,24],[204,30,238,28,"warnings"],[204,38,238,36],[204,40,238,38],[205,10,239,8],[205,16,239,14,"statement"],[205,25,239,23],[205,26,239,24,"executeAsync"],[205,38,239,36],[205,39,239,37],[205,40,240,10,"warning"],[205,47,240,17],[205,48,240,18,"serverId"],[205,56,240,26],[205,60,240,30],[205,69,240,39,"Date"],[205,73,240,43],[205,74,240,44,"now"],[205,77,240,47],[205,78,240,48],[205,79,240,49],[205,83,240,53,"Math"],[205,87,240,57],[205,88,240,58,"random"],[205,94,240,64],[205,95,240,65],[205,96,240,66],[205,98,240,68],[205,100,241,10,"warning"],[205,107,241,17],[205,108,241,18,"latitude"],[205,116,241,26],[205,118,242,10,"warning"],[205,125,242,17],[205,126,242,18,"longitude"],[205,135,242,27],[205,137,243,10,"warning"],[205,144,243,17],[205,145,243,18,"hazardType"],[205,155,243,28],[205,157,244,10,"warning"],[205,164,244,17],[205,165,244,18,"severity"],[205,173,244,26],[205,175,245,10,"warning"],[205,182,245,17],[205,183,245,18,"description"],[205,194,245,29],[205,198,245,33],[205,200,245,35],[205,202,246,10,"warning"],[205,209,246,17],[205,210,246,18,"isVerified"],[205,220,246,28],[205,223,246,31],[205,224,246,32],[205,227,246,35],[205,228,246,36],[205,230,247,10,"warning"],[205,237,247,17],[205,238,247,18,"region"],[205,244,247,24],[205,248,247,28],[205,250,247,30],[205,252,248,10,"warning"],[205,259,248,17],[205,260,248,18,"city"],[205,264,248,22],[205,268,248,26],[205,270,248,28],[205,272,249,10,"warning"],[205,279,249,17],[205,280,249,18,"country"],[205,287,249,25],[205,291,249,29],[205,293,249,31],[205,295,250,10,"warning"],[205,302,250,17],[205,303,250,18,"lastUpdated"],[205,314,250,29],[205,315,251,9],[205,316,251,10],[206,8,252,6],[207,8,254,6,"console"],[207,15,254,13],[207,16,254,14,"log"],[207,19,254,17],[207,20,254,18],[207,32,254,30,"warnings"],[207,40,254,38],[207,41,254,39,"length"],[207,47,254,45],[207,66,254,64],[207,67,254,65],[208,6,255,4],[208,7,255,5],[208,16,255,14],[209,8,256,6],[209,14,256,12,"statement"],[209,23,256,21],[209,24,256,22,"finalizeAsync"],[209,37,256,35],[209,38,256,36],[209,39,256,37],[210,6,257,4],[211,4,258,2],[212,4,260,2],[212,10,260,8,"getNearbyWarnings"],[212,27,260,25,"getNearbyWarnings"],[212,28,260,26,"latitude"],[212,36,260,42],[212,38,260,44,"longitude"],[212,47,260,61],[212,49,260,63,"radiusKm"],[212,57,260,79],[212,60,260,82],[212,61,260,83],[212,63,260,110],[213,6,261,4],[213,10,261,8],[213,11,261,9],[213,15,261,13],[213,16,261,14,"db"],[213,18,261,16],[213,22,261,20],[213,23,261,21,"SQLite"],[213,29,261,27],[213,31,261,29],[214,8,262,6,"console"],[214,15,262,13],[214,16,262,14,"warn"],[214,20,262,18],[214,21,262,19],[214,72,262,70],[214,73,262,71],[215,8,263,6],[215,15,263,13],[215,17,263,15],[216,6,264,4],[218,6,266,4],[219,6,267,4],[219,12,267,10,"latRange"],[219,20,267,18],[219,23,267,21,"radiusKm"],[219,31,267,29],[219,34,267,32],[219,37,267,35],[219,38,267,36],[219,39,267,37],[220,6,268,4],[220,12,268,10,"lonRange"],[220,20,268,18],[220,23,268,21,"radiusKm"],[220,31,268,29],[220,35,268,33],[220,38,268,36],[220,41,268,39,"Math"],[220,45,268,43],[220,46,268,44,"cos"],[220,49,268,47],[220,50,268,48,"latitude"],[220,58,268,56],[220,61,268,59,"Math"],[220,65,268,63],[220,66,268,64,"PI"],[220,68,268,66],[220,71,268,69],[220,74,268,72],[220,75,268,73],[220,76,268,74],[221,6,270,4],[221,12,270,10,"result"],[221,18,270,16],[221,21,270,19],[221,27,270,25],[221,31,270,29],[221,32,270,30,"db"],[221,34,270,32],[221,35,270,33,"getAllAsync"],[221,46,270,44],[221,47,270,45],[222,0,271,0],[223,0,272,0],[224,0,273,0],[225,0,274,0],[226,0,275,0],[227,0,276,0],[228,0,277,0],[229,0,278,0],[230,0,279,0],[230,5,279,5],[230,7,279,7],[230,8,280,6,"latitude"],[230,16,280,14],[230,19,280,17,"latRange"],[230,27,280,25],[230,29,281,6,"latitude"],[230,37,281,14],[230,40,281,17,"latRange"],[230,48,281,25],[230,50,282,6,"longitude"],[230,59,282,15],[230,62,282,18,"lonRange"],[230,70,282,26],[230,72,283,6,"longitude"],[230,81,283,15],[230,84,283,18,"lonRange"],[230,92,283,26],[230,94,284,6,"latitude"],[230,102,284,14],[230,104,284,16,"latitude"],[230,112,284,24],[230,114,285,6,"longitude"],[230,123,285,15],[230,125,285,17,"longitude"],[230,134,285,26],[230,135,286,5],[230,136,286,15],[231,6,288,4],[231,13,288,11,"result"],[231,19,288,17],[231,20,288,18,"map"],[231,23,288,21],[231,24,288,22,"row"],[231,27,288,25],[231,32,288,30],[232,8,289,6,"id"],[232,10,289,8],[232,12,289,10,"row"],[232,15,289,13],[232,16,289,14,"id"],[232,18,289,16],[233,8,290,6,"serverId"],[233,16,290,14],[233,18,290,16,"row"],[233,21,290,19],[233,22,290,20,"server_id"],[233,31,290,29],[234,8,291,6,"latitude"],[234,16,291,14],[234,18,291,16,"row"],[234,21,291,19],[234,22,291,20,"latitude"],[234,30,291,28],[235,8,292,6,"longitude"],[235,17,292,15],[235,19,292,17,"row"],[235,22,292,20],[235,23,292,21,"longitude"],[235,32,292,30],[236,8,293,6,"hazardType"],[236,18,293,16],[236,20,293,18,"row"],[236,23,293,21],[236,24,293,22,"hazard_type"],[236,35,293,33],[237,8,294,6,"severity"],[237,16,294,14],[237,18,294,16,"row"],[237,21,294,19],[237,22,294,20,"severity"],[237,30,294,70],[238,8,295,6,"description"],[238,19,295,17],[238,21,295,19,"row"],[238,24,295,22],[238,25,295,23,"description"],[238,36,295,34],[239,8,296,6,"isVerified"],[239,18,296,16],[239,20,296,18,"row"],[239,23,296,21],[239,24,296,22,"is_verified"],[239,35,296,33],[239,40,296,38],[239,41,296,39],[240,8,297,6,"region"],[240,14,297,12],[240,16,297,14,"row"],[240,19,297,17],[240,20,297,18,"region"],[240,26,297,24],[241,8,298,6,"city"],[241,12,298,10],[241,14,298,12,"row"],[241,17,298,15],[241,18,298,16,"city"],[241,22,298,20],[242,8,299,6,"country"],[242,15,299,13],[242,17,299,15,"row"],[242,20,299,18],[242,21,299,19,"country"],[242,28,299,26],[243,8,300,6,"lastUpdated"],[243,19,300,17],[243,21,300,19,"row"],[243,24,300,22],[243,25,300,23,"last_updated"],[244,6,301,4],[244,7,301,5],[244,8,301,6],[244,9,301,7],[245,4,302,2],[247,4,304,2],[248,4,305,2],[248,10,305,8,"updateRegionSyncStatus"],[248,32,305,30,"updateRegionSyncStatus"],[248,33,305,31,"regionCode"],[248,43,305,49],[248,45,305,51,"regionName"],[248,55,305,69],[248,57,305,71,"warningCount"],[248,69,305,91],[248,71,305,93],[249,6,306,4],[249,10,306,8],[249,11,306,9],[249,15,306,13],[249,16,306,14,"db"],[249,18,306,16],[249,22,306,20],[249,23,306,21,"SQLite"],[249,29,306,27],[249,31,306,29],[250,8,307,6,"console"],[250,15,307,13],[250,16,307,14,"warn"],[250,20,307,18],[250,21,307,19],[250,78,307,76],[250,79,307,77],[251,8,308,6],[252,6,309,4],[253,6,311,4],[253,12,311,10],[253,16,311,14],[253,17,311,15,"db"],[253,19,311,17],[253,20,311,18,"runAsync"],[253,28,311,26],[253,29,311,27],[254,0,312,0],[255,0,313,0],[256,0,314,0],[256,5,314,5],[256,7,314,7],[256,8,314,8,"regionCode"],[256,18,314,18],[256,20,314,20,"regionName"],[256,30,314,30],[256,32,314,32],[256,36,314,36,"Date"],[256,40,314,40],[256,41,314,41],[256,42,314,42],[256,43,314,43,"toISOString"],[256,54,314,54],[256,55,314,55],[256,56,314,56],[256,58,314,58,"warningCount"],[256,70,314,70],[256,71,314,71],[256,72,314,72],[257,6,316,4,"console"],[257,13,316,11],[257,14,316,12,"log"],[257,17,316,15],[257,18,316,16],[257,56,316,54,"regionName"],[257,66,316,64],[257,71,316,69,"warningCount"],[257,83,316,81],[257,95,316,93],[257,96,316,94],[258,4,317,2],[259,4,319,2],[259,10,319,8,"getDownloadedRegions"],[259,30,319,28,"getDownloadedRegions"],[259,31,319,28],[259,33,319,117],[260,6,320,4],[260,10,320,8],[260,11,320,9],[260,15,320,13],[260,16,320,14,"db"],[260,18,320,16],[260,22,320,20],[260,23,320,21,"SQLite"],[260,29,320,27],[260,31,320,29],[261,8,321,6,"console"],[261,15,321,13],[261,16,321,14,"warn"],[261,20,321,18],[261,21,321,19],[261,71,321,69],[261,72,321,70],[262,8,322,6],[262,15,322,13],[262,17,322,15],[263,6,323,4],[264,6,325,4],[264,12,325,10,"result"],[264,18,325,16],[264,21,325,19],[264,27,325,25],[264,31,325,29],[264,32,325,30,"db"],[264,34,325,32],[264,35,325,33,"getAllAsync"],[264,46,325,44],[264,47,325,45],[265,0,326,0],[266,0,327,0],[266,5,327,5],[266,6,327,15],[267,6,329,4],[267,13,329,11,"result"],[267,19,329,17],[267,20,329,18,"map"],[267,23,329,21],[267,24,329,22,"row"],[267,27,329,25],[267,32,329,30],[268,8,330,6,"code"],[268,12,330,10],[268,14,330,12,"row"],[268,17,330,15],[268,18,330,16,"region_code"],[268,29,330,27],[269,8,331,6,"name"],[269,12,331,10],[269,14,331,12,"row"],[269,17,331,15],[269,18,331,16,"region_name"],[269,29,331,27],[270,8,332,6,"lastSync"],[270,16,332,14],[270,18,332,16,"row"],[270,21,332,19],[270,22,332,20,"last_sync"],[270,31,332,29],[271,8,333,6,"warningCount"],[271,20,333,18],[271,22,333,20,"row"],[271,25,333,23],[271,26,333,24,"warning_count"],[272,6,334,4],[272,7,334,5],[272,8,334,6],[272,9,334,7],[273,4,335,2],[275,4,337,2],[276,4,338,2],[276,10,338,8,"getSyncStatus"],[276,23,338,21,"getSyncStatus"],[276,24,338,21],[276,26,338,45],[277,6,339,4],[277,12,339,10,"lastSyncTime"],[277,24,339,22],[277,27,339,25],[277,34,339,31,"AsyncStorage"],[277,46,339,43],[277,47,339,43,"default"],[277,54,339,43],[277,55,339,44,"getItem"],[277,62,339,51],[277,63,339,52],[277,79,339,68],[277,80,339,69],[277,85,339,73],[277,92,339,80],[278,6,340,4],[278,12,340,10,"downloadedRegions"],[278,29,340,27],[278,32,340,30],[278,38,340,36],[278,42,340,40],[278,43,340,41,"getDownloadedRegions"],[278,63,340,61],[278,64,340,62],[278,65,340,63],[279,6,341,4],[279,12,341,10,"unsyncedData"],[279,24,341,22],[279,27,341,25],[279,33,341,31],[279,37,341,35],[279,38,341,36,"getUnsyncedSensorData"],[279,59,341,57],[279,60,341,58],[279,61,341,59],[280,6,342,4],[280,12,342,10,"networkState"],[280,24,342,22],[280,27,342,25],[280,33,342,31,"Network"],[280,40,342,38],[280,41,342,39,"getNetworkStateAsync"],[280,61,342,59],[280,62,342,60],[280,63,342,61],[281,6,344,4],[281,13,344,11],[282,8,345,6,"lastSyncTime"],[282,20,345,18],[283,8,346,6,"pendingSensorData"],[283,25,346,23],[283,27,346,25,"unsyncedData"],[283,39,346,37],[283,40,346,38,"length"],[283,46,346,44],[284,8,347,6,"downloadedRegions"],[284,25,347,23],[284,27,347,25,"downloadedRegions"],[284,44,347,42],[284,45,347,43,"map"],[284,48,347,46],[284,49,347,47,"r"],[284,50,347,48],[284,54,347,52,"r"],[284,55,347,53],[284,56,347,54,"name"],[284,60,347,58],[284,61,347,59],[285,8,348,6,"isOnline"],[285,16,348,14],[285,18,348,16,"networkState"],[285,30,348,28],[285,31,348,29,"isConnected"],[285,42,348,40],[285,46,348,44],[286,6,349,4],[286,7,349,5],[287,4,350,2],[289,4,352,2],[290,4,353,2],[290,10,353,8,"cleanupOldData"],[290,24,353,22,"cleanupOldData"],[290,25,353,23,"daysOld"],[290,32,353,38],[290,35,353,41],[290,37,353,43],[290,39,353,45],[291,6,354,4],[291,10,354,8],[291,11,354,9],[291,15,354,13],[291,16,354,14,"db"],[291,18,354,16],[291,20,354,18],[292,6,356,4],[292,12,356,10,"cutoffDate"],[292,22,356,20],[292,25,356,23],[292,29,356,27,"Date"],[292,33,356,31],[292,34,356,32],[292,35,356,33],[293,6,357,4,"cutoffDate"],[293,16,357,14],[293,17,357,15,"setDate"],[293,24,357,22],[293,25,357,23,"cutoffDate"],[293,35,357,33],[293,36,357,34,"getDate"],[293,43,357,41],[293,44,357,42],[293,45,357,43],[293,48,357,46,"daysOld"],[293,55,357,53],[293,56,357,54],[294,6,358,4],[294,12,358,10,"cutoffISO"],[294,21,358,19],[294,24,358,22,"cutoffDate"],[294,34,358,32],[294,35,358,33,"toISOString"],[294,46,358,44],[294,47,358,45],[294,48,358,46],[296,6,360,4],[297,6,361,4],[297,12,361,10,"sensorResult"],[297,24,361,22],[297,27,361,25],[297,33,361,31],[297,37,361,35],[297,38,361,36,"db"],[297,40,361,38],[297,41,361,39,"runAsync"],[297,49,361,47],[297,50,361,48],[298,0,362,0],[299,0,363,0],[300,0,364,0],[300,5,364,5],[300,7,364,7],[300,8,364,8,"cutoffISO"],[300,17,364,17],[300,18,364,18],[300,19,364,19],[302,6,366,4],[303,6,367,4],[303,12,367,10,"warningResult"],[303,25,367,23],[303,28,367,26],[303,34,367,32],[303,38,367,36],[303,39,367,37,"db"],[303,41,367,39],[303,42,367,40,"runAsync"],[303,50,367,48],[303,51,367,49],[304,0,368,0],[305,0,369,0],[306,0,370,0],[306,5,370,5],[306,7,370,7],[306,8,370,8,"cutoffISO"],[306,17,370,17],[306,18,370,18],[306,19,370,19],[307,6,372,4,"console"],[307,13,372,11],[307,14,372,12,"log"],[307,17,372,15],[307,18,372,16],[307,41,372,39,"sensorResult"],[307,53,372,51],[307,54,372,52,"changes"],[307,61,372,59],[307,85,372,83,"warningResult"],[307,98,372,96],[307,99,372,97,"changes"],[307,106,372,104],[307,121,372,119],[307,122,372,120],[308,4,373,2],[309,4,375,2],[309,10,375,8,"getDatabaseStats"],[309,26,375,24,"getDatabaseStats"],[309,27,375,24],[309,29,375,27],[310,6,376,4],[310,10,376,8],[310,11,376,9],[310,15,376,13],[310,16,376,14,"db"],[310,18,376,16],[310,22,376,20],[310,23,376,21,"SQLite"],[310,29,376,27],[310,31,376,29],[311,8,377,6,"console"],[311,15,377,13],[311,16,377,14,"warn"],[311,20,377,18],[311,21,377,19],[311,68,377,66],[311,69,377,67],[312,8,378,6],[312,15,378,13],[312,19,378,17],[313,6,379,4],[314,6,381,4],[314,12,381,10,"sensorCount"],[314,23,381,21],[314,26,381,24],[314,32,381,30],[314,36,381,34],[314,37,381,35,"db"],[314,39,381,37],[314,40,381,38,"getFirstAsync"],[314,53,381,51],[314,54,381,52],[314,97,381,95],[314,98,381,115],[315,6,382,4],[315,12,382,10,"warningCount"],[315,24,382,22],[315,27,382,25],[315,33,382,31],[315,37,382,35],[315,38,382,36,"db"],[315,40,382,38],[315,41,382,39,"getFirstAsync"],[315,54,382,52],[315,55,382,53],[315,95,382,93],[315,96,382,113],[316,6,383,4],[316,12,383,10,"unsyncedCount"],[316,25,383,23],[316,28,383,26],[316,34,383,32],[316,38,383,36],[316,39,383,37,"db"],[316,41,383,39],[316,42,383,40,"getFirstAsync"],[316,55,383,53],[316,56,383,54],[316,119,383,117],[316,120,383,137],[317,6,385,4],[317,13,385,11],[318,8,386,6,"totalSensorData"],[318,23,386,21],[318,25,386,23,"sensorCount"],[318,36,386,34],[318,37,386,35,"count"],[318,42,386,40],[319,8,387,6,"totalWarnings"],[319,21,387,19],[319,23,387,21,"warningCount"],[319,35,387,33],[319,36,387,34,"count"],[319,41,387,39],[320,8,388,6,"unsyncedData"],[320,20,388,18],[320,22,388,20,"unsyncedCount"],[320,35,388,33],[320,36,388,34,"count"],[321,6,389,4],[321,7,389,5],[322,4,390,2],[323,2,391,0],[324,2,393,7],[324,8,393,13,"localDB"],[324,15,393,20],[324,18,393,23],[324,22,393,27,"LocalDatabaseManager"],[324,42,393,47],[324,43,393,48],[324,44,393,49],[325,0,393,50],[325,3]],"functionMap":{"names":["<global>","LocalDatabaseManager","LocalDatabaseManager#initialize","LocalDatabaseManager#createTables","LocalDatabaseManager#saveSensorData","LocalDatabaseManager#getUnsyncedSensorData","result.map$argument_0","LocalDatabaseManager#markSensorDataSynced","localIds.map$argument_0","LocalDatabaseManager#saveWarnings","LocalDatabaseManager#getNearbyWarnings","LocalDatabaseManager#updateRegionSyncStatus","LocalDatabaseManager#getDownloadedRegions","LocalDatabaseManager#getSyncStatus","downloadedRegions.map$argument_0","LocalDatabaseManager#cleanupOldData","LocalDatabaseManager#getDatabaseStats"],"mappings":"AAA;ACuD;ECI;GDc;EEE;GF+D;EGG;GH6B;EIE;sBCU;MDgB;GJC;EME;sCCQ,SD;GNS;EQG;GRoC;ESE;sBJ4B;MIa;GTC;EUG;GVY;EWE;sBNU;MMK;GXC;EYG;+CCS,WD;GZG;EcG;GdoB;EeE;Gfe;CDC"},"hasCjsExports":false},"type":"js/module"}]}