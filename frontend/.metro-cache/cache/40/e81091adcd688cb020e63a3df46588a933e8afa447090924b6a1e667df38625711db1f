{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  exports.normalizeParams = normalizeParams;\n  exports.composeRow = composeRow;\n  exports.composeRows = composeRows;\n  exports.normalizeStorageIndex = normalizeStorageIndex;\n  /**\n   * Normalize the bind params to data structure that can be passed to native module.\n   * The data structure is a tuple of [primitiveParams, blobParams, shouldPassAsArray].\n   * @hidden\n   */\n  function normalizeParams() {\n    for (var _len = arguments.length, params = new Array(_len), _key = 0; _key < _len; _key++) {\n      params[_key] = arguments[_key];\n    }\n    var bindParams = params.length > 1 ? params : params[0];\n    if (bindParams == null) {\n      bindParams = [];\n    }\n    if (typeof bindParams !== 'object' || bindParams instanceof ArrayBuffer || ArrayBuffer.isView(bindParams)) {\n      bindParams = [bindParams];\n    }\n    var shouldPassAsArray = Array.isArray(bindParams);\n    if (Array.isArray(bindParams)) {\n      bindParams = bindParams.reduce((acc, value, index) => {\n        acc[index] = value;\n        return acc;\n      }, {});\n    }\n    var primitiveParams = {};\n    var blobParams = {};\n    for (var key in bindParams) {\n      var value = bindParams[key];\n      if (value instanceof Uint8Array) {\n        blobParams[key] = value;\n      } else {\n        primitiveParams[key] = value;\n      }\n    }\n    return [primitiveParams, blobParams, shouldPassAsArray];\n  }\n  /**\n   * Compose `columnNames` and `columnValues` to an row object.\n   * @hidden\n   */\n  function composeRow(columnNames, columnValues) {\n    // TODO(cedric): make these types more generic and tighten the returned object type based on provided column names/values\n    var row = {};\n    if (columnNames.length !== columnValues.length) {\n      throw new Error(`Column names and values count mismatch. Names: ${columnNames.length}, Values: ${columnValues.length}`);\n    }\n    for (var i = 0; i < columnNames.length; i++) {\n      row[columnNames[i]] = columnValues[i];\n    }\n    return row;\n  }\n  /**\n   * Compose `columnNames` and `columnValuesList` to an array of row objects.\n   * @hidden\n   */\n  function composeRows(columnNames, columnValuesList) {\n    if (columnValuesList.length === 0) {\n      return [];\n    }\n    if (columnNames.length !== columnValuesList[0].length) {\n      // We only check the first row because SQLite returns the same column count for all rows.\n      throw new Error(`Column names and values count mismatch. Names: ${columnNames.length}, Values: ${columnValuesList[0].length}`);\n    }\n    var results = [];\n    for (var columnValues of columnValuesList) {\n      // TODO(cedric): make these types more generic and tighten the returned object type based on provided column names/values\n      var row = {};\n      for (var i = 0; i < columnNames.length; i++) {\n        row[columnNames[i]] = columnValues[i];\n      }\n      results.push(row);\n    }\n    return results;\n  }\n  /**\n   * Normalize the index for the Storage.getKeyByIndexSync and Storage.getKeyByIndexAsync methods.\n   * @returns The normalized index or `null` if the index is out of bounds.\n   * @hidden\n   */\n  function normalizeStorageIndex(index) {\n    var value = Math.floor(Number(index));\n    // Boundary checks\n    if (Object.is(value, -0)) {\n      return 0;\n    }\n    if (!Number.isSafeInteger(value)) {\n      // Chromium uses zero index when the index is out of bounds\n      return 0;\n    }\n    if (value < 0) {\n      return null;\n    }\n    return value;\n  }\n});","lineCount":104,"map":[[7,2,6,0,"exports"],[7,9,6,0],[7,10,6,0,"normalizeParams"],[7,25,6,0],[7,28,6,0,"normalizeParams"],[7,43,6,0],[8,2,40,0,"exports"],[8,9,40,0],[8,10,40,0,"composeRow"],[8,20,40,0],[8,23,40,0,"composeRow"],[8,33,40,0],[9,2,55,0,"exports"],[9,9,55,0],[9,10,55,0,"composeRows"],[9,21,55,0],[9,24,55,0,"composeRows"],[9,35,55,0],[10,2,79,0,"exports"],[10,9,79,0],[10,10,79,0,"normalizeStorageIndex"],[10,31,79,0],[10,34,79,0,"normalizeStorageIndex"],[10,55,79,0],[11,2,1,0],[12,0,2,0],[13,0,3,0],[14,0,4,0],[15,0,5,0],[16,2,6,7],[16,11,6,16,"normalizeParams"],[16,26,6,31,"normalizeParams"],[16,27,6,31],[16,29,6,43],[17,4,6,43],[17,13,6,43,"_len"],[17,17,6,43],[17,20,6,43,"arguments"],[17,29,6,43],[17,30,6,43,"length"],[17,36,6,43],[17,38,6,35,"params"],[17,44,6,41],[17,51,6,41,"Array"],[17,56,6,41],[17,57,6,41,"_len"],[17,61,6,41],[17,64,6,41,"_key"],[17,68,6,41],[17,74,6,41,"_key"],[17,78,6,41],[17,81,6,41,"_len"],[17,85,6,41],[17,87,6,41,"_key"],[17,91,6,41],[18,6,6,35,"params"],[18,12,6,41],[18,13,6,41,"_key"],[18,17,6,41],[18,21,6,41,"arguments"],[18,30,6,41],[18,31,6,41,"_key"],[18,35,6,41],[19,4,6,41],[20,4,7,4],[20,8,7,8,"bindParams"],[20,18,7,18],[20,21,7,21,"params"],[20,27,7,27],[20,28,7,28,"length"],[20,34,7,34],[20,37,7,37],[20,38,7,38],[20,41,7,41,"params"],[20,47,7,47],[20,50,7,50,"params"],[20,56,7,56],[20,57,7,57],[20,58,7,58],[20,59,7,59],[21,4,8,4],[21,8,8,8,"bindParams"],[21,18,8,18],[21,22,8,22],[21,26,8,26],[21,28,8,28],[22,6,9,8,"bindParams"],[22,16,9,18],[22,19,9,21],[22,21,9,23],[23,4,10,4],[24,4,11,4],[24,8,11,8],[24,15,11,15,"bindParams"],[24,25,11,25],[24,30,11,30],[24,38,11,38],[24,42,12,8,"bindParams"],[24,52,12,18],[24,64,12,30,"ArrayBuffer"],[24,75,12,41],[24,79,13,8,"ArrayBuffer"],[24,90,13,19],[24,91,13,20,"isView"],[24,97,13,26],[24,98,13,27,"bindParams"],[24,108,13,37],[24,109,13,38],[24,111,13,40],[25,6,14,8,"bindParams"],[25,16,14,18],[25,19,14,21],[25,20,14,22,"bindParams"],[25,30,14,32],[25,31,14,33],[26,4,15,4],[27,4,16,4],[27,8,16,10,"shouldPassAsArray"],[27,25,16,27],[27,28,16,30,"Array"],[27,33,16,35],[27,34,16,36,"isArray"],[27,41,16,43],[27,42,16,44,"bindParams"],[27,52,16,54],[27,53,16,55],[28,4,17,4],[28,8,17,8,"Array"],[28,13,17,13],[28,14,17,14,"isArray"],[28,21,17,21],[28,22,17,22,"bindParams"],[28,32,17,32],[28,33,17,33],[28,35,17,35],[29,6,18,8,"bindParams"],[29,16,18,18],[29,19,18,21,"bindParams"],[29,29,18,31],[29,30,18,32,"reduce"],[29,36,18,38],[29,37,18,39],[29,38,18,40,"acc"],[29,41,18,43],[29,43,18,45,"value"],[29,48,18,50],[29,50,18,52,"index"],[29,55,18,57],[29,60,18,62],[30,8,19,12,"acc"],[30,11,19,15],[30,12,19,16,"index"],[30,17,19,21],[30,18,19,22],[30,21,19,25,"value"],[30,26,19,30],[31,8,20,12],[31,15,20,19,"acc"],[31,18,20,22],[32,6,21,8],[32,7,21,9],[32,9,21,11],[32,10,21,12],[32,11,21,13],[32,12,21,14],[33,4,22,4],[34,4,23,4],[34,8,23,10,"primitiveParams"],[34,23,23,25],[34,26,23,28],[34,27,23,29],[34,28,23,30],[35,4,24,4],[35,8,24,10,"blobParams"],[35,18,24,20],[35,21,24,23],[35,22,24,24],[35,23,24,25],[36,4,25,4],[36,9,25,9],[36,13,25,15,"key"],[36,16,25,18],[36,20,25,22,"bindParams"],[36,30,25,32],[36,32,25,34],[37,6,26,8],[37,10,26,14,"value"],[37,15,26,19],[37,18,26,22,"bindParams"],[37,28,26,32],[37,29,26,33,"key"],[37,32,26,36],[37,33,26,37],[38,6,27,8],[38,10,27,12,"value"],[38,15,27,17],[38,27,27,29,"Uint8Array"],[38,37,27,39],[38,39,27,41],[39,8,28,12,"blobParams"],[39,18,28,22],[39,19,28,23,"key"],[39,22,28,26],[39,23,28,27],[39,26,28,30,"value"],[39,31,28,35],[40,6,29,8],[40,7,29,9],[40,13,30,13],[41,8,31,12,"primitiveParams"],[41,23,31,27],[41,24,31,28,"key"],[41,27,31,31],[41,28,31,32],[41,31,31,35,"value"],[41,36,31,40],[42,6,32,8],[43,4,33,4],[44,4,34,4],[44,11,34,11],[44,12,34,12,"primitiveParams"],[44,27,34,27],[44,29,34,29,"blobParams"],[44,39,34,39],[44,41,34,41,"shouldPassAsArray"],[44,58,34,58],[44,59,34,59],[45,2,35,0],[46,2,36,0],[47,0,37,0],[48,0,38,0],[49,0,39,0],[50,2,40,7],[50,11,40,16,"composeRow"],[50,21,40,26,"composeRow"],[50,22,40,27,"columnNames"],[50,33,40,38],[50,35,40,40,"columnValues"],[50,47,40,52],[50,49,40,54],[51,4,41,4],[52,4,42,4],[52,8,42,10,"row"],[52,11,42,13],[52,14,42,16],[52,15,42,17],[52,16,42,18],[53,4,43,4],[53,8,43,8,"columnNames"],[53,19,43,19],[53,20,43,20,"length"],[53,26,43,26],[53,31,43,31,"columnValues"],[53,43,43,43],[53,44,43,44,"length"],[53,50,43,50],[53,52,43,52],[54,6,44,8],[54,12,44,14],[54,16,44,18,"Error"],[54,21,44,23],[54,22,44,24],[54,72,44,74,"columnNames"],[54,83,44,85],[54,84,44,86,"length"],[54,90,44,92],[54,103,44,105,"columnValues"],[54,115,44,117],[54,116,44,118,"length"],[54,122,44,124],[54,124,44,126],[54,125,44,127],[55,4,45,4],[56,4,46,4],[56,9,46,9],[56,13,46,13,"i"],[56,14,46,14],[56,17,46,17],[56,18,46,18],[56,20,46,20,"i"],[56,21,46,21],[56,24,46,24,"columnNames"],[56,35,46,35],[56,36,46,36,"length"],[56,42,46,42],[56,44,46,44,"i"],[56,45,46,45],[56,47,46,47],[56,49,46,49],[57,6,47,8,"row"],[57,9,47,11],[57,10,47,12,"columnNames"],[57,21,47,23],[57,22,47,24,"i"],[57,23,47,25],[57,24,47,26],[57,25,47,27],[57,28,47,30,"columnValues"],[57,40,47,42],[57,41,47,43,"i"],[57,42,47,44],[57,43,47,45],[58,4,48,4],[59,4,49,4],[59,11,49,11,"row"],[59,14,49,14],[60,2,50,0],[61,2,51,0],[62,0,52,0],[63,0,53,0],[64,0,54,0],[65,2,55,7],[65,11,55,16,"composeRows"],[65,22,55,27,"composeRows"],[65,23,55,28,"columnNames"],[65,34,55,39],[65,36,55,41,"columnValuesList"],[65,52,55,57],[65,54,55,59],[66,4,56,4],[66,8,56,8,"columnValuesList"],[66,24,56,24],[66,25,56,25,"length"],[66,31,56,31],[66,36,56,36],[66,37,56,37],[66,39,56,39],[67,6,57,8],[67,13,57,15],[67,15,57,17],[68,4,58,4],[69,4,59,4],[69,8,59,8,"columnNames"],[69,19,59,19],[69,20,59,20,"length"],[69,26,59,26],[69,31,59,31,"columnValuesList"],[69,47,59,47],[69,48,59,48],[69,49,59,49],[69,50,59,50],[69,51,59,51,"length"],[69,57,59,57],[69,59,59,59],[70,6,60,8],[71,6,61,8],[71,12,61,14],[71,16,61,18,"Error"],[71,21,61,23],[71,22,61,24],[71,72,61,74,"columnNames"],[71,83,61,85],[71,84,61,86,"length"],[71,90,61,92],[71,103,61,105,"columnValuesList"],[71,119,61,121],[71,120,61,122],[71,121,61,123],[71,122,61,124],[71,123,61,125,"length"],[71,129,61,131],[71,131,61,133],[71,132,61,134],[72,4,62,4],[73,4,63,4],[73,8,63,10,"results"],[73,15,63,17],[73,18,63,20],[73,20,63,22],[74,4,64,4],[74,9,64,9],[74,13,64,15,"columnValues"],[74,25,64,27],[74,29,64,31,"columnValuesList"],[74,45,64,47],[74,47,64,49],[75,6,65,8],[76,6,66,8],[76,10,66,14,"row"],[76,13,66,17],[76,16,66,20],[76,17,66,21],[76,18,66,22],[77,6,67,8],[77,11,67,13],[77,15,67,17,"i"],[77,16,67,18],[77,19,67,21],[77,20,67,22],[77,22,67,24,"i"],[77,23,67,25],[77,26,67,28,"columnNames"],[77,37,67,39],[77,38,67,40,"length"],[77,44,67,46],[77,46,67,48,"i"],[77,47,67,49],[77,49,67,51],[77,51,67,53],[78,8,68,12,"row"],[78,11,68,15],[78,12,68,16,"columnNames"],[78,23,68,27],[78,24,68,28,"i"],[78,25,68,29],[78,26,68,30],[78,27,68,31],[78,30,68,34,"columnValues"],[78,42,68,46],[78,43,68,47,"i"],[78,44,68,48],[78,45,68,49],[79,6,69,8],[80,6,70,8,"results"],[80,13,70,15],[80,14,70,16,"push"],[80,18,70,20],[80,19,70,21,"row"],[80,22,70,24],[80,23,70,25],[81,4,71,4],[82,4,72,4],[82,11,72,11,"results"],[82,18,72,18],[83,2,73,0],[84,2,74,0],[85,0,75,0],[86,0,76,0],[87,0,77,0],[88,0,78,0],[89,2,79,7],[89,11,79,16,"normalizeStorageIndex"],[89,32,79,37,"normalizeStorageIndex"],[89,33,79,38,"index"],[89,38,79,43],[89,40,79,45],[90,4,80,4],[90,8,80,10,"value"],[90,13,80,15],[90,16,80,18,"Math"],[90,20,80,22],[90,21,80,23,"floor"],[90,26,80,28],[90,27,80,29,"Number"],[90,33,80,35],[90,34,80,36,"index"],[90,39,80,41],[90,40,80,42],[90,41,80,43],[91,4,81,4],[92,4,82,4],[92,8,82,8,"Object"],[92,14,82,14],[92,15,82,15,"is"],[92,17,82,17],[92,18,82,18,"value"],[92,23,82,23],[92,25,82,25],[92,26,82,26],[92,27,82,27],[92,28,82,28],[92,30,82,30],[93,6,83,8],[93,13,83,15],[93,14,83,16],[94,4,84,4],[95,4,85,4],[95,8,85,8],[95,9,85,9,"Number"],[95,15,85,15],[95,16,85,16,"isSafeInteger"],[95,29,85,29],[95,30,85,30,"value"],[95,35,85,35],[95,36,85,36],[95,38,85,38],[96,6,86,8],[97,6,87,8],[97,13,87,15],[97,14,87,16],[98,4,88,4],[99,4,89,4],[99,8,89,8,"value"],[99,13,89,13],[99,16,89,16],[99,17,89,17],[99,19,89,19],[100,6,90,8],[100,13,90,15],[100,17,90,19],[101,4,91,4],[102,4,92,4],[102,11,92,11,"value"],[102,16,92,16],[103,2,93,0],[104,0,93,1],[104,3]],"functionMap":{"names":["<global>","normalizeParams","bindParams.reduce$argument_0","composeRow","composeRows","normalizeStorageIndex"],"mappings":"AAA;OCK;uCCY;SDG;CDc;OGK;CHU;OIK;CJkB;OKM;CLc"},"hasCjsExports":false},"type":"js/module"}]}